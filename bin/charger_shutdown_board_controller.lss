
bin/charger_shutdown_board_controller.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	10002000 	.word	0x10002000
       4:	000000c1 	.word	0x000000c1
       8:	000000e1 	.word	0x000000e1
       c:	000000e3 	.word	0x000000e3
	...
      2c:	000000e5 	.word	0x000000e5
	...
      38:	000000e7 	.word	0x000000e7
      3c:	00000125 	.word	0x00000125
      40:	000000eb 	.word	0x000000eb
      44:	000000eb 	.word	0x000000eb
      48:	000000eb 	.word	0x000000eb
      4c:	000000eb 	.word	0x000000eb
      50:	000000eb 	.word	0x000000eb
      54:	000000eb 	.word	0x000000eb
      58:	000000eb 	.word	0x000000eb
      5c:	000000eb 	.word	0x000000eb
      60:	000000eb 	.word	0x000000eb
      64:	000000eb 	.word	0x000000eb
      68:	000000eb 	.word	0x000000eb
      6c:	000000eb 	.word	0x000000eb
      70:	000000eb 	.word	0x000000eb
      74:	00000f19 	.word	0x00000f19
      78:	000000eb 	.word	0x000000eb
      7c:	000000eb 	.word	0x000000eb
      80:	000000eb 	.word	0x000000eb
      84:	000000eb 	.word	0x000000eb
      88:	000000eb 	.word	0x000000eb
      8c:	000000eb 	.word	0x000000eb
      90:	000000eb 	.word	0x000000eb
      94:	00000109 	.word	0x00000109
	...
      a0:	000000eb 	.word	0x000000eb
      a4:	000000eb 	.word	0x000000eb
      a8:	000000eb 	.word	0x000000eb
      ac:	00000000 	.word	0x00000000
      b0:	000000eb 	.word	0x000000eb
      b4:	000000eb 	.word	0x000000eb
      b8:	000000eb 	.word	0x000000eb
      bc:	000000eb 	.word	0x000000eb

000000c0 <Reset_Handler>:
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
      c0:	4905      	ldr	r1, [pc, #20]	; (d8 <Reset_Handler+0x18>)
    ldr r2, =__bss_end__
      c2:	4a06      	ldr	r2, [pc, #24]	; (dc <Reset_Handler+0x1c>)

    movs    r0, #0
      c4:	2000      	movs	r0, #0

    sub    r2, r1
      c6:	1a52      	subs	r2, r2, r1
    ble .L_loop3_done
      c8:	dd02      	ble.n	d0 <Reset_Handler+0x10>

.L_loop3:
    sub    r2, #4
      ca:	3a04      	subs	r2, #4
    str r0, [r1, r2]
      cc:	5088      	str	r0, [r1, r2]
    bgt .L_loop3
      ce:	dcfc      	bgt.n	ca <Reset_Handler+0xa>
.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */


#ifndef __NO_SYSTEM_INIT
    bl  SystemInit
      d0:	f000 fce0 	bl	a94 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
    bl  __START
      d4:	f000 fae2 	bl	69c <main>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
      d8:	10000108 	.word	0x10000108
    ldr r2, =__bss_end__
      dc:	100009b0 	.word	0x100009b0

000000e0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
      e0:	e7fe      	b.n	e0 <NMI_Handler>

000000e2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
      e2:	e7fe      	b.n	e2 <HardFault_Handler>

000000e4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
      e4:	e7fe      	b.n	e4 <SVC_Handler>

000000e6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
      e6:	e7fe      	b.n	e6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
      e8:	e7fe      	b.n	e8 <PendSV_Handler+0x2>

000000ea <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
      ea:	e7fe      	b.n	ea <Default_Handler>

000000ec <handle_can_error.part.1>:

void Board_Contactors_Set(bool close_contactors) {
  High_Side_Contactor_Pin_Set(close_contactors);
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
      ec:	b510      	push	{r4, lr}
        return;
    }
    if (!isResetting) {
        // We have an error, and should start a reset.
        // TODO change behavior depending on error type.
        isResetting = true;
      ee:	2201      	movs	r2, #1

void Board_Contactors_Set(bool close_contactors) {
  High_Side_Contactor_Pin_Set(close_contactors);
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
      f0:	0004      	movs	r4, r0
        return;
    }
    if (!isResetting) {
        // We have an error, and should start a reset.
        // TODO change behavior depending on error type.
        isResetting = true;
      f2:	4b04      	ldr	r3, [pc, #16]	; (104 <handle_can_error.part.1+0x18>)
      f4:	701a      	strb	r2, [r3, #0]
        CAN_ResetPeripheral();
      f6:	f000 fed5 	bl	ea4 <CAN_ResetPeripheral>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
      fa:	0020      	movs	r0, r4
      fc:	f001 f84c 	bl	1198 <Can0_Csb_Init>
        CAN_ResetPeripheral();
        Board_Can_Init(baud_rate);
        UNUSED(err);

    }
}
     100:	bd10      	pop	{r4, pc}
     102:	46c0      	nop			; (mov r8, r8)
     104:	100001ec 	.word	0x100001ec

00000108 <UART_IRQHandler>:
void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate);
void Send_Elcon_Command(CSB_OUTPUT_T *csb_output);
void Send_Bms_Switch(void);
void Send_Bms_Mode(CSB_STATE_T *csb_state);

void UART_IRQHandler(void) {
     108:	b510      	push	{r4, lr}
  Chip_UART_IRQRBHandler(LPC_USART, &uart_rx_ring, &uart_tx_ring);
     10a:	4a03      	ldr	r2, [pc, #12]	; (118 <UART_IRQHandler+0x10>)
     10c:	4903      	ldr	r1, [pc, #12]	; (11c <UART_IRQHandler+0x14>)
     10e:	4804      	ldr	r0, [pc, #16]	; (120 <UART_IRQHandler+0x18>)
     110:	f000 fdb2 	bl	c78 <Chip_UART_IRQRBHandler>
}
     114:	bd10      	pop	{r4, pc}
     116:	46c0      	nop			; (mov r8, r8)
     118:	10000170 	.word	0x10000170
     11c:	100001f0 	.word	0x100001f0
     120:	40008000 	.word	0x40008000

00000124 <SysTick_Handler>:

void SysTick_Handler(void) {
  msTicks++;
     124:	4a02      	ldr	r2, [pc, #8]	; (130 <SysTick_Handler+0xc>)
     126:	6813      	ldr	r3, [r2, #0]
     128:	3301      	adds	r3, #1
     12a:	6013      	str	r3, [r2, #0]
}
     12c:	4770      	bx	lr
     12e:	46c0      	nop			; (mov r8, r8)
     130:	1000065c 	.word	0x1000065c

00000134 <Board_Chip_Init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     134:	21fa      	movs	r1, #250	; 0xfa

void Board_Chip_Init(void) {
  SysTick_Config(Hertz2Ticks(1000));
     136:	4b0b      	ldr	r3, [pc, #44]	; (164 <Board_Chip_Init+0x30>)

void SysTick_Handler(void) {
  msTicks++;
}

void Board_Chip_Init(void) {
     138:	b510      	push	{r4, lr}
     13a:	6818      	ldr	r0, [r3, #0]
     13c:	0089      	lsls	r1, r1, #2
     13e:	f001 f991 	bl	1464 <__aeabi_uidiv>
     142:	4a09      	ldr	r2, [pc, #36]	; (168 <Board_Chip_Init+0x34>)
     144:	3801      	subs	r0, #1
     146:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     148:	20c0      	movs	r0, #192	; 0xc0
     14a:	4908      	ldr	r1, [pc, #32]	; (16c <Board_Chip_Init+0x38>)
     14c:	0600      	lsls	r0, r0, #24
     14e:	6a0b      	ldr	r3, [r1, #32]
     150:	021b      	lsls	r3, r3, #8
     152:	0a1b      	lsrs	r3, r3, #8
     154:	4303      	orrs	r3, r0
     156:	620b      	str	r3, [r1, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     158:	2300      	movs	r3, #0
     15a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     15c:	3307      	adds	r3, #7
     15e:	6013      	str	r3, [r2, #0]
  SysTick_Config(Hertz2Ticks(1000));
}
     160:	bd10      	pop	{r4, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	10000660 	.word	0x10000660
     168:	e000e010 	.word	0xe000e010
     16c:	e000ed00 	.word	0xe000ed00

00000170 <Board_Can_Init>:
uint32_t Board_Println_BLOCKING(const char *str) {
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
     170:	b510      	push	{r4, lr}
  Can0_Csb_Init(baud_rate);
     172:	f001 f811 	bl	1198 <Can0_Csb_Init>
}
     176:	bd10      	pop	{r4, pc}

00000178 <Board_UART_Init>:

void Board_UART_Init(uint32_t baudRateHz) {
     178:	b570      	push	{r4, r5, r6, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
     17a:	2400      	movs	r4, #0
  // Initialize UART Buffers
  RingBuffer_Init(&uart_rx_ring, _uart_rx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     17c:	4d18      	ldr	r5, [pc, #96]	; (1e0 <Board_UART_Init+0x68>)

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
}

void Board_UART_Init(uint32_t baudRateHz) {
     17e:	0006      	movs	r6, r0
  // Initialize UART Buffers
  RingBuffer_Init(&uart_rx_ring, _uart_rx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     180:	2364      	movs	r3, #100	; 0x64
     182:	2201      	movs	r2, #1
     184:	4917      	ldr	r1, [pc, #92]	; (1e4 <Board_UART_Init+0x6c>)
     186:	0028      	movs	r0, r5
     188:	f000 fd0e 	bl	ba8 <RingBuffer_Init>
     18c:	612c      	str	r4, [r5, #16]
     18e:	60ec      	str	r4, [r5, #12]
  RingBuffer_Flush(&uart_rx_ring);
  RingBuffer_Init(&uart_tx_ring, _uart_tx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     190:	4d15      	ldr	r5, [pc, #84]	; (1e8 <Board_UART_Init+0x70>)
     192:	4916      	ldr	r1, [pc, #88]	; (1ec <Board_UART_Init+0x74>)
     194:	2364      	movs	r3, #100	; 0x64
     196:	2201      	movs	r2, #1
     198:	0028      	movs	r0, r5
     19a:	f000 fd05 	bl	ba8 <RingBuffer_Init>
     19e:	612c      	str	r4, [r5, #16]
     1a0:	60ec      	str	r4, [r5, #12]
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
     1a2:	22a4      	movs	r2, #164	; 0xa4
     1a4:	2501      	movs	r5, #1
     1a6:	4b12      	ldr	r3, [pc, #72]	; (1f0 <Board_UART_Init+0x78>)
  RingBuffer_Flush(&uart_tx_ring);

  Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_6, (IOCON_FUNC1 | IOCON_MODE_INACT));/* RXD */
  Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_7, (IOCON_FUNC1 | IOCON_MODE_INACT));/* TXD */

  Chip_UART_Init(LPC_USART);
     1a8:	4c12      	ldr	r4, [pc, #72]	; (1f4 <Board_UART_Init+0x7c>)
     1aa:	509d      	str	r5, [r3, r2]
     1ac:	3204      	adds	r2, #4
     1ae:	509d      	str	r5, [r3, r2]
     1b0:	0020      	movs	r0, r4
     1b2:	f000 fd35 	bl	c20 <Chip_UART_Init>
  Chip_UART_SetBaudFDR(LPC_USART, baudRateHz);
     1b6:	0031      	movs	r1, r6
     1b8:	0020      	movs	r0, r4
     1ba:	f000 fd83 	bl	cc4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
     1be:	2303      	movs	r3, #3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     1c0:	2280      	movs	r2, #128	; 0x80
     1c2:	21c0      	movs	r1, #192	; 0xc0
     1c4:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
     1c6:	337e      	adds	r3, #126	; 0x7e
     1c8:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
     1ca:	3b01      	subs	r3, #1
     1cc:	6323      	str	r3, [r4, #48]	; 0x30
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
     1ce:	6863      	ldr	r3, [r4, #4]
     1d0:	0392      	lsls	r2, r2, #14
     1d2:	431d      	orrs	r5, r3
     1d4:	4b08      	ldr	r3, [pc, #32]	; (1f8 <Board_UART_Init+0x80>)
     1d6:	0049      	lsls	r1, r1, #1
     1d8:	6065      	str	r5, [r4, #4]
     1da:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     1dc:	601a      	str	r2, [r3, #0]
  Chip_UART_TXEnable(LPC_USART);

  Chip_UART_IntEnable(LPC_USART, UART_IER_RBRINT);
  NVIC_ClearPendingIRQ(UART0_IRQn);
  NVIC_EnableIRQ(UART0_IRQn);
}
     1de:	bd70      	pop	{r4, r5, r6, pc}
     1e0:	100001f0 	.word	0x100001f0
     1e4:	10000108 	.word	0x10000108
     1e8:	10000170 	.word	0x10000170
     1ec:	10000188 	.word	0x10000188
     1f0:	40044000 	.word	0x40044000
     1f4:	40008000 	.word	0x40008000
     1f8:	e000e100 	.word	0xe000e100

000001fc <Board_Can_ProcessInput>:

void Board_Can_ProcessInput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state){
     1fc:	b530      	push	{r4, r5, lr}
     1fe:	b085      	sub	sp, #20
     200:	0004      	movs	r4, r0
     202:	000d      	movs	r5, r1
  Can_MsgID_T msgType = Can_MsgType();
     204:	f000 ffd8 	bl	11b8 <Can_MsgType>

  if (msgType == Can_No_Msg) {
     208:	2800      	cmp	r0, #0
     20a:	d00a      	beq.n	222 <Stack_Size+0x22>
      // No message, so do nothing this round
      return;
  } else if (msgType == Can_Error_Msg) {
     20c:	2802      	cmp	r0, #2
     20e:	d01e      	beq.n	24e <Stack_Size+0x4e>
      handle_can_error(err, csb_state->curr_baud_rate);
      return;
  }

  // We had a successful reception, so finish reset (if it's still happening)
  isResetting = false;
     210:	2200      	movs	r2, #0
     212:	4b26      	ldr	r3, [pc, #152]	; (2ac <Stack_Size+0xac>)
     214:	701a      	strb	r2, [r3, #0]

  if (msgType == Can_Unknown_Msg) {
     216:	2801      	cmp	r0, #1
     218:	d025      	beq.n	266 <Stack_Size+0x66>
      Frame f;
      Can_Unknown_Read(&f);
  } else if (msgType == Can_ElconHeartbeat_Msg) {
     21a:	2806      	cmp	r0, #6
     21c:	d027      	beq.n	26e <Stack_Size+0x6e>
      csb_input->elcon_is_input_voltage_wrong = msg.is_input_voltage_wrong;
      csb_input->elcon_battery_voltage_not_detected = msg.battery_voltage_not_detected;
      csb_input->elcon_is_comms_bad = msg.elcon_is_comms_bad;
      //check this, maybe some logic from above signals
      csb_input->charger_on = true;
  } else if (msgType == Can_BmsPackStatus_Msg) {
     21e:	280f      	cmp	r0, #15
     220:	d001      	beq.n	226 <Stack_Size+0x26>
      //check this maybe gotta check if the above read correctly from CAN 2
      csb_input->receive_bms_config = true;
  } else {
      // note other errors
  }
}
     222:	b005      	add	sp, #20
     224:	bd30      	pop	{r4, r5, pc}
      csb_input->elcon_is_comms_bad = msg.elcon_is_comms_bad;
      //check this, maybe some logic from above signals
      csb_input->charger_on = true;
  } else if (msgType == Can_BmsPackStatus_Msg) {
      Can_BmsPackStatus_T msg;
      Can_BmsPackStatus_Read(&msg);
     226:	4668      	mov	r0, sp
     228:	f001 f8e6 	bl	13f8 <Can_BmsPackStatus_Read>
      csb_input->pack_status->pack_cell_max_mV = msg.max_cell_voltage;
     22c:	466a      	mov	r2, sp
     22e:	6823      	ldr	r3, [r4, #0]
     230:	88d2      	ldrh	r2, [r2, #6]
     232:	601a      	str	r2, [r3, #0]
      csb_input->pack_status->pack_current_mA = msg.pack_current;
     234:	466a      	mov	r2, sp
     236:	2108      	movs	r1, #8
     238:	5e52      	ldrsh	r2, [r2, r1]
     23a:	605a      	str	r2, [r3, #4]
      csb_input->pack_status->pack_voltage_mV= msg.pack_voltage;
     23c:	466a      	mov	r2, sp
     23e:	8852      	ldrh	r2, [r2, #2]
     240:	609a      	str	r2, [r3, #8]
      csb_input->balance_req = msg.balancing_needed;
     242:	466b      	mov	r3, sp
     244:	7b1b      	ldrb	r3, [r3, #12]
     246:	76a3      	strb	r3, [r4, #26]
      //check this maybe gotta check if the above read correctly from CAN 2
      csb_input->receive_bms_config = true;
     248:	2301      	movs	r3, #1
     24a:	7663      	strb	r3, [r4, #25]
     24c:	e7e9      	b.n	222 <Stack_Size+0x22>

  if (msgType == Can_No_Msg) {
      // No message, so do nothing this round
      return;
  } else if (msgType == Can_Error_Msg) {
      Can_ErrorID_T err = Can_Error_Read();
     24e:	f000 ff9b 	bl	1188 <Can_Error_Read>
void Board_Contactors_Set(bool close_contactors) {
  High_Side_Contactor_Pin_Set(close_contactors);
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     252:	2801      	cmp	r0, #1
     254:	d926      	bls.n	2a4 <Stack_Size+0xa4>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     256:	4b15      	ldr	r3, [pc, #84]	; (2ac <Stack_Size+0xac>)
     258:	781b      	ldrb	r3, [r3, #0]
     25a:	2b00      	cmp	r3, #0
     25c:	d1e1      	bne.n	222 <Stack_Size+0x22>
     25e:	68a8      	ldr	r0, [r5, #8]
     260:	f7ff ff44 	bl	ec <handle_can_error.part.1>
     264:	e7dd      	b.n	222 <Stack_Size+0x22>
  // We had a successful reception, so finish reset (if it's still happening)
  isResetting = false;

  if (msgType == Can_Unknown_Msg) {
      Frame f;
      Can_Unknown_Read(&f);
     266:	4668      	mov	r0, sp
     268:	f000 ff72 	bl	1150 <Can_Unknown_Read>
     26c:	e7d9      	b.n	222 <Stack_Size+0x22>
  } else if (msgType == Can_ElconHeartbeat_Msg) {
      Can_ElconHeartbeat_T msg;
      Can_ElconHeartbeat_Read(&msg);
     26e:	4668      	mov	r0, sp
     270:	f001 f892 	bl	1398 <Can_ElconHeartbeat_Read>
      csb_input->elcon_output_voltage = msg.output_voltage;
     274:	466b      	mov	r3, sp
     276:	889b      	ldrh	r3, [r3, #4]
     278:	8223      	strh	r3, [r4, #16]
      csb_input->elcon_output_current = msg.output_current;
     27a:	466b      	mov	r3, sp
     27c:	88db      	ldrh	r3, [r3, #6]
     27e:	8263      	strh	r3, [r4, #18]
      csb_input->elcon_has_hardware_failure = msg.has_hardware_failure;
     280:	466b      	mov	r3, sp
     282:	7a1b      	ldrb	r3, [r3, #8]
     284:	7523      	strb	r3, [r4, #20]
      csb_input->elcon_over_temp_protection_on = msg.over_temp_protection_on;
     286:	466b      	mov	r3, sp
     288:	785b      	ldrb	r3, [r3, #1]
     28a:	7563      	strb	r3, [r4, #21]
      csb_input->elcon_is_input_voltage_wrong = msg.is_input_voltage_wrong;
     28c:	466b      	mov	r3, sp
     28e:	789b      	ldrb	r3, [r3, #2]
     290:	75a3      	strb	r3, [r4, #22]
      csb_input->elcon_battery_voltage_not_detected = msg.battery_voltage_not_detected;
     292:	466b      	mov	r3, sp
     294:	781b      	ldrb	r3, [r3, #0]
     296:	75e3      	strb	r3, [r4, #23]
      csb_input->elcon_is_comms_bad = msg.elcon_is_comms_bad;
     298:	466b      	mov	r3, sp
     29a:	78db      	ldrb	r3, [r3, #3]
     29c:	7623      	strb	r3, [r4, #24]
      //check this, maybe some logic from above signals
      csb_input->charger_on = true;
     29e:	2301      	movs	r3, #1
     2a0:	7723      	strb	r3, [r4, #28]
     2a2:	e7be      	b.n	222 <Stack_Size+0x22>
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
        // Neither of these are real errors
        isResetting = false;
     2a4:	2200      	movs	r2, #0
     2a6:	4b01      	ldr	r3, [pc, #4]	; (2ac <Stack_Size+0xac>)
     2a8:	701a      	strb	r2, [r3, #0]
     2aa:	e7ba      	b.n	222 <Stack_Size+0x22>
     2ac:	100001ec 	.word	0x100001ec

000002b0 <Send_Elcon_Command>:
      last_csb_bms_mode_time = msTicks;
      Send_Bms_Mode(csb_state);
  }
}

void Send_Elcon_Command(CSB_OUTPUT_T *csb_output) {
     2b0:	b500      	push	{lr}
     2b2:	b083      	sub	sp, #12
  Can_ElconCommand_T elcon_command;
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
     2b4:	466b      	mov	r3, sp
     2b6:	8802      	ldrh	r2, [r0, #0]
     2b8:	809a      	strh	r2, [r3, #4]
  elcon_command.max_current = csb_output->current_req_mA;
     2ba:	8882      	ldrh	r2, [r0, #4]
     2bc:	801a      	strh	r2, [r3, #0]
  elcon_command.control = csb_output->charger_on;
     2be:	466a      	mov	r2, sp
     2c0:	7a83      	ldrb	r3, [r0, #10]

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
     2c2:	4668      	mov	r0, sp

void Send_Elcon_Command(CSB_OUTPUT_T *csb_output) {
  Can_ElconCommand_T elcon_command;
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
  elcon_command.max_current = csb_output->current_req_mA;
  elcon_command.control = csb_output->charger_on;
     2c4:	7093      	strb	r3, [r2, #2]

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
     2c6:	f001 f8a9 	bl	141c <Can_ElconCommand_Write>
void Board_Contactors_Set(bool close_contactors) {
  High_Side_Contactor_Pin_Set(close_contactors);
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     2ca:	2801      	cmp	r0, #1
     2cc:	d909      	bls.n	2e2 <Send_Elcon_Command+0x32>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     2ce:	4b07      	ldr	r3, [pc, #28]	; (2ec <Send_Elcon_Command+0x3c>)
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	2b00      	cmp	r3, #0
     2d4:	d001      	beq.n	2da <Send_Elcon_Command+0x2a>
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
  elcon_command.max_current = csb_output->current_req_mA;
  elcon_command.control = csb_output->charger_on;

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
}
     2d6:	b003      	add	sp, #12
     2d8:	bd00      	pop	{pc}
     2da:	4805      	ldr	r0, [pc, #20]	; (2f0 <Send_Elcon_Command+0x40>)
     2dc:	f7ff ff06 	bl	ec <handle_can_error.part.1>
     2e0:	e7f9      	b.n	2d6 <Send_Elcon_Command+0x26>
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
        // Neither of these are real errors
        isResetting = false;
     2e2:	2200      	movs	r2, #0
     2e4:	4b01      	ldr	r3, [pc, #4]	; (2ec <Send_Elcon_Command+0x3c>)
     2e6:	701a      	strb	r2, [r3, #0]
     2e8:	e7f5      	b.n	2d6 <Send_Elcon_Command+0x26>
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	100001ec 	.word	0x100001ec
     2f0:	0003d090 	.word	0x0003d090

000002f4 <Send_Bms_Switch>:
  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
}

void Send_Bms_Switch(void) {
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;
     2f4:	2301      	movs	r3, #1
  elcon_command.control = csb_output->charger_on;

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
}

void Send_Bms_Switch(void) {
     2f6:	b500      	push	{lr}
     2f8:	b083      	sub	sp, #12
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;
     2fa:	a801      	add	r0, sp, #4
     2fc:	7003      	strb	r3, [r0, #0]

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
     2fe:	f001 f82d 	bl	135c <Can_BMS_CSB_Switch_Write>
void Board_Contactors_Set(bool close_contactors) {
  High_Side_Contactor_Pin_Set(close_contactors);
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     302:	2801      	cmp	r0, #1
     304:	d909      	bls.n	31a <Send_Bms_Switch+0x26>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     306:	4b07      	ldr	r3, [pc, #28]	; (324 <Send_Bms_Switch+0x30>)
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	2b00      	cmp	r3, #0
     30c:	d001      	beq.n	312 <Send_Bms_Switch+0x1e>
void Send_Bms_Switch(void) {
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
}
     30e:	b003      	add	sp, #12
     310:	bd00      	pop	{pc}
     312:	4805      	ldr	r0, [pc, #20]	; (328 <Send_Bms_Switch+0x34>)
     314:	f7ff feea 	bl	ec <handle_can_error.part.1>
     318:	e7f9      	b.n	30e <Send_Bms_Switch+0x1a>
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
        // Neither of these are real errors
        isResetting = false;
     31a:	2200      	movs	r2, #0
     31c:	4b01      	ldr	r3, [pc, #4]	; (324 <Send_Bms_Switch+0x30>)
     31e:	701a      	strb	r2, [r3, #0]
     320:	e7f5      	b.n	30e <Send_Bms_Switch+0x1a>
     322:	46c0      	nop			; (mov r8, r8)
     324:	100001ec 	.word	0x100001ec
     328:	0007a120 	.word	0x0007a120

0000032c <Send_Bms_Mode>:
  switch_msg.always_true = true;

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
}

void Send_Bms_Mode(CSB_STATE_T *csb_state) {
     32c:	b500      	push	{lr}
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
     32e:	7903      	ldrb	r3, [r0, #4]
  switch_msg.always_true = true;

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
}

void Send_Bms_Mode(CSB_STATE_T *csb_state) {
     330:	b083      	sub	sp, #12
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
     332:	2b02      	cmp	r3, #2
     334:	d01c      	beq.n	370 <Send_Bms_Mode+0x44>
     336:	2b03      	cmp	r3, #3
     338:	d00f      	beq.n	35a <Send_Bms_Mode+0x2e>
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__BALANCE;
      break;
    case CSB_SSM_MODE_INIT:
    case CSB_SSM_MODE_IDLE:
    default:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__IDLE;
     33a:	2302      	movs	r3, #2
     33c:	a801      	add	r0, sp, #4
     33e:	7003      	strb	r3, [r0, #0]
      break;
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
     340:	f001 f83c 	bl	13bc <Can_BMS_Mode_Write>
void Board_Contactors_Set(bool close_contactors) {
  High_Side_Contactor_Pin_Set(close_contactors);
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     344:	2801      	cmp	r0, #1
     346:	d90f      	bls.n	368 <Send_Bms_Mode+0x3c>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     348:	4b0b      	ldr	r3, [pc, #44]	; (378 <Send_Bms_Mode+0x4c>)
     34a:	781b      	ldrb	r3, [r3, #0]
     34c:	2b00      	cmp	r3, #0
     34e:	d102      	bne.n	356 <Send_Bms_Mode+0x2a>
     350:	480a      	ldr	r0, [pc, #40]	; (37c <Send_Bms_Mode+0x50>)
     352:	f7ff fecb 	bl	ec <handle_can_error.part.1>
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__IDLE;
      break;
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
}
     356:	b003      	add	sp, #12
     358:	bd00      	pop	{pc}
  switch (csb_state->curr_mode) {
    case CSB_SSM_MODE_CHARGE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__CHARGE;
      break;
    case CSB_SSM_MODE_BALANCE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__BALANCE;
     35a:	2301      	movs	r3, #1
     35c:	a801      	add	r0, sp, #4
     35e:	7003      	strb	r3, [r0, #0]
    default:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__IDLE;
      break;
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
     360:	f001 f82c 	bl	13bc <Can_BMS_Mode_Write>
void Board_Contactors_Set(bool close_contactors) {
  High_Side_Contactor_Pin_Set(close_contactors);
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     364:	2801      	cmp	r0, #1
     366:	d8ef      	bhi.n	348 <Send_Bms_Mode+0x1c>
        // Neither of these are real errors
        isResetting = false;
     368:	2200      	movs	r2, #0
     36a:	4b03      	ldr	r3, [pc, #12]	; (378 <Send_Bms_Mode+0x4c>)
     36c:	701a      	strb	r2, [r3, #0]
     36e:	e7f2      	b.n	356 <Send_Bms_Mode+0x2a>
void Send_Bms_Mode(CSB_STATE_T *csb_state) {
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
    case CSB_SSM_MODE_CHARGE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__CHARGE;
     370:	2300      	movs	r3, #0
     372:	a801      	add	r0, sp, #4
     374:	7003      	strb	r3, [r0, #0]
      break;
     376:	e7e3      	b.n	340 <Send_Bms_Mode+0x14>
     378:	100001ec 	.word	0x100001ec
     37c:	0003d090 	.word	0x0003d090

00000380 <Board_Can_ProcessOutput>:
  } else {
      // note other errors
  }
}

void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
     380:	b570      	push	{r4, r5, r6, lr}
     382:	0016      	movs	r6, r2
  uint32_t msTicks = csb_input->msTicks;
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_500)){
     384:	2280      	movs	r2, #128	; 0x80
     386:	888b      	ldrh	r3, [r1, #4]
  } else {
      // note other errors
  }
}

void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
     388:	000d      	movs	r5, r1
  uint32_t msTicks = csb_input->msTicks;
     38a:	68c4      	ldr	r4, [r0, #12]
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_500)){
     38c:	0052      	lsls	r2, r2, #1
     38e:	4293      	cmp	r3, r2
     390:	d02b      	beq.n	3ea <Board_Can_ProcessOutput+0x6a>
      Board_Can_Init(BMS_CAN_BAUD);
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
     392:	22c0      	movs	r2, #192	; 0xc0
     394:	0092      	lsls	r2, r2, #2
     396:	4293      	cmp	r3, r2
     398:	d02f      	beq.n	3fa <Board_Can_ProcessOutput+0x7a>
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
     39a:	21fa      	movs	r1, #250	; 0xfa
     39c:	4a19      	ldr	r2, [pc, #100]	; (404 <Board_Can_ProcessOutput+0x84>)
     39e:	0089      	lsls	r1, r1, #2
     3a0:	6813      	ldr	r3, [r2, #0]
     3a2:	1ae3      	subs	r3, r4, r3
     3a4:	428b      	cmp	r3, r1
     3a6:	d902      	bls.n	3ae <Board_Can_ProcessOutput+0x2e>
     3a8:	792b      	ldrb	r3, [r5, #4]
     3aa:	2b00      	cmp	r3, #0
     3ac:	d118      	bne.n	3e0 <Board_Can_ProcessOutput+0x60>
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
  }
  if ( ((msTicks - last_csb_bms_switch_time) > CSB_BMS_CSB_SWITCH_PERIOD) && (csb_output->send_bms_config == true)) {
     3ae:	4a16      	ldr	r2, [pc, #88]	; (408 <Board_Can_ProcessOutput+0x88>)
     3b0:	4916      	ldr	r1, [pc, #88]	; (40c <Board_Can_ProcessOutput+0x8c>)
     3b2:	6813      	ldr	r3, [r2, #0]
     3b4:	1ae3      	subs	r3, r4, r3
     3b6:	428b      	cmp	r3, r1
     3b8:	d902      	bls.n	3c0 <Board_Can_ProcessOutput+0x40>
     3ba:	7a33      	ldrb	r3, [r6, #8]
     3bc:	2b00      	cmp	r3, #0
     3be:	d10b      	bne.n	3d8 <Board_Can_ProcessOutput+0x58>
      last_csb_bms_switch_time = msTicks;
      Send_Bms_Switch();
  }
  if ( (msTicks - last_csb_bms_mode_time) > CSB_BMS_MODE_PERIOD) {
     3c0:	21fa      	movs	r1, #250	; 0xfa
     3c2:	4a13      	ldr	r2, [pc, #76]	; (410 <Board_Can_ProcessOutput+0x90>)
     3c4:	0089      	lsls	r1, r1, #2
     3c6:	6813      	ldr	r3, [r2, #0]
     3c8:	1ae3      	subs	r3, r4, r3
     3ca:	428b      	cmp	r3, r1
     3cc:	d903      	bls.n	3d6 <Board_Can_ProcessOutput+0x56>
      last_csb_bms_mode_time = msTicks;
      Send_Bms_Mode(csb_state);
     3ce:	0028      	movs	r0, r5
  if ( ((msTicks - last_csb_bms_switch_time) > CSB_BMS_CSB_SWITCH_PERIOD) && (csb_output->send_bms_config == true)) {
      last_csb_bms_switch_time = msTicks;
      Send_Bms_Switch();
  }
  if ( (msTicks - last_csb_bms_mode_time) > CSB_BMS_MODE_PERIOD) {
      last_csb_bms_mode_time = msTicks;
     3d0:	6014      	str	r4, [r2, #0]
      Send_Bms_Mode(csb_state);
     3d2:	f7ff ffab 	bl	32c <Send_Bms_Mode>
  }
}
     3d6:	bd70      	pop	{r4, r5, r6, pc}
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
  }
  if ( ((msTicks - last_csb_bms_switch_time) > CSB_BMS_CSB_SWITCH_PERIOD) && (csb_output->send_bms_config == true)) {
      last_csb_bms_switch_time = msTicks;
     3d8:	6014      	str	r4, [r2, #0]
      Send_Bms_Switch();
     3da:	f7ff ff8b 	bl	2f4 <Send_Bms_Switch>
     3de:	e7ef      	b.n	3c0 <Board_Can_ProcessOutput+0x40>
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
     3e0:	0030      	movs	r0, r6
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
     3e2:	6014      	str	r4, [r2, #0]
      Send_Elcon_Command(csb_output);
     3e4:	f7ff ff64 	bl	2b0 <Send_Elcon_Command>
     3e8:	e7e1      	b.n	3ae <Board_Can_ProcessOutput+0x2e>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
     3ea:	480a      	ldr	r0, [pc, #40]	; (414 <Board_Can_ProcessOutput+0x94>)
     3ec:	f000 fed4 	bl	1198 <Can0_Csb_Init>
void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
  uint32_t msTicks = csb_input->msTicks;
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_500)){
      Board_Can_Init(BMS_CAN_BAUD);
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
     3f0:	22c0      	movs	r2, #192	; 0xc0
     3f2:	88ab      	ldrh	r3, [r5, #4]
     3f4:	0092      	lsls	r2, r2, #2
     3f6:	4293      	cmp	r3, r2
     3f8:	d1cf      	bne.n	39a <Board_Can_ProcessOutput+0x1a>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
     3fa:	4807      	ldr	r0, [pc, #28]	; (418 <Board_Can_ProcessOutput+0x98>)
     3fc:	f000 fecc 	bl	1198 <Can0_Csb_Init>
     400:	e7cb      	b.n	39a <Board_Can_ProcessOutput+0x1a>
     402:	46c0      	nop			; (mov r8, r8)
     404:	1000016c 	.word	0x1000016c
     408:	10000204 	.word	0x10000204
     40c:	00007530 	.word	0x00007530
     410:	10000184 	.word	0x10000184
     414:	0007a120 	.word	0x0007a120
     418:	0003d090 	.word	0x0003d090

0000041c <Board_Contactors_Closed>:
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
}

bool Board_Contactors_Closed(void) {
     41c:	b510      	push	{r4, lr}
  return Low_Side_Contactor_Pin_Get();
     41e:	f000 fa87 	bl	930 <Low_Side_Contactor_Pin_Get>
}
     422:	bd10      	pop	{r4, pc}

00000424 <Board_GetModeRequest>:

void Board_GetModeRequest(void) {
  //balance_mV, mode_request for csb_inputs
}
     424:	4770      	bx	lr
     426:	46c0      	nop			; (mov r8, r8)

00000428 <Board_Contactors_Set>:

void Board_Contactors_Set(bool close_contactors) {
     428:	b510      	push	{r4, lr}
  High_Side_Contactor_Pin_Set(close_contactors);
     42a:	f000 fa89 	bl	940 <High_Side_Contactor_Pin_Set>
}
     42e:	bd10      	pop	{r4, pc}

00000430 <Charge_Init>:
static uint32_t last_time_above_cv_min_curr;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state) {
    state->charge_state = CSB_CHARGE_OFF;
     430:	2300      	movs	r3, #0
    last_time_above_cv_min_curr = 0;
     432:	4a02      	ldr	r2, [pc, #8]	; (43c <Charge_Init+0xc>)
static uint32_t last_time_above_cv_min_curr;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state) {
    state->charge_state = CSB_CHARGE_OFF;
     434:	7183      	strb	r3, [r0, #6]
    last_time_above_cv_min_curr = 0;
     436:	6013      	str	r3, [r2, #0]
}
     438:	4770      	bx	lr
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	10000210 	.word	0x10000210

00000440 <Charge_Step>:

    cv_charge_voltage_mV = pack_config->cell_max_mV * total_num_cells;
    cv_charge_current_mA = cc_charge_current_mA;
}

void Charge_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     440:	b570      	push	{r4, r5, r6, lr}

    switch (input->mode_request) {
     442:	7903      	ldrb	r3, [r0, #4]
     444:	2b02      	cmp	r3, #2
     446:	d029      	beq.n	49c <Charge_Step+0x5c>
     448:	2b03      	cmp	r3, #3
     44a:	d111      	bne.n	470 <Charge_Step+0x30>
                state->charge_state = CSB_CHARGE_INIT;
            }
            break;

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
     44c:	798c      	ldrb	r4, [r1, #6]
     44e:	2c00      	cmp	r4, #0
     450:	d12f      	bne.n	4b2 <Charge_Step+0x72>

    switch (input->mode_request) {
        case CSB_SSM_MODE_CHARGE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_BAL) {
                state->charge_state = CSB_CHARGE_INIT;
     452:	2401      	movs	r4, #1
     454:	718c      	strb	r4, [r1, #6]
    switch (state->charge_state) {
        case CSB_CHARGE_OFF:
            _set_output(false, false, 0, 0, output);
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);
     456:	1e9c      	subs	r4, r3, #2
     458:	4266      	negs	r6, r4
     45a:	4166      	adcs	r6, r4
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
    output->charger_on = charger_on;
     45c:	2500      	movs	r5, #0
    switch (state->charge_state) {
        case CSB_CHARGE_OFF:
            _set_output(false, false, 0, 0, output);
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);
     45e:	b2f4      	uxtb	r4, r6
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     460:	7254      	strb	r4, [r2, #9]
    output->charger_on = charger_on;
     462:	7295      	strb	r5, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     464:	6015      	str	r5, [r2, #0]
    output->current_req_mA = charge_current_mA;
     466:	6055      	str	r5, [r2, #4]
            _set_output(false, false, 0, 0, output);
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
     468:	7ec2      	ldrb	r2, [r0, #27]
     46a:	42a2      	cmp	r2, r4
     46c:	d02d      	beq.n	4ca <Charge_Step+0x8a>
            break;
        case CSB_CHARGE_FAULT:
          //idk
          break;
    }
}
     46e:	bd70      	pop	{r4, r5, r6, pc}
            }
            break;

        // we want to switch states (either to STANDBY/DISCHARGE/ERROR)
        default:
            if(state->charge_state == CSB_CHARGE_OFF) {
     470:	798c      	ldrb	r4, [r1, #6]
     472:	2c00      	cmp	r4, #0
     474:	d023      	beq.n	4be <Charge_Step+0x7e>
                state->charge_state = CSB_CHARGE_OFF;
            } else {
                state->charge_state = CSB_CHARGE_DONE;
     476:	2406      	movs	r4, #6
     478:	718c      	strb	r4, [r1, #6]
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     47a:	2400      	movs	r4, #0
     47c:	7254      	strb	r4, [r2, #9]
    output->charger_on = charger_on;
     47e:	7294      	strb	r4, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     480:	6014      	str	r4, [r2, #0]
    output->current_req_mA = charge_current_mA;
     482:	6054      	str	r4, [r2, #4]
            _set_output(false, false, 0, 0, output);

            // if not in Charge or Balance, that means SSM is trying to switch to another mode so wait for contactors to close
            // if in charge or balance, make sure we don't need to go back to charge or balance
            //    if we do, go back to init
            if (input->mode_request != CSB_SSM_MODE_CHARGE && input->mode_request != CSB_SSM_MODE_BALANCE) {
     484:	1e9a      	subs	r2, r3, #2
     486:	2a01      	cmp	r2, #1
     488:	d800      	bhi.n	48c <Charge_Step+0x4c>
     48a:	e08c      	b.n	5a6 <Charge_Step+0x166>
                if (!input->contactors_closed && !input->charger_on) {
     48c:	7ec3      	ldrb	r3, [r0, #27]
     48e:	2b00      	cmp	r3, #0
     490:	d1ed      	bne.n	46e <Charge_Step+0x2e>
     492:	7f03      	ldrb	r3, [r0, #28]
     494:	2b00      	cmp	r3, #0
     496:	d1ea      	bne.n	46e <Charge_Step+0x2e>
                    state->charge_state = CSB_CHARGE_OFF;
                }
            } else {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
                    if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                        state->charge_state = CSB_CHARGE_INIT;
     498:	718b      	strb	r3, [r1, #6]
            break;
        case CSB_CHARGE_FAULT:
          //idk
          break;
    }
}
     49a:	e7e8      	b.n	46e <Charge_Step+0x2e>

void Charge_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {

    switch (input->mode_request) {
        case CSB_SSM_MODE_CHARGE:
            if (state->charge_state == CSB_CHARGE_OFF
     49c:	798c      	ldrb	r4, [r1, #6]
     49e:	2504      	movs	r5, #4
     4a0:	0026      	movs	r6, r4
     4a2:	43ae      	bics	r6, r5
     4a4:	d0d5      	beq.n	452 <Charge_Step+0x12>
                state->charge_state = CSB_CHARGE_DONE;
            }
            break;
    }

    switch (state->charge_state) {
     4a6:	2c06      	cmp	r4, #6
     4a8:	d8e1      	bhi.n	46e <Charge_Step+0x2e>
     4aa:	4d45      	ldr	r5, [pc, #276]	; (5c0 <Charge_Step+0x180>)
     4ac:	00a4      	lsls	r4, r4, #2
     4ae:	592c      	ldr	r4, [r5, r4]
     4b0:	46a7      	mov	pc, r4
            }
            break;

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_CC
     4b2:	1ea5      	subs	r5, r4, #2
     4b4:	2d01      	cmp	r5, #1
     4b6:	d9cc      	bls.n	452 <Charge_Step+0x12>
                state->charge_state = CSB_CHARGE_DONE;
            }
            break;
    }

    switch (state->charge_state) {
     4b8:	2c06      	cmp	r4, #6
     4ba:	d9f6      	bls.n	4aa <Charge_Step+0x6a>
     4bc:	e7d7      	b.n	46e <Charge_Step+0x2e>
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     4be:	2300      	movs	r3, #0
     4c0:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     4c2:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     4c4:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     4c6:	6053      	str	r3, [r2, #4]
     4c8:	e7d1      	b.n	46e <Charge_Step+0x2e>
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
     4ca:	2b02      	cmp	r3, #2
     4cc:	d062      	beq.n	594 <Charge_Step+0x154>
                    state->charge_state =
                        (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) ? CSB_CHARGE_CC : CSB_CHARGE_CV;
                } else if (input->mode_request == CSB_SSM_MODE_BALANCE) {
     4ce:	2b03      	cmp	r3, #3
     4d0:	d1cd      	bne.n	46e <Charge_Step+0x2e>
     4d2:	e011      	b.n	4f8 <Charge_Step+0xb8>
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     4d4:	2300      	movs	r3, #0
     4d6:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     4d8:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     4da:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     4dc:	6053      	str	r3, [r2, #4]
        case CSB_CHARGE_BAL:
            _set_output(false, false, 0, 0, output);
            bool balancing = input->balance_req;

            // Done balancing
            if (!balancing) {
     4de:	7e83      	ldrb	r3, [r0, #26]
     4e0:	2b00      	cmp	r3, #0
     4e2:	d101      	bne.n	4e8 <Charge_Step+0xa8>
                state->charge_state = CSB_CHARGE_DONE;
     4e4:	3306      	adds	r3, #6
     4e6:	718b      	strb	r3, [r1, #6]
            }

            if(input->contactors_closed) {
     4e8:	7ec3      	ldrb	r3, [r0, #27]
     4ea:	2b00      	cmp	r3, #0
     4ec:	d0bf      	beq.n	46e <Charge_Step+0x2e>
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     4ee:	2300      	movs	r3, #0
     4f0:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     4f2:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     4f4:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     4f6:	6053      	str	r3, [r2, #4]
                state->charge_state = CSB_CHARGE_DONE;
            }

            if(input->contactors_closed) {
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_INIT;
     4f8:	3301      	adds	r3, #1
     4fa:	718b      	strb	r3, [r1, #6]
     4fc:	e7b7      	b.n	46e <Charge_Step+0x2e>
                state->charge_state = CSB_CHARGE_INIT;
            }
            break;
        case CSB_CHARGE_CV:

            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
     4fe:	6804      	ldr	r4, [r0, #0]
     500:	680b      	ldr	r3, [r1, #0]
     502:	6825      	ldr	r5, [r4, #0]
     504:	685e      	ldr	r6, [r3, #4]
     506:	42b5      	cmp	r5, r6
     508:	d222      	bcs.n	550 <Charge_Step+0x110>
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
     50a:	2302      	movs	r3, #2
     50c:	718b      	strb	r3, [r1, #6]
            if (input->pack_status->pack_cell_max_mV >= state->pack_config->cell_max_mV) {
                state->charge_state = CSB_CHARGE_CV; // Need to go to CV Mode
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
            } else {
                // Charge in CC Mode
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
     50e:	4b2d      	ldr	r3, [pc, #180]	; (5c4 <Charge_Step+0x184>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	6013      	str	r3, [r2, #0]
     514:	4b2c      	ldr	r3, [pc, #176]	; (5c8 <Charge_Step+0x188>)
     516:	681b      	ldr	r3, [r3, #0]
     518:	6053      	str	r3, [r2, #4]
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     51a:	2301      	movs	r3, #1
     51c:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     51e:	7293      	strb	r3, [r2, #10]
                // Charge in CC Mode
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            }

            // if(!input->contactors_closed || !input->charger_on) { // [TODO] Think about this
            if(!input->contactors_closed) {
     520:	7ec3      	ldrb	r3, [r0, #27]
     522:	2b00      	cmp	r3, #0
     524:	d1a3      	bne.n	46e <Charge_Step+0x2e>
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
    output->charger_on = charger_on;
     526:	2300      	movs	r3, #0
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     528:	2001      	movs	r0, #1
    output->charger_on = charger_on;
     52a:	7293      	strb	r3, [r2, #10]
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     52c:	7250      	strb	r0, [r2, #9]
    output->charger_on = charger_on;
    output->voltage_req_mV = charge_voltage_mV;
     52e:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     530:	6053      	str	r3, [r2, #4]
            }

            // if(!input->contactors_closed || !input->charger_on) { // [TODO] Think about this
            if(!input->contactors_closed) {
                _set_output(true, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_INIT;
     532:	7188      	strb	r0, [r1, #6]
     534:	e79b      	b.n	46e <Charge_Step+0x2e>
                    state->charge_state = CSB_CHARGE_BAL;
                }
            }
            break;
        case CSB_CHARGE_CC:
            if (input->pack_status->pack_cell_max_mV >= state->pack_config->cell_max_mV) {
     536:	6804      	ldr	r4, [r0, #0]
     538:	680b      	ldr	r3, [r1, #0]
     53a:	6824      	ldr	r4, [r4, #0]
     53c:	685b      	ldr	r3, [r3, #4]
     53e:	429c      	cmp	r4, r3
     540:	d3e5      	bcc.n	50e <Charge_Step+0xce>
                state->charge_state = CSB_CHARGE_CV; // Need to go to CV Mode
     542:	2303      	movs	r3, #3
     544:	718b      	strb	r3, [r1, #6]
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     546:	4b21      	ldr	r3, [pc, #132]	; (5cc <Charge_Step+0x18c>)
     548:	681b      	ldr	r3, [r3, #0]
     54a:	6013      	str	r3, [r2, #0]
     54c:	4b20      	ldr	r3, [pc, #128]	; (5d0 <Charge_Step+0x190>)
     54e:	e7e2      	b.n	516 <Charge_Step+0xd6>
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     550:	4d1e      	ldr	r5, [pc, #120]	; (5cc <Charge_Step+0x18c>)

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     552:	6a1e      	ldr	r6, [r3, #32]
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     554:	682d      	ldr	r5, [r5, #0]

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     556:	6864      	ldr	r4, [r4, #4]
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     558:	6015      	str	r5, [r2, #0]
     55a:	4d1d      	ldr	r5, [pc, #116]	; (5d0 <Charge_Step+0x190>)
     55c:	682d      	ldr	r5, [r5, #0]
     55e:	6055      	str	r5, [r2, #4]
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     560:	2501      	movs	r5, #1
     562:	7255      	strb	r5, [r2, #9]
    output->charger_on = charger_on;
     564:	7295      	strb	r5, [r2, #10]
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     566:	69dd      	ldr	r5, [r3, #28]
     568:	4375      	muls	r5, r6
     56a:	42ac      	cmp	r4, r5
     56c:	d20e      	bcs.n	58c <Charge_Step+0x14c>
                    if ((input->msTicks - last_time_above_cv_min_curr) >= state->pack_config->cv_min_current_ms) {
     56e:	4c19      	ldr	r4, [pc, #100]	; (5d4 <Charge_Step+0x194>)
     570:	68c5      	ldr	r5, [r0, #12]
     572:	6824      	ldr	r4, [r4, #0]
     574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     576:	1b2c      	subs	r4, r5, r4
     578:	429c      	cmp	r4, r3
     57a:	d3d1      	bcc.n	520 <Charge_Step+0xe0>
          break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     57c:	2300      	movs	r3, #0
     57e:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     580:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     582:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     584:	6053      	str	r3, [r2, #4]
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
                    if ((input->msTicks - last_time_above_cv_min_curr) >= state->pack_config->cv_min_current_ms) {
                        _set_output(false, false, 0, 0, output);
                        state->charge_state = CSB_CHARGE_DONE;
     586:	3306      	adds	r3, #6
     588:	718b      	strb	r3, [r1, #6]
                        break;
     58a:	e770      	b.n	46e <Charge_Step+0x2e>
                    }
                } else {
                    last_time_above_cv_min_curr = input->msTicks;
     58c:	4b11      	ldr	r3, [pc, #68]	; (5d4 <Charge_Step+0x194>)
     58e:	68c4      	ldr	r4, [r0, #12]
     590:	601c      	str	r4, [r3, #0]
     592:	e7c5      	b.n	520 <Charge_Step+0xe0>
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
                    state->charge_state =
                        (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) ? CSB_CHARGE_CC : CSB_CHARGE_CV;
     594:	6802      	ldr	r2, [r0, #0]
     596:	680b      	ldr	r3, [r1, #0]
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
                    state->charge_state =
     598:	6812      	ldr	r2, [r2, #0]
     59a:	685b      	ldr	r3, [r3, #4]
     59c:	429a      	cmp	r2, r3
     59e:	416d      	adcs	r5, r5
     5a0:	3502      	adds	r5, #2
     5a2:	718d      	strb	r5, [r1, #6]
     5a4:	e763      	b.n	46e <Charge_Step+0x2e>
            if (input->mode_request != CSB_SSM_MODE_CHARGE && input->mode_request != CSB_SSM_MODE_BALANCE) {
                if (!input->contactors_closed && !input->charger_on) {
                    state->charge_state = CSB_CHARGE_OFF;
                }
            } else {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
     5a6:	2b02      	cmp	r3, #2
     5a8:	d000      	beq.n	5ac <Charge_Step+0x16c>
     5aa:	e760      	b.n	46e <Charge_Step+0x2e>
                    if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
     5ac:	6802      	ldr	r2, [r0, #0]
     5ae:	680b      	ldr	r3, [r1, #0]
     5b0:	6812      	ldr	r2, [r2, #0]
     5b2:	685b      	ldr	r3, [r3, #4]
     5b4:	429a      	cmp	r2, r3
     5b6:	d300      	bcc.n	5ba <Charge_Step+0x17a>
     5b8:	e759      	b.n	46e <Charge_Step+0x2e>
                        state->charge_state = CSB_CHARGE_INIT;
     5ba:	2301      	movs	r3, #1
     5bc:	718b      	strb	r3, [r1, #6]
     5be:	e756      	b.n	46e <Charge_Step+0x2e>
     5c0:	00001688 	.word	0x00001688
     5c4:	10000208 	.word	0x10000208
     5c8:	10000214 	.word	0x10000214
     5cc:	1000020c 	.word	0x1000020c
     5d0:	10000218 	.word	0x10000218
     5d4:	10000210 	.word	0x10000210

000005d8 <Init_Structs>:

// memory allocation for BMS_STATE_T
static PACK_CONFIG_T pack_config;
static CSB_STATE_T csb_state;

void Init_Structs(void) {
     5d8:	b570      	push	{r4, r5, r6, lr}
  csb_output.voltage_req_mV = 0;
     5da:	2400      	movs	r4, #0
  csb_output.current_req_mA = 0;
  csb_output.send_bms_config = false;
  csb_output.close_contactors = false;
  csb_output.charger_on = false;

  csb_state.pack_config = &pack_config;
     5dc:	4d1f      	ldr	r5, [pc, #124]	; (65c <Init_Structs+0x84>)
     5de:	4e20      	ldr	r6, [pc, #128]	; (660 <Init_Structs+0x88>)
// memory allocation for BMS_STATE_T
static PACK_CONFIG_T pack_config;
static CSB_STATE_T csb_state;

void Init_Structs(void) {
  csb_output.voltage_req_mV = 0;
     5e0:	4b20      	ldr	r3, [pc, #128]	; (664 <Init_Structs+0x8c>)
  csb_state.pack_config = &pack_config;
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.balance_waitingoff = balance_waitingoff;
     5e2:	4821      	ldr	r0, [pc, #132]	; (668 <Init_Structs+0x90>)
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     5e4:	22b4      	movs	r2, #180	; 0xb4
     5e6:	2100      	movs	r1, #0
// memory allocation for BMS_STATE_T
static PACK_CONFIG_T pack_config;
static CSB_STATE_T csb_state;

void Init_Structs(void) {
  csb_output.voltage_req_mV = 0;
     5e8:	601c      	str	r4, [r3, #0]
  csb_output.current_req_mA = 0;
     5ea:	605c      	str	r4, [r3, #4]
  csb_output.send_bms_config = false;
     5ec:	721c      	strb	r4, [r3, #8]
  csb_output.close_contactors = false;
     5ee:	725c      	strb	r4, [r3, #9]
  csb_output.charger_on = false;
     5f0:	729c      	strb	r4, [r3, #10]

  csb_state.pack_config = &pack_config;
     5f2:	6035      	str	r5, [r6, #0]
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
     5f4:	7134      	strb	r4, [r6, #4]
  csb_state.init_state = CSB_INIT_OFF;
     5f6:	7174      	strb	r4, [r6, #5]
  csb_state.charge_state = CSB_CHARGE_OFF;
     5f8:	71b4      	strb	r4, [r6, #6]
  csb_state.idle_state = CSB_IDLE_OFF;
     5fa:	71f4      	strb	r4, [r6, #7]
  csb_state.balance_waitingoff = balance_waitingoff;
     5fc:	6130      	str	r0, [r6, #16]
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     5fe:	f000 fffb 	bl	15f8 <memset>
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     602:	22b4      	movs	r2, #180	; 0xb4
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
     604:	4819      	ldr	r0, [pc, #100]	; (66c <Init_Structs+0x94>)
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     606:	0092      	lsls	r2, r2, #2
     608:	2100      	movs	r1, #0
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
     60a:	60f0      	str	r0, [r6, #12]
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     60c:	f000 fff4 	bl	15f8 <memset>

  pack_config.module_cell_count = 0;
     610:	232c      	movs	r3, #44	; 0x2c
  pack_config.cv_min_current_mA = 0;
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign bms_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
     612:	2201      	movs	r2, #1
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);

  pack_config.module_cell_count = 0;
     614:	54ec      	strb	r4, [r5, r3]
  pack_config.cv_min_current_mA = 0;
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign bms_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
     616:	4b16      	ldr	r3, [pc, #88]	; (670 <Init_Structs+0x98>)
  csb_input.elcon_output_current = 0;
  csb_input.elcon_has_hardware_failure = false;
  csb_input.elcon_over_temp_protection_on = false;
  csb_input.elcon_is_input_voltage_wrong = false;
  csb_input.elcon_battery_voltage_not_detected = false;
  csb_input.pack_status = &pack_status;
     618:	4916      	ldr	r1, [pc, #88]	; (674 <Init_Structs+0x9c>)
  pack_config.cv_min_current_mA = 0;
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign bms_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
     61a:	711a      	strb	r2, [r3, #4]
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
     61c:	4a16      	ldr	r2, [pc, #88]	; (678 <Init_Structs+0xa0>)
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);

  pack_config.module_cell_count = 0;
  pack_config.cell_min_mV = 0;
     61e:	602c      	str	r4, [r5, #0]
  pack_config.cc_cell_voltage_mV = 0;

  //assign bms_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
     620:	6812      	ldr	r2, [r2, #0]
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);

  pack_config.module_cell_count = 0;
  pack_config.cell_min_mV = 0;
  pack_config.cell_max_mV = 0;
     622:	606c      	str	r4, [r5, #4]
  pack_config.cc_cell_voltage_mV = 0;

  //assign bms_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
     624:	60da      	str	r2, [r3, #12]
  csb_input.elcon_output_voltage = 0;
     626:	2200      	movs	r2, #0
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);

  pack_config.module_cell_count = 0;
  pack_config.cell_min_mV = 0;
  pack_config.cell_max_mV = 0;
  pack_config.cell_capacity_cAh = 0;
     628:	60ac      	str	r4, [r5, #8]
  pack_config.num_modules = 0;
     62a:	60ec      	str	r4, [r5, #12]
  pack_config.cell_charge_c_rating_cC = 0;
     62c:	612c      	str	r4, [r5, #16]
  pack_config.bal_on_thresh_mV = 0;
     62e:	616c      	str	r4, [r5, #20]
  pack_config.bal_off_thresh_mV = 0;
     630:	61ac      	str	r4, [r5, #24]
  pack_config.pack_cells_p = 0;
     632:	61ec      	str	r4, [r5, #28]
  pack_config.cv_min_current_mA = 0;
     634:	622c      	str	r4, [r5, #32]
  pack_config.cv_min_current_ms = 0;
     636:	626c      	str	r4, [r5, #36]	; 0x24
  pack_config.cc_cell_voltage_mV = 0;
     638:	62ac      	str	r4, [r5, #40]	; 0x28

  //assign bms_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
     63a:	609c      	str	r4, [r3, #8]
  csb_input.msTicks = msTicks;
  csb_input.elcon_output_voltage = 0;
     63c:	821c      	strh	r4, [r3, #16]
  csb_input.elcon_output_current = 0;
     63e:	825c      	strh	r4, [r3, #18]
  csb_input.elcon_has_hardware_failure = false;
     640:	751a      	strb	r2, [r3, #20]
  csb_input.elcon_over_temp_protection_on = false;
     642:	755a      	strb	r2, [r3, #21]
  csb_input.elcon_is_input_voltage_wrong = false;
     644:	759a      	strb	r2, [r3, #22]
  csb_input.elcon_battery_voltage_not_detected = false;
     646:	75da      	strb	r2, [r3, #23]
  csb_input.pack_status = &pack_status;
     648:	6019      	str	r1, [r3, #0]
  csb_input.balance_req = false;
     64a:	769a      	strb	r2, [r3, #26]
  csb_input.contactors_closed = false;
     64c:	76da      	strb	r2, [r3, #27]
  csb_input.receive_bms_config = false;
     64e:	765a      	strb	r2, [r3, #25]
  csb_input.charger_on = false;
     650:	771a      	strb	r2, [r3, #28]

  pack_status.pack_cell_max_mV = 0;
     652:	600c      	str	r4, [r1, #0]
  pack_status.pack_current_mA = 0;
     654:	604c      	str	r4, [r1, #4]
  pack_status.pack_voltage_mV = 0;
     656:	608c      	str	r4, [r1, #8]
}
     658:	bd70      	pop	{r4, r5, r6, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	100002d0 	.word	0x100002d0
     660:	10000608 	.word	0x10000608
     664:	1000030c 	.word	0x1000030c
     668:	1000021c 	.word	0x1000021c
     66c:	10000338 	.word	0x10000338
     670:	10000318 	.word	0x10000318
     674:	10000300 	.word	0x10000300
     678:	1000065c 	.word	0x1000065c

0000067c <Process_Input>:
void Process_Output(CSB_INPUT_T* csb_input, CSB_OUTPUT_T* csb_output, CSB_STATE_T* csb_state) {
  Board_Contactors_Set(csb_output->close_contactors);
  Board_Can_ProcessOutput(csb_input, csb_state, csb_output);
}

void Process_Input(CSB_INPUT_T* csb_input, CSB_STATE_T* csb_state) {
     67c:	b510      	push	{r4, lr}
     67e:	0004      	movs	r4, r0
  Board_Can_ProcessInput(csb_input, csb_state);
     680:	f7ff fdbc 	bl	1fc <Board_Can_ProcessInput>
  Board_GetModeRequest();
     684:	f7ff fece 	bl	424 <Board_GetModeRequest>
  csb_input->msTicks = msTicks;
     688:	4b03      	ldr	r3, [pc, #12]	; (698 <Process_Input+0x1c>)
     68a:	681b      	ldr	r3, [r3, #0]
     68c:	60e3      	str	r3, [r4, #12]
  csb_input->contactors_closed = Board_Contactors_Closed();
     68e:	f7ff fec5 	bl	41c <Board_Contactors_Closed>
     692:	76e0      	strb	r0, [r4, #27]
}
     694:	bd10      	pop	{r4, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	1000065c 	.word	0x1000065c

0000069c <main>:

int main(void) {
     69c:	b570      	push	{r4, r5, r6, lr}
  Init_Structs();
     69e:	f7ff ff9b 	bl	5d8 <Init_Structs>
  Board_Can_Init(BMS_CAN_BAUD);
     6a2:	4812      	ldr	r0, [pc, #72]	; (6ec <main+0x50>)
     6a4:	f7ff fd64 	bl	170 <Board_Can_Init>
  Board_UART_Init(UART_BAUD);
     6a8:	20e1      	movs	r0, #225	; 0xe1
     6aa:	0200      	lsls	r0, r0, #8
     6ac:	f7ff fd64 	bl	178 <Board_UART_Init>
  Board_Chip_Init();
     6b0:	f7ff fd40 	bl	134 <Board_Chip_Init>
  Board_GPIO_Init();
     6b4:	f000 f822 	bl	6fc <Board_GPIO_Init>

  SSM_Init(&csb_input, &csb_state, &csb_output);
     6b8:	4e0d      	ldr	r6, [pc, #52]	; (6f0 <main+0x54>)
     6ba:	4d0e      	ldr	r5, [pc, #56]	; (6f4 <main+0x58>)
     6bc:	4c0e      	ldr	r4, [pc, #56]	; (6f8 <main+0x5c>)
     6be:	0032      	movs	r2, r6
     6c0:	0029      	movs	r1, r5
     6c2:	0020      	movs	r0, r4
     6c4:	f000 f942 	bl	94c <SSM_Init>

  while(1) {
    Process_Input(&csb_input, &csb_state);
     6c8:	0029      	movs	r1, r5
     6ca:	0020      	movs	r0, r4
     6cc:	f7ff ffd6 	bl	67c <Process_Input>
    SSM_Step(&csb_input, &csb_state, &csb_output);
     6d0:	0032      	movs	r2, r6
     6d2:	0029      	movs	r1, r5
     6d4:	0020      	movs	r0, r4
     6d6:	f000 f9ab 	bl	a30 <SSM_Step>
  pack_status.pack_current_mA = 0;
  pack_status.pack_voltage_mV = 0;
}

void Process_Output(CSB_INPUT_T* csb_input, CSB_OUTPUT_T* csb_output, CSB_STATE_T* csb_state) {
  Board_Contactors_Set(csb_output->close_contactors);
     6da:	7a70      	ldrb	r0, [r6, #9]
     6dc:	f7ff fea4 	bl	428 <Board_Contactors_Set>
  Board_Can_ProcessOutput(csb_input, csb_state, csb_output);
     6e0:	0032      	movs	r2, r6
     6e2:	0029      	movs	r1, r5
     6e4:	0020      	movs	r0, r4
     6e6:	f7ff fe4b 	bl	380 <Board_Can_ProcessOutput>
     6ea:	e7ed      	b.n	6c8 <main+0x2c>
     6ec:	0007a120 	.word	0x0007a120
     6f0:	1000030c 	.word	0x1000030c
     6f4:	10000608 	.word	0x10000608
     6f8:	10000318 	.word	0x10000318

000006fc <Board_GPIO_Init>:
#define PIN_43_PIO_FUNC IOCON_FUNC0
#define PIN_48 3, 3
#define PIN_48_IOCON IOCON_PIO3_3
#define PIN_48_PIO_FUNC IOCON_FUNC0

void Board_GPIO_Init(void) {
     6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6fe:	465f      	mov	r7, fp
     700:	4656      	mov	r6, sl
     702:	464d      	mov	r5, r9
     704:	4644      	mov	r4, r8
     706:	b4f0      	push	{r4, r5, r6, r7}
  Chip_GPIO_Init(LPC_GPIO);
     708:	25a0      	movs	r5, #160	; 0xa0
     70a:	05ed      	lsls	r5, r5, #23
     70c:	0028      	movs	r0, r5
     70e:	f000 fa41 	bl	b94 <Chip_GPIO_Init>
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     712:	2380      	movs	r3, #128	; 0x80
     714:	2104      	movs	r1, #4
     716:	2001      	movs	r0, #1
     718:	4c81      	ldr	r4, [pc, #516]	; (920 <Board_GPIO_Init+0x224>)
     71a:	021b      	lsls	r3, r3, #8
     71c:	58e2      	ldr	r2, [r4, r3]
     71e:	2610      	movs	r6, #16
     720:	430a      	orrs	r2, r1
     722:	50e2      	str	r2, [r4, r3]
     724:	4a7f      	ldr	r2, [pc, #508]	; (924 <Board_GPIO_Init+0x228>)
     726:	317c      	adds	r1, #124	; 0x7c
     728:	5050      	str	r0, [r2, r1]
     72a:	58e1      	ldr	r1, [r4, r3]
     72c:	3001      	adds	r0, #1
     72e:	4301      	orrs	r1, r0
     730:	50e1      	str	r1, [r4, r3]
     732:	2101      	movs	r1, #1
     734:	487c      	ldr	r0, [pc, #496]	; (928 <Board_GPIO_Init+0x22c>)
     736:	67d1      	str	r1, [r2, #124]	; 0x7c
     738:	58c1      	ldr	r1, [r0, r3]
     73a:	2720      	movs	r7, #32
     73c:	4331      	orrs	r1, r6
     73e:	50c1      	str	r1, [r0, r3]
     740:	2100      	movs	r1, #0
     742:	6411      	str	r1, [r2, #64]	; 0x40
     744:	58c6      	ldr	r6, [r0, r3]
     746:	433e      	orrs	r6, r7
     748:	50c6      	str	r6, [r0, r3]
     74a:	6451      	str	r1, [r2, #68]	; 0x44
     74c:	58c6      	ldr	r6, [r0, r3]
     74e:	3720      	adds	r7, #32
     750:	433e      	orrs	r6, r7
     752:	50c6      	str	r6, [r0, r3]
     754:	6011      	str	r1, [r2, #0]
     756:	58c6      	ldr	r6, [r0, r3]
     758:	46ba      	mov	sl, r7
     75a:	37c0      	adds	r7, #192	; 0xc0
     75c:	433e      	orrs	r6, r7
     75e:	50c6      	str	r6, [r0, r3]
     760:	6251      	str	r1, [r2, #36]	; 0x24
     762:	58c6      	ldr	r6, [r0, r3]
     764:	3701      	adds	r7, #1
     766:	37ff      	adds	r7, #255	; 0xff
     768:	46bc      	mov	ip, r7
     76a:	433e      	orrs	r6, r7
     76c:	2780      	movs	r7, #128	; 0x80
     76e:	50c6      	str	r6, [r0, r3]
     770:	6551      	str	r1, [r2, #84]	; 0x54
     772:	58c6      	ldr	r6, [r0, r3]
     774:	00ff      	lsls	r7, r7, #3
     776:	46b9      	mov	r9, r7
     778:	433e      	orrs	r6, r7
     77a:	2780      	movs	r7, #128	; 0x80
     77c:	50c6      	str	r6, [r0, r3]
     77e:	6591      	str	r1, [r2, #88]	; 0x58
     780:	58c6      	ldr	r6, [r0, r3]
     782:	013f      	lsls	r7, r7, #4
     784:	46b8      	mov	r8, r7
     786:	433e      	orrs	r6, r7
     788:	2704      	movs	r7, #4
     78a:	50c6      	str	r6, [r0, r3]
     78c:	6711      	str	r1, [r2, #112]	; 0x70
     78e:	58ee      	ldr	r6, [r5, r3]
     790:	433e      	orrs	r6, r7
     792:	50ee      	str	r6, [r5, r3]
     794:	61d1      	str	r1, [r2, #28]
     796:	58ee      	ldr	r6, [r5, r3]
     798:	0037      	movs	r7, r6
     79a:	2608      	movs	r6, #8
     79c:	4337      	orrs	r7, r6
     79e:	50ef      	str	r7, [r5, r3]
     7a0:	62d1      	str	r1, [r2, #44]	; 0x2c
     7a2:	58ef      	ldr	r7, [r5, r3]
     7a4:	3608      	adds	r6, #8
     7a6:	4337      	orrs	r7, r6
     7a8:	50ef      	str	r7, [r5, r3]
     7aa:	6311      	str	r1, [r2, #48]	; 0x30
     7ac:	58ee      	ldr	r6, [r5, r3]
     7ae:	0037      	movs	r7, r6
     7b0:	2620      	movs	r6, #32
     7b2:	4337      	orrs	r7, r6
     7b4:	50ef      	str	r7, [r5, r3]
     7b6:	4657      	mov	r7, sl
     7b8:	6351      	str	r1, [r2, #52]	; 0x34
     7ba:	58ee      	ldr	r6, [r5, r3]
     7bc:	4337      	orrs	r7, r6
     7be:	50ef      	str	r7, [r5, r3]
     7c0:	64d1      	str	r1, [r2, #76]	; 0x4c
     7c2:	58ee      	ldr	r6, [r5, r3]
     7c4:	0037      	movs	r7, r6
     7c6:	2680      	movs	r6, #128	; 0x80
     7c8:	4337      	orrs	r7, r6
     7ca:	50ef      	str	r7, [r5, r3]
     7cc:	6511      	str	r1, [r2, #80]	; 0x50
     7ce:	58ee      	ldr	r6, [r5, r3]
     7d0:	0037      	movs	r7, r6
     7d2:	2680      	movs	r6, #128	; 0x80
     7d4:	0076      	lsls	r6, r6, #1
     7d6:	4337      	orrs	r7, r6
     7d8:	50ef      	str	r7, [r5, r3]
     7da:	6611      	str	r1, [r2, #96]	; 0x60
     7dc:	58ee      	ldr	r6, [r5, r3]
     7de:	0037      	movs	r7, r6
     7e0:	4666      	mov	r6, ip
     7e2:	4337      	orrs	r7, r6
     7e4:	50ef      	str	r7, [r5, r3]
     7e6:	6651      	str	r1, [r2, #100]	; 0x64
     7e8:	58ee      	ldr	r6, [r5, r3]
     7ea:	0037      	movs	r7, r6
     7ec:	464e      	mov	r6, r9
     7ee:	4337      	orrs	r7, r6
     7f0:	2601      	movs	r6, #1
     7f2:	50ef      	str	r7, [r5, r3]
     7f4:	6696      	str	r6, [r2, #104]	; 0x68
     7f6:	58ee      	ldr	r6, [r5, r3]
     7f8:	0037      	movs	r7, r6
     7fa:	4646      	mov	r6, r8
     7fc:	4337      	orrs	r7, r6
     7fe:	50ef      	str	r7, [r5, r3]
     800:	2501      	movs	r5, #1
     802:	2601      	movs	r6, #1
     804:	6755      	str	r5, [r2, #116]	; 0x74
     806:	58e5      	ldr	r5, [r4, r3]
     808:	2701      	movs	r7, #1
     80a:	4335      	orrs	r5, r6
     80c:	50e5      	str	r5, [r4, r3]
     80e:	2509      	movs	r5, #9
     810:	46aa      	mov	sl, r5
     812:	6795      	str	r5, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     814:	6061      	str	r1, [r4, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     816:	58e5      	ldr	r5, [r4, r3]
     818:	3607      	adds	r6, #7
     81a:	4335      	orrs	r5, r6
     81c:	50e5      	str	r5, [r4, r3]
     81e:	4656      	mov	r6, sl
     820:	2590      	movs	r5, #144	; 0x90
     822:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     824:	6221      	str	r1, [r4, #32]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     826:	58e5      	ldr	r5, [r4, r3]
     828:	3607      	adds	r6, #7
     82a:	4335      	orrs	r5, r6
     82c:	50e5      	str	r5, [r4, r3]
     82e:	2594      	movs	r5, #148	; 0x94
     830:	3e08      	subs	r6, #8
     832:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     834:	6421      	str	r1, [r4, #64]	; 0x40
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     836:	58e5      	ldr	r5, [r4, r3]
     838:	3618      	adds	r6, #24
     83a:	4335      	orrs	r5, r6
     83c:	50e5      	str	r5, [r4, r3]
     83e:	25a0      	movs	r5, #160	; 0xa0
     840:	3e18      	subs	r6, #24
     842:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     844:	3d20      	subs	r5, #32
     846:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     848:	58e5      	ldr	r5, [r4, r3]
     84a:	36f8      	adds	r6, #248	; 0xf8
     84c:	4335      	orrs	r5, r6
     84e:	50e5      	str	r5, [r4, r3]
     850:	2508      	movs	r5, #8
     852:	6155      	str	r5, [r2, #20]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     854:	464d      	mov	r5, r9
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     856:	4666      	mov	r6, ip
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     858:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     85a:	58e5      	ldr	r5, [r4, r3]
     85c:	4335      	orrs	r5, r6
     85e:	50e5      	str	r5, [r4, r3]
     860:	2508      	movs	r5, #8
     862:	6395      	str	r5, [r2, #56]	; 0x38
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     864:	4645      	mov	r5, r8
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     866:	464e      	mov	r6, r9
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     868:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     86a:	58e5      	ldr	r5, [r4, r3]
     86c:	4335      	orrs	r5, r6
     86e:	50e5      	str	r5, [r4, r3]
     870:	2508      	movs	r5, #8
     872:	66d5      	str	r5, [r2, #108]	; 0x6c
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     874:	2580      	movs	r5, #128	; 0x80
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     876:	4646      	mov	r6, r8
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     878:	016d      	lsls	r5, r5, #5
     87a:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     87c:	58e5      	ldr	r5, [r4, r3]
     87e:	4335      	orrs	r5, r6
     880:	50e5      	str	r5, [r4, r3]
     882:	2608      	movs	r6, #8
     884:	2598      	movs	r5, #152	; 0x98
     886:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     888:	2580      	movs	r5, #128	; 0x80
     88a:	01ad      	lsls	r5, r5, #6
     88c:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     88e:	2501      	movs	r5, #1
     890:	58c4      	ldr	r4, [r0, r3]
     892:	432c      	orrs	r4, r5
     894:	50c4      	str	r4, [r0, r3]
     896:	2408      	movs	r4, #8
     898:	6094      	str	r4, [r2, #8]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     89a:	6041      	str	r1, [r0, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     89c:	58c4      	ldr	r4, [r0, r3]
     89e:	3501      	adds	r5, #1
     8a0:	432c      	orrs	r4, r5
     8a2:	50c4      	str	r4, [r0, r3]
     8a4:	2408      	movs	r4, #8
     8a6:	6294      	str	r4, [r2, #40]	; 0x28
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     8a8:	6081      	str	r1, [r0, #8]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     8aa:	58c4      	ldr	r4, [r0, r3]
     8ac:	3502      	adds	r5, #2
     8ae:	432c      	orrs	r4, r5
     8b0:	50c4      	str	r4, [r0, r3]
     8b2:	2408      	movs	r4, #8
     8b4:	65d4      	str	r4, [r2, #92]	; 0x5c
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     8b6:	6101      	str	r1, [r0, #16]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     8b8:	58c4      	ldr	r4, [r0, r3]
     8ba:	3504      	adds	r5, #4
     8bc:	432c      	orrs	r4, r5
     8be:	50c4      	str	r4, [r0, r3]
     8c0:	248c      	movs	r4, #140	; 0x8c
     8c2:	5115      	str	r5, [r2, r4]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     8c4:	6201      	str	r1, [r0, #32]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     8c6:	58c4      	ldr	r4, [r0, r3]
     8c8:	3578      	adds	r5, #120	; 0x78
     8ca:	432c      	orrs	r4, r5
     8cc:	50c4      	str	r4, [r0, r3]
     8ce:	2408      	movs	r4, #8
     8d0:	6214      	str	r4, [r2, #32]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     8d2:	4664      	mov	r4, ip
     8d4:	5101      	str	r1, [r0, r4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     8d6:	4815      	ldr	r0, [pc, #84]	; (92c <Board_GPIO_Init+0x230>)
     8d8:	3d78      	subs	r5, #120	; 0x78
     8da:	58c4      	ldr	r4, [r0, r3]
     8dc:	4327      	orrs	r7, r4
     8de:	2484      	movs	r4, #132	; 0x84
     8e0:	50c7      	str	r7, [r0, r3]
     8e2:	5115      	str	r5, [r2, r4]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     8e4:	6041      	str	r1, [r0, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     8e6:	58c4      	ldr	r4, [r0, r3]
     8e8:	3d06      	subs	r5, #6
     8ea:	432c      	orrs	r4, r5
     8ec:	50c4      	str	r4, [r0, r3]
     8ee:	2408      	movs	r4, #8
     8f0:	6794      	str	r4, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     8f2:	6081      	str	r1, [r0, #8]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     8f4:	58c4      	ldr	r4, [r0, r3]
     8f6:	3502      	adds	r5, #2
     8f8:	432c      	orrs	r4, r5
     8fa:	50c4      	str	r4, [r0, r3]
     8fc:	2408      	movs	r4, #8
     8fe:	6794      	str	r4, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     900:	6101      	str	r1, [r0, #16]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
     902:	58c4      	ldr	r4, [r0, r3]
     904:	3504      	adds	r5, #4
     906:	432c      	orrs	r4, r5
     908:	50c4      	str	r4, [r0, r3]
     90a:	23ac      	movs	r3, #172	; 0xac
     90c:	2408      	movs	r4, #8
     90e:	50d4      	str	r4, [r2, r3]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     910:	6201      	str	r1, [r0, #32]

  Chip_GPIO_SetPinDIROutput(LPC_GPIO, PIN_48);
  Chip_IOCON_PinMuxSet(LPC_IOCON, PIN_48_IOCON,
      (PIN_48_PIO_FUNC | IOCON_MODE_PULLDOWN) );
  Chip_GPIO_SetPinState(LPC_GPIO, PIN_48, false);
}
     912:	bc3c      	pop	{r2, r3, r4, r5}
     914:	4690      	mov	r8, r2
     916:	4699      	mov	r9, r3
     918:	46a2      	mov	sl, r4
     91a:	46ab      	mov	fp, r5
     91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	50010000 	.word	0x50010000
     924:	40044000 	.word	0x40044000
     928:	50020000 	.word	0x50020000
     92c:	50030000 	.word	0x50030000

00000930 <Low_Side_Contactor_Pin_Get>:
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (pGPIO[port].DATA[1 << pin]) != 0;
     930:	4b02      	ldr	r3, [pc, #8]	; (93c <Low_Side_Contactor_Pin_Get+0xc>)
     932:	6918      	ldr	r0, [r3, #16]

bool Low_Side_Contactor_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, CTR_LOW_SWTCH);
     934:	1e43      	subs	r3, r0, #1
     936:	4198      	sbcs	r0, r3
     938:	b2c0      	uxtb	r0, r0
}
     93a:	4770      	bx	lr
     93c:	50010000 	.word	0x50010000

00000940 <High_Side_Contactor_Pin_Set>:
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     940:	4b01      	ldr	r3, [pc, #4]	; (948 <High_Side_Contactor_Pin_Set+0x8>)
     942:	0040      	lsls	r0, r0, #1
     944:	6098      	str	r0, [r3, #8]
  return Chip_GPIO_GetPinState(LPC_GPIO, CTR_HIGH_SWTCH);
}

void High_Side_Contactor_Pin_Set(bool state) {
  Chip_GPIO_SetPinState(LPC_GPIO, CTR_HIGH_SWTCH, state);
}
     946:	4770      	bx	lr
     948:	50010000 	.word	0x50010000

0000094c <SSM_Init>:

static uint32_t last_init_wait_start_time;

void SSM_Init(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
  // Initialize BMS state variables
  state->curr_mode = CSB_SSM_MODE_INIT;
     94c:	2300      	movs	r3, #0

volatile uint32_t msTicks;

static uint32_t last_init_wait_start_time;

void SSM_Init(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     94e:	b510      	push	{r4, lr}
  // Initialize BMS state variables
  state->curr_mode = CSB_SSM_MODE_INIT;
     950:	710b      	strb	r3, [r1, #4]
  state->init_state = CSB_INIT_OFF;
     952:	714b      	strb	r3, [r1, #5]

  Charge_Init(state);
     954:	0008      	movs	r0, r1
     956:	f7ff fd6b 	bl	430 <Charge_Init>
}
     95a:	bd10      	pop	{r4, pc}

0000095c <Init_Step>:

void Init_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
  switch(state->init_state) {
     95c:	794b      	ldrb	r3, [r1, #5]
  state->init_state = CSB_INIT_OFF;

  Charge_Init(state);
}

void Init_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     95e:	b530      	push	{r4, r5, lr}
  switch(state->init_state) {
     960:	2b05      	cmp	r3, #5
     962:	d80a      	bhi.n	97a <Init_Step+0x1e>
     964:	4c1e      	ldr	r4, [pc, #120]	; (9e0 <Init_Step+0x84>)
     966:	009b      	lsls	r3, r3, #2
     968:	58e3      	ldr	r3, [r4, r3]
     96a:	469f      	mov	pc, r3
      case CSB_INIT_OFF:
          output->send_bms_config = false;
     96c:	2300      	movs	r3, #0
              output->send_bms_config = false;
              state->init_state = CSB_INIT_DONE;
              state->curr_baud_rate = CSB_CAN_BAUD;
              input->receive_bms_config = false;
          } else if ( (msTicks - last_init_wait_start_time) > INIT_WAIT_TIME_MAX) {
              output->send_bms_config = false;
     96e:	7213      	strb	r3, [r2, #8]
              state->init_state = CSB_INIT_SWITCH_500;
     970:	2201      	movs	r2, #1
     972:	714a      	strb	r2, [r1, #5]
              state->curr_baud_rate = BMS_CAN_BAUD;
     974:	4a1b      	ldr	r2, [pc, #108]	; (9e4 <Init_Step+0x88>)
     976:	608a      	str	r2, [r1, #8]
              input->receive_bms_config = false;
     978:	7643      	strb	r3, [r0, #25]
          state->curr_mode = CSB_SSM_MODE_IDLE;
          state->init_state = CSB_INIT_OFF;
          state->curr_baud_rate = CSB_CAN_BAUD;
          break;
  }
}
     97a:	bd30      	pop	{r4, r5, pc}
          state->init_state = CSB_INIT_WAIT_250;
          state->curr_baud_rate = CSB_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_WAIT_250:
          if(input->receive_bms_config) {
     97c:	7e43      	ldrb	r3, [r0, #25]
     97e:	2b00      	cmp	r3, #0
     980:	d125      	bne.n	9ce <Init_Step+0x72>
              output->send_bms_config = false;
              state->init_state = CSB_INIT_DONE;
              state->curr_baud_rate = CSB_CAN_BAUD;
              input->receive_bms_config = false;
          } else if ( (msTicks - last_init_wait_start_time) > INIT_WAIT_TIME_MAX) {
     982:	4c19      	ldr	r4, [pc, #100]	; (9e8 <Init_Step+0x8c>)
     984:	6825      	ldr	r5, [r4, #0]
     986:	4c19      	ldr	r4, [pc, #100]	; (9ec <Init_Step+0x90>)
     988:	42a5      	cmp	r5, r4
     98a:	d9f6      	bls.n	97a <Init_Step+0x1e>
     98c:	e7ef      	b.n	96e <Init_Step+0x12>
              state->curr_baud_rate = BMS_CAN_BAUD;
              input->receive_bms_config = false;
          }
          break;
      case(CSB_INIT_DONE):
          state->curr_mode = CSB_SSM_MODE_IDLE;
     98e:	2301      	movs	r3, #1
     990:	710b      	strb	r3, [r1, #4]
          state->init_state = CSB_INIT_OFF;
     992:	2300      	movs	r3, #0
     994:	714b      	strb	r3, [r1, #5]
          state->curr_baud_rate = CSB_CAN_BAUD;
     996:	4b16      	ldr	r3, [pc, #88]	; (9f0 <Init_Step+0x94>)
     998:	608b      	str	r3, [r1, #8]
          break;
  }
}
     99a:	e7ee      	b.n	97a <Init_Step+0x1e>
          state->init_state = CSB_INIT_SEND_500;
          state->curr_baud_rate = BMS_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_SEND_500:
          output->send_bms_config = false;
     99c:	2300      	movs	r3, #0
     99e:	7213      	strb	r3, [r2, #8]
          state->init_state = CSB_INIT_SWITCH_250;
     9a0:	2203      	movs	r2, #3
     9a2:	714a      	strb	r2, [r1, #5]
          state->curr_baud_rate = CSB_CAN_BAUD;
     9a4:	4a12      	ldr	r2, [pc, #72]	; (9f0 <Init_Step+0x94>)
     9a6:	608a      	str	r2, [r1, #8]
          input->receive_bms_config = false;
     9a8:	7643      	strb	r3, [r0, #25]
          break;
     9aa:	e7e6      	b.n	97a <Init_Step+0x1e>
      case CSB_INIT_SWITCH_250:
          output->send_bms_config = false;
     9ac:	2300      	movs	r3, #0
     9ae:	7213      	strb	r3, [r2, #8]
          state->init_state = CSB_INIT_WAIT_250;
     9b0:	2204      	movs	r2, #4
     9b2:	714a      	strb	r2, [r1, #5]
          state->curr_baud_rate = CSB_CAN_BAUD;
     9b4:	4a0e      	ldr	r2, [pc, #56]	; (9f0 <Init_Step+0x94>)
     9b6:	608a      	str	r2, [r1, #8]
          input->receive_bms_config = false;
     9b8:	7643      	strb	r3, [r0, #25]
          break;
     9ba:	e7de      	b.n	97a <Init_Step+0x1e>
          state->init_state = CSB_INIT_SWITCH_500;
          state->curr_baud_rate = BMS_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_SWITCH_500:
          output->send_bms_config = true;
     9bc:	2301      	movs	r3, #1
     9be:	7213      	strb	r3, [r2, #8]
          state->init_state = CSB_INIT_SEND_500;
     9c0:	3301      	adds	r3, #1
     9c2:	714b      	strb	r3, [r1, #5]
          state->curr_baud_rate = BMS_CAN_BAUD;
     9c4:	4b07      	ldr	r3, [pc, #28]	; (9e4 <Init_Step+0x88>)
     9c6:	608b      	str	r3, [r1, #8]
          input->receive_bms_config = false;
     9c8:	2300      	movs	r3, #0
     9ca:	7643      	strb	r3, [r0, #25]
          break;
     9cc:	e7d5      	b.n	97a <Init_Step+0x1e>
          state->curr_baud_rate = CSB_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_WAIT_250:
          if(input->receive_bms_config) {
              output->send_bms_config = false;
     9ce:	2300      	movs	r3, #0
     9d0:	7213      	strb	r3, [r2, #8]
              state->init_state = CSB_INIT_DONE;
     9d2:	2205      	movs	r2, #5
     9d4:	714a      	strb	r2, [r1, #5]
              state->curr_baud_rate = CSB_CAN_BAUD;
     9d6:	4a06      	ldr	r2, [pc, #24]	; (9f0 <Init_Step+0x94>)
     9d8:	608a      	str	r2, [r1, #8]
              input->receive_bms_config = false;
     9da:	7643      	strb	r3, [r0, #25]
     9dc:	e7cd      	b.n	97a <Init_Step+0x1e>
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	000016a4 	.word	0x000016a4
     9e4:	0007a120 	.word	0x0007a120
     9e8:	1000065c 	.word	0x1000065c
     9ec:	00001388 	.word	0x00001388
     9f0:	0003d090 	.word	0x0003d090

000009f4 <Is_Valid_Jump>:
}

bool Is_Valid_Jump(CSB_SSM_MODE_T mode1, CSB_SSM_MODE_T mode2) {

    // idle switch
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
     9f4:	2801      	cmp	r0, #1
     9f6:	d010      	beq.n	a1a <Is_Valid_Jump+0x26>
        return true;
    } else if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
     9f8:	2802      	cmp	r0, #2
     9fa:	d008      	beq.n	a0e <Is_Valid_Jump+0x1a>
        return true;
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_IDLE) {
     9fc:	2803      	cmp	r0, #3
     9fe:	d113      	bne.n	a28 <Is_Valid_Jump+0x34>
     a00:	2901      	cmp	r1, #1
     a02:	d013      	beq.n	a2c <Is_Valid_Jump+0x38>
        return true;

    // charge and balance switch
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_CHARGE) {
     a04:	3902      	subs	r1, #2
     a06:	4248      	negs	r0, r1
     a08:	4148      	adcs	r0, r1
     a0a:	b2c0      	uxtb	r0, r0
     a0c:	e004      	b.n	a18 <Is_Valid_Jump+0x24>
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
     a0e:	4381      	bics	r1, r0
     a10:	3901      	subs	r1, #1
     a12:	4248      	negs	r0, r1
     a14:	4148      	adcs	r0, r1
     a16:	b2c0      	uxtb	r0, r0
        return true;
    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;
    }
    return false;
}
     a18:	4770      	bx	lr
}

bool Is_Valid_Jump(CSB_SSM_MODE_T mode1, CSB_SSM_MODE_T mode2) {

    // idle switch
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
     a1a:	2300      	movs	r3, #0
     a1c:	3902      	subs	r1, #2
     a1e:	b2c9      	uxtb	r1, r1
     a20:	4288      	cmp	r0, r1
     a22:	415b      	adcs	r3, r3
     a24:	b2d8      	uxtb	r0, r3
     a26:	e7f7      	b.n	a18 <Is_Valid_Jump+0x24>
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_CHARGE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;
    }
    return false;
     a28:	2000      	movs	r0, #0
     a2a:	e7f5      	b.n	a18 <Is_Valid_Jump+0x24>
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_IDLE) {
        return true;
     a2c:	2001      	movs	r0, #1
     a2e:	e7f3      	b.n	a18 <Is_Valid_Jump+0x24>

00000a30 <SSM_Step>:
    (void)(output);

}


void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     a30:	b5f0      	push	{r4, r5, r6, r7, lr}
     a32:	4647      	mov	r7, r8
     a34:	b480      	push	{r7}
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step
    Check_Error(input, state, output);

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
     a36:	790c      	ldrb	r4, [r1, #4]
     a38:	7907      	ldrb	r7, [r0, #4]
    (void)(output);

}


void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     a3a:	0006      	movs	r6, r0
     a3c:	000d      	movs	r5, r1
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step
    Check_Error(input, state, output);

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
     a3e:	0020      	movs	r0, r4
     a40:	0039      	movs	r1, r7
    (void)(output);

}


void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     a42:	4690      	mov	r8, r2
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step
    Check_Error(input, state, output);

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
     a44:	f7ff ffd6 	bl	9f4 <Is_Valid_Jump>
     a48:	2800      	cmp	r0, #0
     a4a:	d005      	beq.n	a58 <SSM_Step+0x28>
    }
    return false;
}

bool Is_State_Done(CSB_STATE_T *state) {
    switch(state->curr_mode) {
     a4c:	2c01      	cmp	r4, #1
     a4e:	d01a      	beq.n	a86 <SSM_Step+0x56>
     a50:	2c00      	cmp	r4, #0
     a52:	d01b      	beq.n	a8c <SSM_Step+0x5c>
     a54:	2c03      	cmp	r4, #3
     a56:	d913      	bls.n	a80 <SSM_Step+0x50>

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
        state->curr_mode = input->mode_request;
    }

    switch(state->curr_mode) {
     a58:	2c02      	cmp	r4, #2
     a5a:	d009      	beq.n	a70 <SSM_Step+0x40>
     a5c:	2c03      	cmp	r4, #3
     a5e:	d007      	beq.n	a70 <SSM_Step+0x40>
     a60:	2c00      	cmp	r4, #0
     a62:	d10a      	bne.n	a7a <SSM_Step+0x4a>
        case CSB_SSM_MODE_IDLE:
            break;
        case CSB_SSM_MODE_INIT:
            Init_Step(input, state, output);
     a64:	4642      	mov	r2, r8
     a66:	0029      	movs	r1, r5
     a68:	0030      	movs	r0, r6
     a6a:	f7ff ff77 	bl	95c <Init_Step>
            break;
     a6e:	e004      	b.n	a7a <SSM_Step+0x4a>
        case CSB_SSM_MODE_CHARGE:
            Charge_Step(input, state, output);
            break;
        case CSB_SSM_MODE_BALANCE:
            Charge_Step(input, state, output);
     a70:	4642      	mov	r2, r8
     a72:	0029      	movs	r1, r5
     a74:	0030      	movs	r0, r6
     a76:	f7ff fce3 	bl	440 <Charge_Step>
            break;
    }
}
     a7a:	bc04      	pop	{r2}
     a7c:	4690      	mov	r8, r2
     a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step
    Check_Error(input, state, output);

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
     a80:	79ab      	ldrb	r3, [r5, #6]
     a82:	2b00      	cmp	r3, #0
     a84:	d1e8      	bne.n	a58 <SSM_Step+0x28>
        state->curr_mode = input->mode_request;
     a86:	712f      	strb	r7, [r5, #4]
     a88:	003c      	movs	r4, r7
     a8a:	e7e5      	b.n	a58 <SSM_Step+0x28>
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step
    Check_Error(input, state, output);

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
     a8c:	796b      	ldrb	r3, [r5, #5]
     a8e:	2b05      	cmp	r3, #5
     a90:	d1e8      	bne.n	a64 <SSM_Step+0x34>
     a92:	e7f8      	b.n	a86 <SSM_Step+0x56>

00000a94 <SystemInit>:
 * @brief  Setup the microcontroller system.
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
     a94:	4a18      	ldr	r2, [pc, #96]	; (af8 <SystemInit+0x64>)
     a96:	4b19      	ldr	r3, [pc, #100]	; (afc <SystemInit+0x68>)
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
     a98:	2001      	movs	r0, #1
 * @brief  Setup the microcontroller system.
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
     a9a:	601a      	str	r2, [r3, #0]
  TicksPerMS = __SYSTEM_CLOCK/1000;
     a9c:	4a18      	ldr	r2, [pc, #96]	; (b00 <SystemInit+0x6c>)
     a9e:	4b19      	ldr	r3, [pc, #100]	; (b04 <SystemInit+0x70>)

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
     aa0:	4919      	ldr	r1, [pc, #100]	; (b08 <SystemInit+0x74>)
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
  TicksPerMS = __SYSTEM_CLOCK/1000;
     aa2:	601a      	str	r2, [r3, #0]

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
     aa4:	2200      	movs	r2, #0
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
     aa6:	2301      	movs	r3, #1

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
     aa8:	640a      	str	r2, [r1, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
     aaa:	644b      	str	r3, [r1, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
     aac:	644a      	str	r2, [r1, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
     aae:	644b      	str	r3, [r1, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
     ab0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
     ab2:	4b15      	ldr	r3, [pc, #84]	; (b08 <SystemInit+0x74>)
     ab4:	4210      	tst	r0, r2
     ab6:	d0fb      	beq.n	ab0 <SystemInit+0x1c>
#if (SYSPLL_SETUP)                              /* System PLL Setup      */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
     ab8:	2223      	movs	r2, #35	; 0x23
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 7);        /* Power-up SYSPLL          */
     aba:	218e      	movs	r1, #142	; 0x8e
     abc:	2080      	movs	r0, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
#if (SYSPLL_SETUP)                              /* System PLL Setup      */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
     abe:	609a      	str	r2, [r3, #8]
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 7);        /* Power-up SYSPLL          */
     ac0:	0089      	lsls	r1, r1, #2
     ac2:	585a      	ldr	r2, [r3, r1]
     ac4:	4382      	bics	r2, r0
     ac6:	505a      	str	r2, [r3, r1]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));      /* Wait Until PLL Locked    */
     ac8:	001a      	movs	r2, r3
     aca:	387f      	subs	r0, #127	; 0x7f
     acc:	68d1      	ldr	r1, [r2, #12]
     ace:	4b0e      	ldr	r3, [pc, #56]	; (b08 <SystemInit+0x74>)
     ad0:	4208      	tst	r0, r1
     ad2:	d0fb      	beq.n	acc <SystemInit+0x38>
#endif
#if (WDTOSC_SETUP)                              /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 6);        /* Power-up WDT Clock    */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;    /* Select PLL Clock Output  */
     ad4:	2203      	movs	r2, #3
     ad6:	671a      	str	r2, [r3, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
     ad8:	2200      	movs	r2, #0
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
     ada:	2001      	movs	r0, #1
#if (WDTOSC_SETUP)                              /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 6);        /* Power-up WDT Clock    */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;    /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
     adc:	675a      	str	r2, [r3, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
     ade:	3201      	adds	r2, #1
     ae0:	675a      	str	r2, [r3, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
     ae2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
     ae4:	4908      	ldr	r1, [pc, #32]	; (b08 <SystemInit+0x74>)
     ae6:	4210      	tst	r0, r2
     ae8:	d0fb      	beq.n	ae2 <SystemInit+0x4e>
#endif

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
     aea:	2301      	movs	r3, #1
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
     aec:	4a07      	ldr	r2, [pc, #28]	; (b0c <SystemInit+0x78>)
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
#endif

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
     aee:	678b      	str	r3, [r1, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
     af0:	337f      	adds	r3, #127	; 0x7f
     af2:	50ca      	str	r2, [r1, r3]
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)                 /* Memory Mapping Setup              */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
     af4:	4770      	bx	lr
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	02dc6c00 	.word	0x02dc6c00
     afc:	10000660 	.word	0x10000660
     b00:	0000bb80 	.word	0x0000bb80
     b04:	10000664 	.word	0x10000664
     b08:	40048000 	.word	0x40048000
     b0c:	0001005f 	.word	0x0001005f

00000b10 <Chip_Clock_GetMainClockRate>:
/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
     b10:	2103      	movs	r1, #3

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
     b12:	b500      	push	{lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
     b14:	4a1b      	ldr	r2, [pc, #108]	; (b84 <Chip_Clock_GetMainClockRate+0x74>)

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
     b16:	b083      	sub	sp, #12
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
     b18:	6f13      	ldr	r3, [r2, #112]	; 0x70
     b1a:	400b      	ands	r3, r1
     b1c:	2b02      	cmp	r3, #2
     b1e:	d01c      	beq.n	b5a <Chip_Clock_GetMainClockRate+0x4a>
     b20:	2b03      	cmp	r3, #3
     b22:	d00c      	beq.n	b3e <Chip_Clock_GetMainClockRate+0x2e>
     b24:	2b01      	cmp	r3, #1
     b26:	d002      	beq.n	b2e <Chip_Clock_GetMainClockRate+0x1e>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
     b28:	4817      	ldr	r0, [pc, #92]	; (b88 <Chip_Clock_GetMainClockRate+0x78>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
     b2a:	b003      	add	sp, #12
     b2c:	bd00      	pop	{pc}
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
     b2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
     b30:	4019      	ands	r1, r3
     b32:	d0f9      	beq.n	b28 <Chip_Clock_GetMainClockRate+0x18>
     b34:	2901      	cmp	r1, #1
     b36:	d123      	bne.n	b80 <Chip_Clock_GetMainClockRate+0x70>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
     b38:	4b14      	ldr	r3, [pc, #80]	; (b8c <Chip_Clock_GetMainClockRate+0x7c>)
     b3a:	6818      	ldr	r0, [r3, #0]
     b3c:	e7f5      	b.n	b2a <Chip_Clock_GetMainClockRate+0x1a>
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
     b3e:	6891      	ldr	r1, [r2, #8]
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
     b40:	6c12      	ldr	r2, [r2, #64]	; 0x40
     b42:	4013      	ands	r3, r2
     b44:	d016      	beq.n	b74 <Chip_Clock_GetMainClockRate+0x64>
     b46:	2b01      	cmp	r3, #1
     b48:	d11a      	bne.n	b80 <Chip_Clock_GetMainClockRate+0x70>
     b4a:	201f      	movs	r0, #31
     b4c:	4b0f      	ldr	r3, [pc, #60]	; (b8c <Chip_Clock_GetMainClockRate+0x7c>)
     b4e:	4008      	ands	r0, r1
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	3001      	adds	r0, #1
     b54:	9301      	str	r3, [sp, #4]
     b56:	4358      	muls	r0, r3
     b58:	e7e7      	b.n	b2a <Chip_Clock_GetMainClockRate+0x1a>
	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
     b5a:	211f      	movs	r1, #31
#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
     b5c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
     b5e:	05da      	lsls	r2, r3, #23
     b60:	4019      	ands	r1, r3
     b62:	0f12      	lsrs	r2, r2, #28
     b64:	4b0a      	ldr	r3, [pc, #40]	; (b90 <Chip_Clock_GetMainClockRate+0x80>)
     b66:	0092      	lsls	r2, r2, #2
     b68:	3101      	adds	r1, #1
     b6a:	0049      	lsls	r1, r1, #1
     b6c:	58d0      	ldr	r0, [r2, r3]
     b6e:	f000 fc79 	bl	1464 <__aeabi_uidiv>
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
		break;
     b72:	e7da      	b.n	b2a <Chip_Clock_GetMainClockRate+0x1a>
     b74:	201f      	movs	r0, #31
     b76:	4b04      	ldr	r3, [pc, #16]	; (b88 <Chip_Clock_GetMainClockRate+0x78>)
     b78:	4008      	ands	r0, r1
     b7a:	3001      	adds	r0, #1
     b7c:	4358      	muls	r0, r3
     b7e:	e7d4      	b.n	b2a <Chip_Clock_GetMainClockRate+0x1a>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
     b80:	2000      	movs	r0, #0
     b82:	e7d2      	b.n	b2a <Chip_Clock_GetMainClockRate+0x1a>
     b84:	40048000 	.word	0x40048000
     b88:	00b71b00 	.word	0x00b71b00
     b8c:	00001684 	.word	0x00001684
     b90:	000016bc 	.word	0x000016bc

00000b94 <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
     b94:	2280      	movs	r2, #128	; 0x80
     b96:	2340      	movs	r3, #64	; 0x40
     b98:	4902      	ldr	r1, [pc, #8]	; (ba4 <Chip_GPIO_Init+0x10>)
     b9a:	5888      	ldr	r0, [r1, r2]
     b9c:	4303      	orrs	r3, r0
     b9e:	508b      	str	r3, [r1, r2]
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
     ba0:	4770      	bx	lr
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	40048000 	.word	0x40048000

00000ba8 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
     ba8:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
     baa:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
     bac:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
     bae:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
     bb0:	6103      	str	r3, [r0, #16]
     bb2:	60c3      	str	r3, [r0, #12]

	return 1;
}
     bb4:	2001      	movs	r0, #1
     bb6:	4770      	bx	lr

00000bb8 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
     bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bba:	68c2      	ldr	r2, [r0, #12]
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
     bbc:	6903      	ldr	r3, [r0, #16]
	return 1;
}

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
     bbe:	000d      	movs	r5, r1
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
     bc0:	6841      	ldr	r1, [r0, #4]
     bc2:	0004      	movs	r4, r0
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
     bc4:	1ad3      	subs	r3, r2, r3
		return 0;
     bc6:	2000      	movs	r0, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
     bc8:	428b      	cmp	r3, r1
     bca:	d20e      	bcs.n	bea <RingBuffer_Insert+0x32>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
     bcc:	0010      	movs	r0, r2
     bce:	f000 fccf 	bl	1570 <__aeabi_uidivmod>

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
     bd2:	68a6      	ldr	r6, [r4, #8]
}

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;
     bd4:	6827      	ldr	r7, [r4, #0]
	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
     bd6:	4371      	muls	r1, r6
     bd8:	0032      	movs	r2, r6
     bda:	1878      	adds	r0, r7, r1
     bdc:	0029      	movs	r1, r5
     bde:	f000 fccd 	bl	157c <memcpy>
	RingBuff->head++;

	return 1;
     be2:	2001      	movs	r0, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
     be4:	68e3      	ldr	r3, [r4, #12]
     be6:	3301      	adds	r3, #1
     be8:	60e3      	str	r3, [r4, #12]

	return 1;
}
     bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000bec <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	0004      	movs	r4, r0
     bf0:	6903      	ldr	r3, [r0, #16]
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
     bf2:	68e2      	ldr	r2, [r4, #12]
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
     bf4:	000e      	movs	r6, r1
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
     bf6:	2000      	movs	r0, #0
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
     bf8:	429a      	cmp	r2, r3
     bfa:	d00f      	beq.n	c1c <RingBuffer_Pop+0x30>
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
     bfc:	0018      	movs	r0, r3
     bfe:	6861      	ldr	r1, [r4, #4]
     c00:	f000 fcb6 	bl	1570 <__aeabi_uidivmod>

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
     c04:	68a5      	ldr	r5, [r4, #8]
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;
     c06:	6827      	ldr	r7, [r4, #0]
	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
     c08:	4369      	muls	r1, r5
     c0a:	002a      	movs	r2, r5
     c0c:	1879      	adds	r1, r7, r1
     c0e:	0030      	movs	r0, r6
     c10:	f000 fcb4 	bl	157c <memcpy>
	RingBuff->tail++;
 
	return 1;
     c14:	2001      	movs	r0, #1
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;
     c16:	6923      	ldr	r3, [r4, #16]
     c18:	3301      	adds	r3, #1
     c1a:	6123      	str	r3, [r4, #16]
 
	return 1;
}
     c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c1e:	46c0      	nop			; (mov r8, r8)

00000c20 <Chip_UART_Init>:
     c20:	2180      	movs	r1, #128	; 0x80
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
     c22:	b510      	push	{r4, lr}
     c24:	2480      	movs	r4, #128	; 0x80
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <Chip_UART_Init+0x24>)
     c28:	0164      	lsls	r4, r4, #5
     c2a:	585a      	ldr	r2, [r3, r1]
     c2c:	4322      	orrs	r2, r4
     c2e:	505a      	str	r2, [r3, r1]
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
     c30:	2298      	movs	r2, #152	; 0x98
     c32:	397f      	subs	r1, #127	; 0x7f
     c34:	5099      	str	r1, [r3, r2]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
     c36:	2307      	movs	r3, #7
     c38:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
     c3a:	3b04      	subs	r3, #4
     c3c:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
     c3e:	330d      	adds	r3, #13
     c40:	6283      	str	r3, [r0, #40]	; 0x28
}
     c42:	bd10      	pop	{r4, pc}
     c44:	40048000 	.word	0x40048000

00000c48 <Chip_UART_TXIntHandlerRB>:
	}
}

/* UART transmit-only interrupt handler for ring buffers */
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	b083      	sub	sp, #12
     c4c:	466a      	mov	r2, sp
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
     c4e:	6943      	ldr	r3, [r0, #20]
     c50:	0004      	movs	r4, r0
     c52:	000e      	movs	r6, r1
     c54:	1dd5      	adds	r5, r2, #7
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
     c56:	2720      	movs	r7, #32
     c58:	069b      	lsls	r3, r3, #26
     c5a:	d405      	bmi.n	c68 <Chip_UART_TXIntHandlerRB+0x20>
     c5c:	e00a      	b.n	c74 <Chip_UART_TXIntHandlerRB+0x2c>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
     c5e:	782b      	ldrb	r3, [r5, #0]
     c60:	6023      	str	r3, [r4, #0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
     c62:	6963      	ldr	r3, [r4, #20]
     c64:	421f      	tst	r7, r3
     c66:	d005      	beq.n	c74 <Chip_UART_TXIntHandlerRB+0x2c>
		   RingBuffer_Pop(pRB, &ch)) {
     c68:	0029      	movs	r1, r5
     c6a:	0030      	movs	r0, r6
     c6c:	f7ff ffbe 	bl	bec <RingBuffer_Pop>
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
     c70:	2800      	cmp	r0, #0
     c72:	d1f4      	bne.n	c5e <Chip_UART_TXIntHandlerRB+0x16>
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
	}
}
     c74:	b003      	add	sp, #12
     c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c78 <Chip_UART_IRQRBHandler>:
	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
}

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
     c78:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
     c7a:	2502      	movs	r5, #2
     c7c:	6843      	ldr	r3, [r0, #4]
	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
}

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
     c7e:	b083      	sub	sp, #12
     c80:	0004      	movs	r4, r0
     c82:	000f      	movs	r7, r1
     c84:	0016      	movs	r6, r2
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
     c86:	421d      	tst	r5, r3
     c88:	d110      	bne.n	cac <Chip_UART_IRQRBHandler+0x34>
     c8a:	466a      	mov	r2, sp
     c8c:	6963      	ldr	r3, [r4, #20]
     c8e:	1dd5      	adds	r5, r2, #7

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
     c90:	2601      	movs	r6, #1
     c92:	07db      	lsls	r3, r3, #31
     c94:	d508      	bpl.n	ca8 <Chip_UART_IRQRBHandler+0x30>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
     c96:	6823      	ldr	r3, [r4, #0]
		uint8_t ch = Chip_UART_ReadByte(pUART);
		RingBuffer_Insert(pRB, &ch);
     c98:	0029      	movs	r1, r5
     c9a:	0038      	movs	r0, r7
/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
		uint8_t ch = Chip_UART_ReadByte(pUART);
     c9c:	702b      	strb	r3, [r5, #0]
		RingBuffer_Insert(pRB, &ch);
     c9e:	f7ff ff8b 	bl	bb8 <RingBuffer_Insert>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
     ca2:	6963      	ldr	r3, [r4, #20]

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
     ca4:	421e      	tst	r6, r3
     ca6:	d1f6      	bne.n	c96 <Chip_UART_IRQRBHandler+0x1e>
		}
	}

	/* Handle receive interrupt */
	Chip_UART_RXIntHandlerRB(pUART, pRXRB);
}
     ca8:	b003      	add	sp, #12
     caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
		Chip_UART_TXIntHandlerRB(pUART, pTXRB);
     cac:	0011      	movs	r1, r2
     cae:	f7ff ffcb 	bl	c48 <Chip_UART_TXIntHandlerRB>

		/* Disable transmit interrupt if the ring buffer is empty */
		if (RingBuffer_IsEmpty(pTXRB)) {
     cb2:	68f2      	ldr	r2, [r6, #12]
     cb4:	6933      	ldr	r3, [r6, #16]
     cb6:	429a      	cmp	r2, r3
     cb8:	d1e7      	bne.n	c8a <Chip_UART_IRQRBHandler+0x12>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
     cba:	6863      	ldr	r3, [r4, #4]
     cbc:	43ab      	bics	r3, r5
     cbe:	6063      	str	r3, [r4, #4]
     cc0:	e7e3      	b.n	c8a <Chip_UART_IRQRBHandler+0x12>
     cc2:	46c0      	nop			; (mov r8, r8)

00000cc4 <Chip_UART_SetBaudFDR>:
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baudrate)

{
     cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cc6:	464f      	mov	r7, r9
     cc8:	4646      	mov	r6, r8
     cca:	b4c0      	push	{r6, r7}
	uint32_t uClk;
    uint32_t dval;
    uint32_t mval = 0;
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
     ccc:	010d      	lsls	r5, r1, #4
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baudrate)

{
     cce:	0004      	movs	r4, r0
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
	uint32_t actualRate = 0;

	/* Get Clock rate */
	uClk = Chip_Clock_GetMainClockRate();
     cd0:	f7ff ff1e 	bl	b10 <Chip_Clock_GetMainClockRate>

    /* The fractional is calculated as (PCLK  % (16 * Baudrate)) / (16 * Baudrate)
     * Let's make it to be the ratio DivVal / MulVal
     */
	dval = uClk % rate16;
     cd4:	0029      	movs	r1, r5
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
	uint32_t actualRate = 0;

	/* Get Clock rate */
	uClk = Chip_Clock_GetMainClockRate();
     cd6:	0007      	movs	r7, r0

    /* The fractional is calculated as (PCLK  % (16 * Baudrate)) / (16 * Baudrate)
     * Let's make it to be the ratio DivVal / MulVal
     */
	dval = uClk % rate16;
     cd8:	f000 fc4a 	bl	1570 <__aeabi_uidivmod>
    * now mormalize the ratio
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
     cdc:	2900      	cmp	r1, #0
     cde:	d036      	beq.n	d4e <Chip_UART_SetBaudFDR+0x8a>
        mval = rate16 / dval;
     ce0:	0028      	movs	r0, r5
     ce2:	f000 fbbf 	bl	1464 <__aeabi_uidiv>
        dval = 1;
     ce6:	220c      	movs	r2, #12
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
        mval = rate16 / dval;
     ce8:	0003      	movs	r3, r0
        dval = 1;
     cea:	2000      	movs	r0, #0
     cec:	429a      	cmp	r2, r3
     cee:	4140      	adcs	r0, r0
     cf0:	260f      	movs	r6, #15
     cf2:	0002      	movs	r2, r0
     cf4:	401e      	ands	r6, r3
     cf6:	0133      	lsls	r3, r6, #4
     cf8:	431a      	orrs	r2, r3
     cfa:	4681      	mov	r9, r0
     cfc:	0031      	movs	r1, r6
     cfe:	4368      	muls	r0, r5
     d00:	4690      	mov	r8, r2
     d02:	f000 fbaf 	bl	1464 <__aeabi_uidiv>
     d06:	1941      	adds	r1, r0, r5
     d08:	0038      	movs	r0, r7
     d0a:	f000 fbab 	bl	1464 <__aeabi_uidiv>
     d0e:	464b      	mov	r3, r9
     d10:	0005      	movs	r5, r0
     d12:	0118      	lsls	r0, r3, #4
     d14:	4368      	muls	r0, r5
     d16:	0031      	movs	r1, r6
     d18:	f000 fba4 	bl	1464 <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
     d1c:	2280      	movs	r2, #128	; 0x80
     d1e:	21ff      	movs	r1, #255	; 0xff
     d20:	68e3      	ldr	r3, [r4, #12]
     d22:	4313      	orrs	r3, r2
     d24:	60e3      	str	r3, [r4, #12]
     d26:	000b      	movs	r3, r1
     d28:	402b      	ands	r3, r5
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
     d2a:	6023      	str	r3, [r4, #0]
     d2c:	0a2b      	lsrs	r3, r5, #8
     d2e:	400b      	ands	r3, r1
	pUART->DLM = (uint32_t) dlm;
     d30:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
     d32:	68e3      	ldr	r3, [r4, #12]
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
     d34:	0129      	lsls	r1, r5, #4
     d36:	4393      	bics	r3, r2
     d38:	60e3      	str	r3, [r4, #12]
    Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(dl), UART_LOAD_DLM(dl));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));
     d3a:	4643      	mov	r3, r8

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
     d3c:	1809      	adds	r1, r1, r0
    Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(dl), UART_LOAD_DLM(dl));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));
     d3e:	62a3      	str	r3, [r4, #40]	; 0x28

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
     d40:	0038      	movs	r0, r7
     d42:	f000 fb8f 	bl	1464 <__aeabi_uidiv>
}
     d46:	bc0c      	pop	{r2, r3}
     d48:	4690      	mov	r8, r2
     d4a:	4699      	mov	r9, r3
     d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d4e:	0029      	movs	r1, r5
     d50:	0038      	movs	r0, r7
     d52:	f000 fb87 	bl	1464 <__aeabi_uidiv>
    * now mormalize the ratio
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
     d56:	2300      	movs	r3, #0
     d58:	0005      	movs	r5, r0
     d5a:	4698      	mov	r8, r3
     d5c:	2000      	movs	r0, #0
     d5e:	e7dd      	b.n	d1c <Chip_UART_SetBaudFDR+0x58>

00000d60 <CAN_error>:
}

/*	CAN error callback */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
     d60:	2201      	movs	r2, #1
	}
}

/*	CAN error callback */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
     d62:	4b02      	ldr	r3, [pc, #8]	; (d6c <CAN_error+0xc>)
     d64:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
     d66:	4b02      	ldr	r3, [pc, #8]	; (d70 <CAN_error+0x10>)
     d68:	701a      	strb	r2, [r3, #0]
}
     d6a:	4770      	bx	lr
     d6c:	10000644 	.word	0x10000644
     d70:	1000064b 	.word	0x1000064b

00000d74 <CAN_rx>:
/*************************************************
 *                  CALLBACKS
 * ************************************************/

/*	CAN receive callback */
void CAN_rx(uint8_t msg_obj_num) {
     d74:	b510      	push	{r4, lr}
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
     d76:	4c0b      	ldr	r4, [pc, #44]	; (da4 <CAN_rx+0x30>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
     d78:	4b0b      	ldr	r3, [pc, #44]	; (da8 <CAN_rx+0x34>)
 * ************************************************/

/*	CAN receive callback */
void CAN_rx(uint8_t msg_obj_num) {
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
     d7a:	7460      	strb	r0, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	0020      	movs	r0, r4
     d80:	689b      	ldr	r3, [r3, #8]
     d82:	68db      	ldr	r3, [r3, #12]
     d84:	4798      	blx	r3
	if (!RingBuffer_Insert(&rx_buffer, &msg_obj)) {
     d86:	0021      	movs	r1, r4
     d88:	4808      	ldr	r0, [pc, #32]	; (dac <CAN_rx+0x38>)
     d8a:	f7ff ff15 	bl	bb8 <RingBuffer_Insert>
     d8e:	2800      	cmp	r0, #0
     d90:	d106      	bne.n	da0 <CAN_rx+0x2c>
		can_error_flag = true;
     d92:	2201      	movs	r2, #1
     d94:	4b06      	ldr	r3, [pc, #24]	; (db0 <CAN_rx+0x3c>)
     d96:	701a      	strb	r2, [r3, #0]
		can_error_info = 0x800;
     d98:	2280      	movs	r2, #128	; 0x80
     d9a:	4b06      	ldr	r3, [pc, #24]	; (db4 <CAN_rx+0x40>)
     d9c:	0112      	lsls	r2, r2, #4
     d9e:	601a      	str	r2, [r3, #0]
	}
}
     da0:	bd10      	pop	{r4, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	10000998 	.word	0x10000998
     da8:	1fff1ff8 	.word	0x1fff1ff8
     dac:	10000630 	.word	0x10000630
     db0:	1000064b 	.word	0x1000064b
     db4:	10000644 	.word	0x10000644

00000db8 <CAN_tx>:

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
     db8:	b570      	push	{r4, r5, r6, lr}
     dba:	0004      	movs	r4, r0
	if (msg_obj_num <= NUM_MSG_OBJS) {
     dbc:	2802      	cmp	r0, #2
     dbe:	d907      	bls.n	dd0 <CAN_tx+0x18>
			tmp_msg_obj_2.msgobj = msg_obj_num;
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
			msg_obj_stat[msg_obj_num] = true;
		}
	} else {
		can_error_flag = true;
     dc0:	2201      	movs	r2, #1
     dc2:	4b0d      	ldr	r3, [pc, #52]	; (df8 <CAN_tx+0x40>)
     dc4:	701a      	strb	r2, [r3, #0]
		can_error_info = 0x400;
     dc6:	2280      	movs	r2, #128	; 0x80
     dc8:	4b0c      	ldr	r3, [pc, #48]	; (dfc <CAN_tx+0x44>)
     dca:	00d2      	lsls	r2, r2, #3
     dcc:	601a      	str	r2, [r3, #0]
	}
}
     dce:	bd70      	pop	{r4, r5, r6, pc}
}

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;
     dd0:	2300      	movs	r3, #0
     dd2:	4e0b      	ldr	r6, [pc, #44]	; (e00 <CAN_tx+0x48>)

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
     dd4:	4d0b      	ldr	r5, [pc, #44]	; (e04 <CAN_tx+0x4c>)
}

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;
     dd6:	5433      	strb	r3, [r6, r0]

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
     dd8:	0029      	movs	r1, r5
     dda:	480b      	ldr	r0, [pc, #44]	; (e08 <CAN_tx+0x50>)
     ddc:	f7ff ff06 	bl	bec <RingBuffer_Pop>
     de0:	2800      	cmp	r0, #0
     de2:	d0f4      	beq.n	dce <CAN_tx+0x16>
			tmp_msg_obj_2.msgobj = msg_obj_num;
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
     de4:	4b09      	ldr	r3, [pc, #36]	; (e0c <CAN_tx+0x54>)
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
			tmp_msg_obj_2.msgobj = msg_obj_num;
     de6:	746c      	strb	r4, [r5, #17]
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	0028      	movs	r0, r5
     dec:	689b      	ldr	r3, [r3, #8]
     dee:	691b      	ldr	r3, [r3, #16]
     df0:	4798      	blx	r3
			msg_obj_stat[msg_obj_num] = true;
     df2:	2301      	movs	r3, #1
     df4:	5533      	strb	r3, [r6, r4]
     df6:	e7ea      	b.n	dce <CAN_tx+0x16>
     df8:	1000064b 	.word	0x1000064b
     dfc:	10000644 	.word	0x10000644
     e00:	10000648 	.word	0x10000648
     e04:	10000980 	.word	0x10000980
     e08:	1000061c 	.word	0x1000061c
     e0c:	1fff1ff8 	.word	0x1fff1ff8

00000e10 <Baudrate_Calculate>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
     e10:	2280      	movs	r2, #128	; 0x80
/*************************************************
 *                  HELPERS
 * ************************************************/

// TODO EXPLAIN WHAT THIS DOES AND SIMPLIFY
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
     e12:	b5f0      	push	{r4, r5, r6, r7, lr}
     e14:	0005      	movs	r5, r0
     e16:	2080      	movs	r0, #128	; 0x80
     e18:	4647      	mov	r7, r8
     e1a:	000c      	movs	r4, r1
     e1c:	4920      	ldr	r1, [pc, #128]	; (ea0 <Baudrate_Calculate+0x90>)
     e1e:	0280      	lsls	r0, r0, #10
     e20:	588b      	ldr	r3, [r1, r2]
     e22:	b480      	push	{r7}
     e24:	4303      	orrs	r3, r0
     e26:	508b      	str	r3, [r1, r2]
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
     e28:	f7ff fe72 	bl	b10 <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baud_rate;
     e2c:	0029      	movs	r1, r5
     e2e:	f000 fb19 	bl	1464 <__aeabi_uidiv>

	for (div = 0; div <= 15; div++) {
     e32:	2300      	movs	r3, #0
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;
     e34:	2703      	movs	r7, #3

	for (div = 0; div <= 15; div++) {
     e36:	4698      	mov	r8, r3
     e38:	2301      	movs	r3, #1
     e3a:	4443      	add	r3, r8
     e3c:	469c      	mov	ip, r3
/*************************************************
 *                  HELPERS
 * ************************************************/

// TODO EXPLAIN WHAT THIS DOES AND SIMPLIFY
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
     e3e:	003e      	movs	r6, r7
     e40:	0019      	movs	r1, r3
     e42:	2501      	movs	r5, #1
     e44:	0032      	movs	r2, r6
     e46:	2303      	movs	r3, #3
	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
     e48:	4290      	cmp	r0, r2
     e4a:	d00e      	beq.n	e6a <Baudrate_Calculate+0x5a>

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
     e4c:	3301      	adds	r3, #1
     e4e:	1852      	adds	r2, r2, r1
     e50:	2b12      	cmp	r3, #18
     e52:	d1f9      	bne.n	e48 <Baudrate_Calculate+0x38>
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
     e54:	3501      	adds	r5, #1
     e56:	4461      	add	r1, ip
     e58:	19f6      	adds	r6, r6, r7
     e5a:	2d21      	cmp	r5, #33	; 0x21
     e5c:	d1f2      	bne.n	e44 <Baudrate_Calculate+0x34>
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
     e5e:	4663      	mov	r3, ip
     e60:	3703      	adds	r7, #3
     e62:	2b10      	cmp	r3, #16
     e64:	d017      	beq.n	e96 <Baudrate_Calculate+0x86>
     e66:	46e0      	mov	r8, ip
     e68:	e7e6      	b.n	e38 <Baudrate_Calculate+0x28>
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
     e6a:	4642      	mov	r2, r8

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
     e6c:	3b03      	subs	r3, #3
					seg1 = segs / 2;
     e6e:	0858      	lsrs	r0, r3, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
     e70:	6022      	str	r2, [r4, #0]
					can_api_timing_cfg[1] =
     e72:	0002      	movs	r2, r0
     e74:	2803      	cmp	r0, #3
     e76:	d811      	bhi.n	e9c <Baudrate_Calculate+0x8c>
     e78:	21f0      	movs	r1, #240	; 0xf0
     e7a:	0196      	lsls	r6, r2, #6
     e7c:	0109      	lsls	r1, r1, #4
     e7e:	0202      	lsls	r2, r0, #8
     e80:	400a      	ands	r2, r1
     e82:	4332      	orrs	r2, r6
     e84:	3d01      	subs	r5, #1
     e86:	4315      	orrs	r5, r2
     e88:	22e0      	movs	r2, #224	; 0xe0
     e8a:	1a1b      	subs	r3, r3, r0
     e8c:	031b      	lsls	r3, r3, #12
     e8e:	01d2      	lsls	r2, r2, #7
     e90:	4013      	ands	r3, r2
     e92:	431d      	orrs	r5, r3
     e94:	6065      	str	r5, [r4, #4]
					return;
				}
			}
		}
	}
}
     e96:	bc04      	pop	{r2}
     e98:	4690      	mov	r8, r2
     e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
     e9c:	2203      	movs	r2, #3
     e9e:	e7eb      	b.n	e78 <Baudrate_Calculate+0x68>
     ea0:	40048000 	.word	0x40048000

00000ea4 <CAN_ResetPeripheral>:
}

// TODO SAVE CURRENT IN FLIGHT MESSAGE SO THAT ON RESET ANY IN FLIGHT MESSAGES CAN BE RE-SENT

bool CAN_ResetPeripheral(void) {
	if(LPC_CCAN->CANSTAT>>7&0x01) {
     ea4:	4b07      	ldr	r3, [pc, #28]	; (ec4 <CAN_ResetPeripheral+0x20>)
    	Chip_SYSCTL_PeriphReset(RESET_CAN0);
    	return true;
    }
   return false;
     ea6:	2000      	movs	r0, #0
}

// TODO SAVE CURRENT IN FLIGHT MESSAGE SO THAT ON RESET ANY IN FLIGHT MESSAGES CAN BE RE-SENT

bool CAN_ResetPeripheral(void) {
	if(LPC_CCAN->CANSTAT>>7&0x01) {
     ea8:	685b      	ldr	r3, [r3, #4]
     eaa:	061b      	lsls	r3, r3, #24
     eac:	d508      	bpl.n	ec0 <CAN_ResetPeripheral+0x1c>
 * @note	The peripheral will stay in reset until reset is de-asserted. Call
 * Chip_SYSCTL_DeassertPeriphReset() to de-assert the reset.
 */
STATIC INLINE void Chip_SYSCTL_AssertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL &= ~(1 << (uint32_t) periph);
     eae:	2208      	movs	r2, #8
     eb0:	4b05      	ldr	r3, [pc, #20]	; (ec8 <CAN_ResetPeripheral+0x24>)
    	Chip_SYSCTL_PeriphReset(RESET_CAN0);
    	return true;
     eb2:	3001      	adds	r0, #1
     eb4:	6859      	ldr	r1, [r3, #4]
     eb6:	4391      	bics	r1, r2
     eb8:	6059      	str	r1, [r3, #4]
 * @param	periph	: Peripheral to de-assert reset for
 * @return	Nothing
 */
STATIC INLINE void Chip_SYSCTL_DeassertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL |= (1 << (uint32_t) periph);
     eba:	6859      	ldr	r1, [r3, #4]
     ebc:	430a      	orrs	r2, r1
     ebe:	605a      	str	r2, [r3, #4]
    }
   return false;
}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	40050000 	.word	0x40050000
     ec8:	40048000 	.word	0x40048000

00000ecc <Convert_To_CAN_Error>:

CAN_ERROR_T Convert_To_CAN_Error(uint32_t can_error) {
     ecc:	0002      	movs	r2, r0
	if (!can_error) return NO_CAN_ERROR;
     ece:	2000      	movs	r0, #0
     ed0:	2a00      	cmp	r2, #0
     ed2:	d00f      	beq.n	ef4 <Convert_To_CAN_Error+0x28>
    switch(can_error & 0x6) {
     ed4:	2306      	movs	r3, #6
     ed6:	490f      	ldr	r1, [pc, #60]	; (f14 <Convert_To_CAN_Error+0x48>)
     ed8:	4013      	ands	r3, r2
     eda:	009b      	lsls	r3, r3, #2
     edc:	58cb      	ldr	r3, [r1, r3]
     ede:	469f      	mov	pc, r3
       case 0x4: return BIT1_CAN_ERROR;
       case 0x5: return BIT0_CAN_ERROR;
       case 0x6: return CRC_CAN_ERROR;
       case 0x7: return UNUSED_CAN_ERROR;
    }
    if (can_error == 0x400) return UNRECOGNIZED_MSGOBJ_CAN_ERROR;
     ee0:	2380      	movs	r3, #128	; 0x80
     ee2:	200c      	movs	r0, #12
     ee4:	00db      	lsls	r3, r3, #3
     ee6:	429a      	cmp	r2, r3
     ee8:	d004      	beq.n	ef4 <Convert_To_CAN_Error+0x28>
    if (can_error == 0x800) return RX_BUFFER_FULL_CAN_ERROR;
     eea:	2380      	movs	r3, #128	; 0x80
     eec:	011b      	lsls	r3, r3, #4
     eee:	429a      	cmp	r2, r3
     ef0:	d00d      	beq.n	f0e <Convert_To_CAN_Error+0x42>
    return UNRECOGNIZED_ERROR_CODE;
     ef2:	3001      	adds	r0, #1
}
     ef4:	4770      	bx	lr
}

CAN_ERROR_T Convert_To_CAN_Error(uint32_t can_error) {
	if (!can_error) return NO_CAN_ERROR;
    switch(can_error & 0x6) {
       case 0x1: return STUF_CAN_ERROR;
     ef6:	2005      	movs	r0, #5
     ef8:	e7fc      	b.n	ef4 <Convert_To_CAN_Error+0x28>
       case 0x2: return FORM_CAN_ERROR;
     efa:	2006      	movs	r0, #6
     efc:	e7fa      	b.n	ef4 <Convert_To_CAN_Error+0x28>
       case 0x3: return ACK_CAN_ERROR;
     efe:	2007      	movs	r0, #7
     f00:	e7f8      	b.n	ef4 <Convert_To_CAN_Error+0x28>
       case 0x4: return BIT1_CAN_ERROR;
     f02:	2008      	movs	r0, #8
     f04:	e7f6      	b.n	ef4 <Convert_To_CAN_Error+0x28>
       case 0x5: return BIT0_CAN_ERROR;
     f06:	2009      	movs	r0, #9
     f08:	e7f4      	b.n	ef4 <Convert_To_CAN_Error+0x28>
       case 0x6: return CRC_CAN_ERROR;
     f0a:	200a      	movs	r0, #10
     f0c:	e7f2      	b.n	ef4 <Convert_To_CAN_Error+0x28>
       case 0x7: return UNUSED_CAN_ERROR;
    }
    if (can_error == 0x400) return UNRECOGNIZED_MSGOBJ_CAN_ERROR;
    if (can_error == 0x800) return RX_BUFFER_FULL_CAN_ERROR;
     f0e:	200f      	movs	r0, #15
     f10:	e7f0      	b.n	ef4 <Convert_To_CAN_Error+0x28>
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	000016fc 	.word	0x000016fc

00000f18 <CAN_IRQHandler>:
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
     f18:	4b03      	ldr	r3, [pc, #12]	; (f28 <CAN_IRQHandler+0x10>)
 * @brief	CCAN Interrupt Handler
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
     f1a:	b510      	push	{r4, lr}
	LPC_CCAN_API->isr();
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	689b      	ldr	r3, [r3, #8]
     f20:	685b      	ldr	r3, [r3, #4]
     f22:	4798      	blx	r3
}
     f24:	bd10      	pop	{r4, pc}
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	1fff1ff8 	.word	0x1fff1ff8

00000f2c <CAN_SetMask1>:
	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
     f2c:	231b      	movs	r3, #27

	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
     f2e:	b570      	push	{r4, r5, r6, lr}
	msg_obj.msgobj = 27;
     f30:	4c0c      	ldr	r4, [pc, #48]	; (f64 <CAN_SetMask1+0x38>)
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f32:	4d0d      	ldr	r5, [pc, #52]	; (f68 <CAN_SetMask1+0x3c>)
	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
     f34:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f36:	682b      	ldr	r3, [r5, #0]
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
	msg_obj.mode_id = mode_id;
     f38:	6021      	str	r1, [r4, #0]
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f3a:	689b      	ldr	r3, [r3, #8]

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
     f3c:	6060      	str	r0, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f3e:	689b      	ldr	r3, [r3, #8]
     f40:	0020      	movs	r0, r4
     f42:	4798      	blx	r3
	msg_obj.msgobj = 28;
     f44:	231c      	movs	r3, #28
     f46:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f48:	682b      	ldr	r3, [r5, #0]
     f4a:	0020      	movs	r0, r4
     f4c:	689b      	ldr	r3, [r3, #8]
     f4e:	689b      	ldr	r3, [r3, #8]
     f50:	4798      	blx	r3
	msg_obj.msgobj = 29;
     f52:	231d      	movs	r3, #29
     f54:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f56:	682b      	ldr	r3, [r5, #0]
     f58:	0020      	movs	r0, r4
     f5a:	689b      	ldr	r3, [r3, #8]
     f5c:	689b      	ldr	r3, [r3, #8]
     f5e:	4798      	blx	r3
}
     f60:	bd70      	pop	{r4, r5, r6, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	10000998 	.word	0x10000998
     f68:	1fff1ff8 	.word	0x1fff1ff8

00000f6c <CAN_SetMask2>:

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
     f6c:	231e      	movs	r3, #30
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
	msg_obj.msgobj = 29;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
     f6e:	b570      	push	{r4, r5, r6, lr}
	msg_obj.msgobj = 30;
     f70:	4c08      	ldr	r4, [pc, #32]	; (f94 <CAN_SetMask2+0x28>)
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f72:	4d09      	ldr	r5, [pc, #36]	; (f98 <CAN_SetMask2+0x2c>)
	msg_obj.msgobj = 29;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
     f74:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f76:	682b      	ldr	r3, [r5, #0]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
	msg_obj.mode_id = mode_id;
     f78:	6021      	str	r1, [r4, #0]
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f7a:	689b      	ldr	r3, [r3, #8]
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
     f7c:	6060      	str	r0, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f7e:	689b      	ldr	r3, [r3, #8]
     f80:	0020      	movs	r0, r4
     f82:	4798      	blx	r3
	msg_obj.msgobj = 31;
     f84:	231f      	movs	r3, #31
     f86:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
     f88:	682b      	ldr	r3, [r5, #0]
     f8a:	0020      	movs	r0, r4
     f8c:	689b      	ldr	r3, [r3, #8]
     f8e:	689b      	ldr	r3, [r3, #8]
     f90:	4798      	blx	r3
}
     f92:	bd70      	pop	{r4, r5, r6, pc}
     f94:	10000998 	.word	0x10000998
     f98:	1fff1ff8 	.word	0x1fff1ff8

00000f9c <CAN_Init>:
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
}

void CAN_Init(uint32_t baud_rate) {
     f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
     f9e:	2400      	movs	r4, #0

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
     fa0:	4d20      	ldr	r5, [pc, #128]	; (1024 <CAN_Init+0x88>)
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
}

void CAN_Init(uint32_t baud_rate) {
     fa2:	b08b      	sub	sp, #44	; 0x2c
     fa4:	0006      	movs	r6, r0

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
     fa6:	2310      	movs	r3, #16
     fa8:	2218      	movs	r2, #24
     faa:	491f      	ldr	r1, [pc, #124]	; (1028 <CAN_Init+0x8c>)
     fac:	0028      	movs	r0, r5
     fae:	f7ff fdfb 	bl	ba8 <RingBuffer_Init>
     fb2:	612c      	str	r4, [r5, #16]
     fb4:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&rx_buffer);

	RingBuffer_Init(&tx_buffer, _tx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
     fb6:	4d1d      	ldr	r5, [pc, #116]	; (102c <CAN_Init+0x90>)
     fb8:	491d      	ldr	r1, [pc, #116]	; (1030 <CAN_Init+0x94>)
     fba:	2310      	movs	r3, #16
     fbc:	2218      	movs	r2, #24
     fbe:	0028      	movs	r0, r5
     fc0:	f7ff fdf2 	bl	ba8 <RingBuffer_Init>
     fc4:	612c      	str	r4, [r5, #16]
     fc6:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&tx_buffer);

	uint32_t CanApiClkInitTable[2];
	CCAN_CALLBACKS_T callbacks = {
     fc8:	ad02      	add	r5, sp, #8
     fca:	002a      	movs	r2, r5
     fcc:	4b19      	ldr	r3, [pc, #100]	; (1034 <CAN_Init+0x98>)
     fce:	cb83      	ldmia	r3!, {r0, r1, r7}
     fd0:	c283      	stmia	r2!, {r0, r1, r7}
     fd2:	cb83      	ldmia	r3!, {r0, r1, r7}
     fd4:	c283      	stmia	r2!, {r0, r1, r7}
     fd6:	cb03      	ldmia	r3!, {r0, r1}
     fd8:	c203      	stmia	r2!, {r0, r1}
		NULL,
		NULL,
		NULL,
		NULL,
	};
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
     fda:	0030      	movs	r0, r6

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
     fdc:	4e16      	ldr	r6, [pc, #88]	; (1038 <CAN_Init+0x9c>)
		NULL,
		NULL,
		NULL,
		NULL,
	};
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
     fde:	4669      	mov	r1, sp
     fe0:	f7ff ff16 	bl	e10 <Baudrate_Calculate>

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
     fe4:	6833      	ldr	r3, [r6, #0]
     fe6:	2101      	movs	r1, #1
     fe8:	689b      	ldr	r3, [r3, #8]
     fea:	4668      	mov	r0, sp
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
     ff0:	6833      	ldr	r3, [r6, #0]
     ff2:	0028      	movs	r0, r5
     ff4:	689b      	ldr	r3, [r3, #8]
     ff6:	69db      	ldr	r3, [r3, #28]
     ff8:	4798      	blx	r3
     ffa:	2280      	movs	r2, #128	; 0x80
     ffc:	4b0f      	ldr	r3, [pc, #60]	; (103c <CAN_Init+0xa0>)
     ffe:	0192      	lsls	r2, r2, #6
    1000:	601a      	str	r2, [r3, #0]
	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);

	/* Configure message objects to accept all messages */
	CAN_SetMask1(0, 0);
    1002:	2100      	movs	r1, #0
    1004:	2000      	movs	r0, #0
    1006:	f7ff ff91 	bl	f2c <CAN_SetMask1>
	CAN_SetMask2(0, 0);
    100a:	2100      	movs	r1, #0
    100c:	2000      	movs	r0, #0
    100e:	f7ff ffad 	bl	f6c <CAN_SetMask2>

	can_error_flag = false;
    1012:	4b0b      	ldr	r3, [pc, #44]	; (1040 <CAN_Init+0xa4>)
    1014:	701c      	strb	r4, [r3, #0]
	can_error_info = 0;
    1016:	4b0b      	ldr	r3, [pc, #44]	; (1044 <CAN_Init+0xa8>)
    1018:	601c      	str	r4, [r3, #0]

	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
    101a:	4b0b      	ldr	r3, [pc, #44]	; (1048 <CAN_Init+0xac>)
    101c:	801c      	strh	r4, [r3, #0]
}
    101e:	b00b      	add	sp, #44	; 0x2c
    1020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	10000630 	.word	0x10000630
    1028:	10000800 	.word	0x10000800
    102c:	1000061c 	.word	0x1000061c
    1030:	10000680 	.word	0x10000680
    1034:	00001718 	.word	0x00001718
    1038:	1fff1ff8 	.word	0x1fff1ff8
    103c:	e000e100 	.word	0xe000e100
    1040:	1000064b 	.word	0x1000064b
    1044:	10000644 	.word	0x10000644
    1048:	10000648 	.word	0x10000648

0000104c <CAN_Receive>:
	msg_obj.msgobj = 31;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
    104c:	4b09      	ldr	r3, [pc, #36]	; (1074 <CAN_Receive+0x28>)
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
	msg_obj.msgobj = 31;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
    104e:	b510      	push	{r4, lr}
	if (can_error_flag) {
    1050:	781a      	ldrb	r2, [r3, #0]
    1052:	2a00      	cmp	r2, #0
    1054:	d006      	beq.n	1064 <CAN_Receive+0x18>
		can_error_flag = false;
    1056:	2200      	movs	r2, #0
    1058:	701a      	strb	r2, [r3, #0]
		return Convert_To_CAN_Error(can_error_info);
    105a:	4b07      	ldr	r3, [pc, #28]	; (1078 <CAN_Receive+0x2c>)
    105c:	6818      	ldr	r0, [r3, #0]
    105e:	f7ff ff35 	bl	ecc <Convert_To_CAN_Error>
	} else if (RingBuffer_Pop(&rx_buffer, user_buffer)) {
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}
    1062:	bd10      	pop	{r4, pc}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
	} else if (RingBuffer_Pop(&rx_buffer, user_buffer)) {
    1064:	0001      	movs	r1, r0
    1066:	4805      	ldr	r0, [pc, #20]	; (107c <CAN_Receive+0x30>)
    1068:	f7ff fdc0 	bl	bec <RingBuffer_Pop>
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
    106c:	4243      	negs	r3, r0
    106e:	4158      	adcs	r0, r3
    1070:	b2c0      	uxtb	r0, r0
    1072:	e7f6      	b.n	1062 <CAN_Receive+0x16>
    1074:	1000064b 	.word	0x1000064b
    1078:	10000644 	.word	0x10000644
    107c:	10000630 	.word	0x10000630

00001080 <CAN_TransmitMsgObj>:
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
	if (can_error_flag) {
    1080:	4b16      	ldr	r3, [pc, #88]	; (10dc <CAN_TransmitMsgObj+0x5c>)
		tmp_msg_obj.data[i] = data[i];
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
    1082:	b570      	push	{r4, r5, r6, lr}
	if (can_error_flag) {
    1084:	781a      	ldrb	r2, [r3, #0]
    1086:	2a00      	cmp	r2, #0
    1088:	d111      	bne.n	10ae <CAN_TransmitMsgObj+0x2e>
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    108a:	4c15      	ldr	r4, [pc, #84]	; (10e0 <CAN_TransmitMsgObj+0x60>)
    108c:	7863      	ldrb	r3, [r4, #1]
    108e:	2b00      	cmp	r3, #0
    1090:	d014      	beq.n	10bc <CAN_TransmitMsgObj+0x3c>
    1092:	78a3      	ldrb	r3, [r4, #2]
    1094:	2b00      	cmp	r3, #0
    1096:	d01d      	beq.n	10d4 <CAN_TransmitMsgObj+0x54>
				break;
			}
		}

		if (!sent) { // Everything is busy, so put in ring buffer
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
    1098:	0001      	movs	r1, r0
    109a:	4812      	ldr	r0, [pc, #72]	; (10e4 <CAN_TransmitMsgObj+0x64>)
    109c:	f7ff fd8c 	bl	bb8 <RingBuffer_Insert>
    10a0:	0003      	movs	r3, r0
				return TX_BUFFER_FULL_CAN_ERROR;
			}
		}

	    return NO_CAN_ERROR;
    10a2:	425a      	negs	r2, r3
    10a4:	4153      	adcs	r3, r2
			}
		}

		if (!sent) { // Everything is busy, so put in ring buffer
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
				return TX_BUFFER_FULL_CAN_ERROR;
    10a6:	200e      	movs	r0, #14
			}
		}

	    return NO_CAN_ERROR;
    10a8:	425b      	negs	r3, r3
    10aa:	4018      	ands	r0, r3
	}
}
    10ac:	bd70      	pop	{r4, r5, r6, pc}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
	if (can_error_flag) {
		can_error_flag = false;
    10ae:	2200      	movs	r2, #0
    10b0:	701a      	strb	r2, [r3, #0]
		return Convert_To_CAN_Error(can_error_info);
    10b2:	4b0d      	ldr	r3, [pc, #52]	; (10e8 <CAN_TransmitMsgObj+0x68>)
    10b4:	6818      	ldr	r0, [r3, #0]
    10b6:	f7ff ff09 	bl	ecc <Convert_To_CAN_Error>
    10ba:	e7f7      	b.n	10ac <CAN_TransmitMsgObj+0x2c>
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    10bc:	2501      	movs	r5, #1
    10be:	2301      	movs	r3, #1
				// Send with this message object
				msg_obj->msgobj = i;
    10c0:	7443      	strb	r3, [r0, #17]
				LPC_CCAN_API->can_transmit(msg_obj);
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <CAN_TransmitMsgObj+0x6c>)
    10c4:	681b      	ldr	r3, [r3, #0]
    10c6:	689b      	ldr	r3, [r3, #8]
    10c8:	691b      	ldr	r3, [r3, #16]
    10ca:	4798      	blx	r3
				msg_obj_stat[i] = true;
    10cc:	2301      	movs	r3, #1
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
				return TX_BUFFER_FULL_CAN_ERROR;
			}
		}

	    return NO_CAN_ERROR;
    10ce:	2000      	movs	r0, #0
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
				// Send with this message object
				msg_obj->msgobj = i;
				LPC_CCAN_API->can_transmit(msg_obj);
				msg_obj_stat[i] = true;
    10d0:	5563      	strb	r3, [r4, r5]
    10d2:	e7eb      	b.n	10ac <CAN_TransmitMsgObj+0x2c>
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    10d4:	2502      	movs	r5, #2
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
    10d6:	3302      	adds	r3, #2
    10d8:	e7f2      	b.n	10c0 <CAN_TransmitMsgObj+0x40>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	1000064b 	.word	0x1000064b
    10e0:	10000648 	.word	0x10000648
    10e4:	1000061c 	.word	0x1000061c
    10e8:	10000644 	.word	0x10000644
    10ec:	1fff1ff8 	.word	0x1fff1ff8

000010f0 <CAN_Transmit>:
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
    10f0:	0003      	movs	r3, r0
	tmp_msg_obj.mode_id = msg_id;
    10f2:	4808      	ldr	r0, [pc, #32]	; (1114 <CAN_Transmit+0x24>)
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
    10f4:	b570      	push	{r4, r5, r6, lr}
	tmp_msg_obj.mode_id = msg_id;
    10f6:	6003      	str	r3, [r0, #0]
	tmp_msg_obj.dlc = data_len;
    10f8:	7402      	strb	r2, [r0, #16]
	uint8_t i;
	for (i = 0; i < tmp_msg_obj.dlc; i++) {	
    10fa:	2300      	movs	r3, #0
    10fc:	2a00      	cmp	r2, #0
    10fe:	d006      	beq.n	110e <CAN_Transmit+0x1e>
		tmp_msg_obj.data[i] = data[i];
    1100:	5ccd      	ldrb	r5, [r1, r3]
    1102:	18c4      	adds	r4, r0, r3
    1104:	3301      	adds	r3, #1
    1106:	7225      	strb	r5, [r4, #8]

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
	tmp_msg_obj.mode_id = msg_id;
	tmp_msg_obj.dlc = data_len;
	uint8_t i;
	for (i = 0; i < tmp_msg_obj.dlc; i++) {	
    1108:	b2dc      	uxtb	r4, r3
    110a:	42a2      	cmp	r2, r4
    110c:	d8f8      	bhi.n	1100 <CAN_Transmit+0x10>
		tmp_msg_obj.data[i] = data[i];
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
    110e:	f7ff ffb7 	bl	1080 <CAN_TransmitMsgObj>
}
    1112:	bd70      	pop	{r4, r5, r6, pc}
    1114:	10000668 	.word	0x10000668

00001118 <Can_RawRead>:
  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err =  (Can_ErrorID_T) CAN_Transmit(can_out_id, frame->data, can_out_bytes);
  return err;
}

Can_ErrorID_T Can_RawRead(Frame *frame) {
    1118:	b510      	push	{r4, lr}
    111a:	b086      	sub	sp, #24
    111c:	0004      	movs	r4, r0
  CCAN_MSG_OBJ_T rx_msg;

  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err = (Can_ErrorID_T) CAN_Receive(&rx_msg);
    111e:	4668      	mov	r0, sp
    1120:	f7ff ff94 	bl	104c <CAN_Receive>

  if (err == Can_Error_NONE) {
    1124:	2800      	cmp	r0, #0
    1126:	d111      	bne.n	114c <Can_RawRead+0x34>
    frame->id = rx_msg.mode_id;
    1128:	9b00      	ldr	r3, [sp, #0]
    112a:	6023      	str	r3, [r4, #0]
    frame->len = rx_msg.dlc;
    112c:	466b      	mov	r3, sp
    112e:	7c19      	ldrb	r1, [r3, #16]
    1130:	7121      	strb	r1, [r4, #4]

    uint8_t i;
    for (i = 0; i < frame->len; i++) {
    1132:	2900      	cmp	r1, #0
    1134:	d00a      	beq.n	114c <Can_RawRead+0x34>
    1136:	3901      	subs	r1, #1
    1138:	b2c9      	uxtb	r1, r1
    113a:	3101      	adds	r1, #1
    113c:	1d62      	adds	r2, r4, #5
    113e:	1859      	adds	r1, r3, r1
      frame->data[i] = rx_msg.data[i];
    1140:	7a1c      	ldrb	r4, [r3, #8]
    1142:	3301      	adds	r3, #1
    1144:	7014      	strb	r4, [r2, #0]
    1146:	3201      	adds	r2, #1
  if (err == Can_Error_NONE) {
    frame->id = rx_msg.mode_id;
    frame->len = rx_msg.dlc;

    uint8_t i;
    for (i = 0; i < frame->len; i++) {
    1148:	428b      	cmp	r3, r1
    114a:	d1f9      	bne.n	1140 <Can_RawRead+0x28>
      frame->data[i] = rx_msg.data[i];
    }
  }
  return err;
}
    114c:	b006      	add	sp, #24
    114e:	bd10      	pop	{r4, pc}

00001150 <Can_Unknown_Read>:
  // Define nothing so that there is a linker error!
#endif

// TODO this is a bit of a hack...unknown reads should follow same as regular reads
// and use of Can_RawRead must be banned.
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
    1150:	b530      	push	{r4, r5, lr}
  if (lastError == Can_Error_NONE) {
    1152:	4d0b      	ldr	r5, [pc, #44]	; (1180 <Can_Unknown_Read+0x30>)
  // Define nothing so that there is a linker error!
#endif

// TODO this is a bit of a hack...unknown reads should follow same as regular reads
// and use of Can_RawRead must be banned.
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
    1154:	0004      	movs	r4, r0
  if (lastError == Can_Error_NONE) {
    1156:	7828      	ldrb	r0, [r5, #0]
    1158:	2800      	cmp	r0, #0
    115a:	d10f      	bne.n	117c <Can_Unknown_Read+0x2c>
    frame->id = lastMessage.id;
    115c:	4a09      	ldr	r2, [pc, #36]	; (1184 <Can_Unknown_Read+0x34>)
    115e:	6813      	ldr	r3, [r2, #0]
    1160:	6023      	str	r3, [r4, #0]
    frame->len = lastMessage.len;
    1162:	7913      	ldrb	r3, [r2, #4]
    1164:	3205      	adds	r2, #5
    1166:	7123      	strb	r3, [r4, #4]
    1168:	1d63      	adds	r3, r4, #5
    116a:	340d      	adds	r4, #13
    uint8_t i;
    for (i = 0; i < 8; i++) {
      frame->data[i] = lastMessage.data[i];
    116c:	7811      	ldrb	r1, [r2, #0]
    116e:	3201      	adds	r2, #1
    1170:	7019      	strb	r1, [r3, #0]
    1172:	3301      	adds	r3, #1
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
  if (lastError == Can_Error_NONE) {
    frame->id = lastMessage.id;
    frame->len = lastMessage.len;
    uint8_t i;
    for (i = 0; i < 8; i++) {
    1174:	42a3      	cmp	r3, r4
    1176:	d1f9      	bne.n	116c <Can_Unknown_Read+0x1c>
      frame->data[i] = lastMessage.data[i];
    }
    lastError = Can_Error_NO_RX;
    1178:	2301      	movs	r3, #1
    117a:	702b      	strb	r3, [r5, #0]
    return Can_Error_NONE;
  } else {
    return lastError;
  }
}
    117c:	bd30      	pop	{r4, r5, pc}
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	10000100 	.word	0x10000100
    1184:	1000064c 	.word	0x1000064c

00001188 <Can_Error_Read>:

Can_ErrorID_T Can_Error_Read(void) {
  Can_ErrorID_T cachedError = lastError;
  lastError = Can_Error_NO_RX;
    1188:	2201      	movs	r2, #1
    return lastError;
  }
}

Can_ErrorID_T Can_Error_Read(void) {
  Can_ErrorID_T cachedError = lastError;
    118a:	4b02      	ldr	r3, [pc, #8]	; (1194 <Can_Error_Read+0xc>)
    118c:	7818      	ldrb	r0, [r3, #0]
  lastError = Can_Error_NO_RX;
    118e:	701a      	strb	r2, [r3, #0]
  return cachedError;
}
    1190:	4770      	bx	lr
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	10000100 	.word	0x10000100

00001198 <Can0_Csb_Init>:
void Can0_Bms_Init(uint32_t baudrate) {
  Can_Init(baudrate);
  Can_SetFilter(0b0, 0);
}

void Can0_Csb_Init(uint32_t baudrate) {
    1198:	b510      	push	{r4, lr}
void Can_Init(uint32_t baudrate) {
  CAN_Init(baudrate);
}

void Can_SetFilter(uint32_t mask, uint32_t match_id) {
  CAN_SetMask1(mask, match_id);
    119a:	4c06      	ldr	r4, [pc, #24]	; (11b4 <Can0_Csb_Init+0x1c>)
#include "chip.h"
#include "can.h"
#include "ccand_11xx.h"

void Can_Init(uint32_t baudrate) {
  CAN_Init(baudrate);
    119c:	f7ff fefe 	bl	f9c <CAN_Init>
}

void Can_SetFilter(uint32_t mask, uint32_t match_id) {
  CAN_SetMask1(mask, match_id);
    11a0:	0020      	movs	r0, r4
    11a2:	2100      	movs	r1, #0
    11a4:	f7ff fec2 	bl	f2c <CAN_SetMask1>
  CAN_SetMask2(mask, match_id);
    11a8:	2100      	movs	r1, #0
    11aa:	0020      	movs	r0, r4
    11ac:	f7ff fede 	bl	f6c <CAN_SetMask2>
  Can_Init(baudrate);
  Can_SetFilter(0b11111111111111111100000000000, 0);
}
    11b0:	bd10      	pop	{r4, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	1ffff800 	.word	0x1ffff800

000011b8 <Can_MsgType>:

Can_MsgID_T Can_MsgType(void) {
    11b8:	b510      	push	{r4, lr}
  lastError = Can_RawRead(&lastMessage);
    11ba:	4c31      	ldr	r4, [pc, #196]	; (1280 <Can_MsgType+0xc8>)
    11bc:	0020      	movs	r0, r4
    11be:	f7ff ffab 	bl	1118 <Can_RawRead>
    11c2:	4a30      	ldr	r2, [pc, #192]	; (1284 <Can_MsgType+0xcc>)
    11c4:	0003      	movs	r3, r0
    11c6:	7010      	strb	r0, [r2, #0]
  if (lastError == Can_Error_NO_RX) {
    11c8:	2801      	cmp	r0, #1
    11ca:	d025      	beq.n	1218 <Can_MsgType+0x60>
    return Can_No_Msg;
  } else if (lastError != Can_Error_NONE) {
    return Can_Error_Msg;
    11cc:	2002      	movs	r0, #2

Can_MsgID_T Can_MsgType(void) {
  lastError = Can_RawRead(&lastMessage);
  if (lastError == Can_Error_NO_RX) {
    return Can_No_Msg;
  } else if (lastError != Can_Error_NONE) {
    11ce:	2b00      	cmp	r3, #0
    11d0:	d000      	beq.n	11d4 <Can_MsgType+0x1c>
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    default:
      return Can_Unknown_Msg;
   }
}
    11d2:	bd10      	pop	{r4, pc}
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    11d4:	6823      	ldr	r3, [r4, #0]
    11d6:	2bf2      	cmp	r3, #242	; 0xf2
    11d8:	d050      	beq.n	127c <Can_MsgType+0xc4>
    11da:	d910      	bls.n	11fe <Can_MsgType+0x46>
    11dc:	4a2a      	ldr	r2, [pc, #168]	; (1288 <Can_MsgType+0xd0>)
    11de:	4293      	cmp	r3, r2
    11e0:	d044      	beq.n	126c <Can_MsgType+0xb4>
    11e2:	d825      	bhi.n	1230 <Can_MsgType+0x78>
    11e4:	2bf4      	cmp	r3, #244	; 0xf4
    11e6:	d032      	beq.n	124e <Can_MsgType+0x96>
    11e8:	d344      	bcc.n	1274 <Can_MsgType+0xbc>
    11ea:	4a28      	ldr	r2, [pc, #160]	; (128c <Can_MsgType+0xd4>)
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    11ec:	2004      	movs	r0, #4
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    11ee:	4293      	cmp	r3, r2
    11f0:	d0ef      	beq.n	11d2 <Can_MsgType+0x1a>
    11f2:	4a27      	ldr	r2, [pc, #156]	; (1290 <Can_MsgType+0xd8>)
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    11f4:	3001      	adds	r0, #1
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    11f6:	4293      	cmp	r3, r2
    11f8:	d0eb      	beq.n	11d2 <Can_MsgType+0x1a>
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    default:
      return Can_Unknown_Msg;
    11fa:	2001      	movs	r0, #1
    11fc:	e7e9      	b.n	11d2 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    11fe:	2bd3      	cmp	r3, #211	; 0xd3
    1200:	d03a      	beq.n	1278 <Can_MsgType+0xc0>
    1202:	d80b      	bhi.n	121c <Can_MsgType+0x64>
    1204:	2bd0      	cmp	r3, #208	; 0xd0
    1206:	d026      	beq.n	1256 <Can_MsgType+0x9e>
    1208:	d92c      	bls.n	1264 <Can_MsgType+0xac>
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    120a:	2009      	movs	r0, #9
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    120c:	2bd1      	cmp	r3, #209	; 0xd1
    120e:	d0e0      	beq.n	11d2 <Can_MsgType+0x1a>
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    1210:	3003      	adds	r0, #3
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    1212:	2bd2      	cmp	r3, #210	; 0xd2
    1214:	d0dd      	beq.n	11d2 <Can_MsgType+0x1a>
    1216:	e7f0      	b.n	11fa <Can_MsgType+0x42>
}

Can_MsgID_T Can_MsgType(void) {
  lastError = Can_RawRead(&lastMessage);
  if (lastError == Can_Error_NO_RX) {
    return Can_No_Msg;
    1218:	2000      	movs	r0, #0
    121a:	e7da      	b.n	11d2 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    121c:	2bd5      	cmp	r3, #213	; 0xd5
    121e:	d018      	beq.n	1252 <Can_MsgType+0x9a>
    1220:	d326      	bcc.n	1270 <Can_MsgType+0xb8>
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    1222:	200a      	movs	r0, #10
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    1224:	2bf0      	cmp	r3, #240	; 0xf0
    1226:	d0d4      	beq.n	11d2 <Can_MsgType+0x1a>
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    1228:	3004      	adds	r0, #4
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    122a:	2bf1      	cmp	r3, #241	; 0xf1
    122c:	d0d1      	beq.n	11d2 <Can_MsgType+0x1a>
    122e:	e7e4      	b.n	11fa <Can_MsgType+0x42>
    1230:	4a18      	ldr	r2, [pc, #96]	; (1294 <Can_MsgType+0xdc>)
    1232:	4293      	cmp	r3, r2
    1234:	d009      	beq.n	124a <Can_MsgType+0x92>
    1236:	d910      	bls.n	125a <Can_MsgType+0xa2>
    1238:	4a17      	ldr	r2, [pc, #92]	; (1298 <Can_MsgType+0xe0>)
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    123a:	2011      	movs	r0, #17
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    123c:	4293      	cmp	r3, r2
    123e:	d0c8      	beq.n	11d2 <Can_MsgType+0x1a>
    1240:	4a16      	ldr	r2, [pc, #88]	; (129c <Can_MsgType+0xe4>)
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    1242:	380b      	subs	r0, #11
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    1244:	4293      	cmp	r3, r2
    1246:	d0c4      	beq.n	11d2 <Can_MsgType+0x1a>
    1248:	e7d7      	b.n	11fa <Can_MsgType+0x42>
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    124a:	2008      	movs	r0, #8
    124c:	e7c1      	b.n	11d2 <Can_MsgType+0x1a>
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    124e:	2014      	movs	r0, #20
    1250:	e7bf      	b.n	11d2 <Can_MsgType+0x1a>
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    1252:	2012      	movs	r0, #18
    1254:	e7bd      	b.n	11d2 <Can_MsgType+0x1a>
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    1256:	200d      	movs	r0, #13
    1258:	e7bb      	b.n	11d2 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    125a:	3a01      	subs	r2, #1
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    125c:	2003      	movs	r0, #3
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    125e:	4293      	cmp	r3, r2
    1260:	d0b7      	beq.n	11d2 <Can_MsgType+0x1a>
    1262:	e7ca      	b.n	11fa <Can_MsgType+0x42>
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    1264:	3009      	adds	r0, #9
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    1266:	2bc0      	cmp	r3, #192	; 0xc0
    1268:	d0b3      	beq.n	11d2 <Can_MsgType+0x1a>
    126a:	e7c6      	b.n	11fa <Can_MsgType+0x42>
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    126c:	2007      	movs	r0, #7
    126e:	e7b0      	b.n	11d2 <Can_MsgType+0x1a>
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    1270:	2013      	movs	r0, #19
    1272:	e7ae      	b.n	11d2 <Can_MsgType+0x1a>
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    1274:	2010      	movs	r0, #16
    1276:	e7ac      	b.n	11d2 <Can_MsgType+0x1a>
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    1278:	2015      	movs	r0, #21
    127a:	e7aa      	b.n	11d2 <Can_MsgType+0x1a>
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    127c:	200f      	movs	r0, #15
    127e:	e7a8      	b.n	11d2 <Can_MsgType+0x1a>
    1280:	1000064c 	.word	0x1000064c
    1284:	10000100 	.word	0x10000100
    1288:	00000526 	.word	0x00000526
    128c:	00000521 	.word	0x00000521
    1290:	00000522 	.word	0x00000522
    1294:	00000601 	.word	0x00000601
    1298:	1806e5f4 	.word	0x1806e5f4
    129c:	18ff50e5 	.word	0x18ff50e5

000012a0 <Can_ElconHeartbeat_FromCan>:
  can_out->id = ELCONHEARTBEAT__id;
  can_out->len = 5;
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
    12a0:	2200      	movs	r2, #0
    12a2:	2300      	movs	r3, #0
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONHEARTBEAT__id;
  can_out->len = 5;
}

FROM_CAN(Can_ElconHeartbeat) {
    12a4:	b530      	push	{r4, r5, lr}
    12a6:	b083      	sub	sp, #12
  uint64_t bitstring = 0;
    12a8:	9200      	str	r2, [sp, #0]
    12aa:	9301      	str	r3, [sp, #4]
    12ac:	466a      	mov	r2, sp
    12ae:	1d43      	adds	r3, r0, #5
    12b0:	3207      	adds	r2, #7
    12b2:	300d      	adds	r0, #13
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    12b4:	781c      	ldrb	r4, [r3, #0]
    12b6:	3301      	adds	r3, #1
    12b8:	7014      	strb	r4, [r2, #0]
    12ba:	3a01      	subs	r2, #1
  uint64_t bitstring;
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    12bc:	4283      	cmp	r3, r0
    12be:	d1f9      	bne.n	12b4 <Can_ElconHeartbeat_FromCan+0x14>
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
    12c0:	9a01      	ldr	r2, [sp, #4]
    12c2:	9b00      	ldr	r3, [sp, #0]
    12c4:	0110      	lsls	r0, r2, #4
    12c6:	0f1c      	lsrs	r4, r3, #28
    12c8:	4304      	orrs	r4, r0
    12ca:	2001      	movs	r0, #1
    12cc:	4004      	ands	r4, r0
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
    12ce:	0095      	lsls	r5, r2, #2
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
    12d0:	700c      	strb	r4, [r1, #0]
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
    12d2:	0f9c      	lsrs	r4, r3, #30
    12d4:	432c      	orrs	r4, r5
    12d6:	4004      	ands	r4, r0
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    12d8:	00d5      	lsls	r5, r2, #3

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
    12da:	704c      	strb	r4, [r1, #1]
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    12dc:	0f5c      	lsrs	r4, r3, #29
    12de:	432c      	orrs	r4, r5
    12e0:	4004      	ands	r4, r0
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
    12e2:	0155      	lsls	r5, r2, #5
FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    12e4:	708c      	strb	r4, [r1, #2]
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
    12e6:	0edc      	lsrs	r4, r3, #27
    12e8:	432c      	orrs	r4, r5
    12ea:	4004      	ands	r4, r0
    12ec:	70cc      	strb	r4, [r1, #3]
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
  type_out->output_current = EXTRACT(bitstring, 16, 16);
    12ee:	80ca      	strh	r2, [r1, #6]
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
    12f0:	0c14      	lsrs	r4, r2, #16
  type_out->output_current = EXTRACT(bitstring, 16, 16);
  type_out->has_hardware_failure = EXTRACT(bitstring, 32, 1);
    12f2:	0fdb      	lsrs	r3, r3, #31
    12f4:	0052      	lsls	r2, r2, #1
    12f6:	4313      	orrs	r3, r2
    12f8:	4003      	ands	r3, r0
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
    12fa:	808c      	strh	r4, [r1, #4]
  type_out->output_current = EXTRACT(bitstring, 16, 16);
  type_out->has_hardware_failure = EXTRACT(bitstring, 32, 1);
    12fc:	720b      	strb	r3, [r1, #8]
}
    12fe:	b003      	add	sp, #12
    1300:	bd30      	pop	{r4, r5, pc}
    1302:	46c0      	nop			; (mov r8, r8)

00001304 <Can_BmsPackStatus_FromCan>:
  can_out->id = BMSPACKSTATUS__id;
  can_out->len = 7;
}

FROM_CAN(Can_BmsPackStatus) {
  uint64_t bitstring = 0;
    1304:	2200      	movs	r2, #0
    1306:	2300      	movs	r3, #0
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMSPACKSTATUS__id;
  can_out->len = 7;
}

FROM_CAN(Can_BmsPackStatus) {
    1308:	b510      	push	{r4, lr}
    130a:	b082      	sub	sp, #8
  uint64_t bitstring = 0;
    130c:	9200      	str	r2, [sp, #0]
    130e:	9301      	str	r3, [sp, #4]
    1310:	466a      	mov	r2, sp
    1312:	1d43      	adds	r3, r0, #5
    1314:	3207      	adds	r2, #7
    1316:	300d      	adds	r0, #13
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    1318:	781c      	ldrb	r4, [r3, #0]
    131a:	3301      	adds	r3, #1
    131c:	7014      	strb	r4, [r2, #0]
    131e:	3a01      	subs	r2, #1
  uint64_t bitstring;
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    1320:	4283      	cmp	r3, r0
    1322:	d1f9      	bne.n	1318 <Can_BmsPackStatus_FromCan+0x14>
}

FROM_CAN(Can_BmsPackStatus) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
    1324:	207f      	movs	r0, #127	; 0x7f
    1326:	0004      	movs	r4, r0
    1328:	9b00      	ldr	r3, [sp, #0]
    132a:	9a01      	ldr	r2, [sp, #4]
    132c:	401c      	ands	r4, r3
    132e:	700c      	strb	r4, [r1, #0]
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
    1330:	0dd4      	lsrs	r4, r2, #23
    1332:	804c      	strh	r4, [r1, #2]
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
    1334:	0c5c      	lsrs	r4, r3, #17
    1336:	4020      	ands	r0, r4
    1338:	7108      	strb	r0, [r1, #4]
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
    133a:	03d8      	lsls	r0, r3, #15
    133c:	0d80      	lsrs	r0, r0, #22
    133e:	80c8      	strh	r0, [r1, #6]
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
    1340:	0250      	lsls	r0, r2, #9
    1342:	1540      	asrs	r0, r0, #21
    1344:	8108      	strh	r0, [r1, #8]
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    1346:	0e1b      	lsrs	r3, r3, #24
    1348:	0210      	lsls	r0, r2, #8
    134a:	4303      	orrs	r3, r0
    134c:	059b      	lsls	r3, r3, #22
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
    134e:	0512      	lsls	r2, r2, #20
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    1350:	0d9b      	lsrs	r3, r3, #22
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
    1352:	0fd2      	lsrs	r2, r2, #31
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    1354:	814b      	strh	r3, [r1, #10]
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
    1356:	730a      	strb	r2, [r1, #12]
}
    1358:	b002      	add	sp, #8
    135a:	bd10      	pop	{r4, pc}

0000135c <Can_BMS_CSB_Switch_Write>:
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->state = EXTRACT(bitstring, 0, 1);
}

DEFINE(Can_BMS_CSB_Switch)
    135c:	b500      	push	{lr}
    135e:	b085      	sub	sp, #20
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    1360:	2200      	movs	r2, #0
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    1362:	4669      	mov	r1, sp
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    1364:	7803      	ldrb	r3, [r0, #0]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    1366:	4668      	mov	r0, sp
    1368:	730a      	strb	r2, [r1, #12]
    136a:	72ca      	strb	r2, [r1, #11]
    136c:	728a      	strb	r2, [r1, #10]
    136e:	2100      	movs	r1, #0
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    1370:	07db      	lsls	r3, r3, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    1372:	7203      	strb	r3, [r0, #8]
    1374:	0e1b      	lsrs	r3, r3, #24
    1376:	7241      	strb	r1, [r0, #9]
    1378:	71c2      	strb	r2, [r0, #7]
    137a:	4669      	mov	r1, sp
    137c:	7182      	strb	r2, [r0, #6]
    137e:	7143      	strb	r3, [r0, #5]
TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
  can_out->len = 1;
    1380:	2301      	movs	r3, #1

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
    1382:	20c0      	movs	r0, #192	; 0xc0
  can_out->len = 1;
    1384:	710b      	strb	r3, [r1, #4]

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
    1386:	00c0      	lsls	r0, r0, #3
Can_ErrorID_T Can_RawWrite(Frame *frame) {
  const uint32_t can_out_id = (uint32_t) (frame->id);
  const uint8_t can_out_bytes = frame->len;

  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err =  (Can_ErrorID_T) CAN_Transmit(can_out_id, frame->data, can_out_bytes);
    1388:	2201      	movs	r2, #1
    138a:	3105      	adds	r1, #5
    138c:	9000      	str	r0, [sp, #0]
    138e:	f7ff feaf 	bl	10f0 <CAN_Transmit>
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->state = EXTRACT(bitstring, 0, 1);
}

DEFINE(Can_BMS_CSB_Switch)
    1392:	b005      	add	sp, #20
    1394:	bd00      	pop	{pc}
    1396:	46c0      	nop			; (mov r8, r8)

00001398 <Can_ElconHeartbeat_Read>:
DEFINE(Can_CurrentSensor_Current)
DEFINE(Can_CurrentSensor_Voltage)
DEFINE(Can_ElconHeartbeat)
    1398:	b570      	push	{r4, r5, r6, lr}
    139a:	4d06      	ldr	r5, [pc, #24]	; (13b4 <Can_ElconHeartbeat_Read+0x1c>)
    139c:	782c      	ldrb	r4, [r5, #0]
    139e:	2c00      	cmp	r4, #0
    13a0:	d105      	bne.n	13ae <Can_ElconHeartbeat_Read+0x16>
    13a2:	0001      	movs	r1, r0
    13a4:	4804      	ldr	r0, [pc, #16]	; (13b8 <Can_ElconHeartbeat_Read+0x20>)
    13a6:	f7ff ff7b 	bl	12a0 <Can_ElconHeartbeat_FromCan>
    13aa:	2301      	movs	r3, #1
    13ac:	702b      	strb	r3, [r5, #0]
    13ae:	0020      	movs	r0, r4
    13b0:	bd70      	pop	{r4, r5, r6, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	10000100 	.word	0x10000100
    13b8:	1000064c 	.word	0x1000064c

000013bc <Can_BMS_Mode_Write>:
DEFINE(Can_CurrentSensor_Power)
DEFINE(Can_BMS_Mode)
    13bc:	b500      	push	{lr}
    13be:	b085      	sub	sp, #20
  type_out->power = EXTRACT(bitstring, 16, 32);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    13c0:	2200      	movs	r2, #0
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    13c2:	4669      	mov	r1, sp
  type_out->power = EXTRACT(bitstring, 16, 32);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    13c4:	7803      	ldrb	r3, [r0, #0]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    13c6:	4668      	mov	r0, sp
    13c8:	730a      	strb	r2, [r1, #12]
    13ca:	72ca      	strb	r2, [r1, #11]
    13cc:	728a      	strb	r2, [r1, #10]
    13ce:	2100      	movs	r1, #0
  type_out->power = EXTRACT(bitstring, 16, 32);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    13d0:	07db      	lsls	r3, r3, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    13d2:	7203      	strb	r3, [r0, #8]
    13d4:	0e1b      	lsrs	r3, r3, #24
    13d6:	7241      	strb	r1, [r0, #9]
    13d8:	7143      	strb	r3, [r0, #5]
    13da:	4669      	mov	r1, sp
TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
  can_out->len = 1;
    13dc:	2301      	movs	r3, #1
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    13de:	71c2      	strb	r2, [r0, #7]
    13e0:	7182      	strb	r2, [r0, #6]

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
    13e2:	4804      	ldr	r0, [pc, #16]	; (13f4 <Can_BMS_Mode_Write+0x38>)
  can_out->len = 1;
    13e4:	710b      	strb	r3, [r1, #4]
    13e6:	2201      	movs	r2, #1
    13e8:	3105      	adds	r1, #5

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
    13ea:	9000      	str	r0, [sp, #0]
    13ec:	f7ff fe80 	bl	10f0 <CAN_Transmit>
DEFINE(Can_BMS_CSB_Switch)
DEFINE(Can_CurrentSensor_Current)
DEFINE(Can_CurrentSensor_Voltage)
DEFINE(Can_ElconHeartbeat)
DEFINE(Can_CurrentSensor_Power)
DEFINE(Can_BMS_Mode)
    13f0:	b005      	add	sp, #20
    13f2:	bd00      	pop	{pc}
    13f4:	00000601 	.word	0x00000601

000013f8 <Can_BmsPackStatus_Read>:
DEFINE(Can_FrontCanNodeWheelSpeed)
DEFINE(Can_MC_Command)
DEFINE(Can_Dash_Request)
DEFINE(Can_FrontCanNodeOutput)
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	4d06      	ldr	r5, [pc, #24]	; (1414 <Can_BmsPackStatus_Read+0x1c>)
    13fc:	782c      	ldrb	r4, [r5, #0]
    13fe:	2c00      	cmp	r4, #0
    1400:	d105      	bne.n	140e <Can_BmsPackStatus_Read+0x16>
    1402:	0001      	movs	r1, r0
    1404:	4804      	ldr	r0, [pc, #16]	; (1418 <Can_BmsPackStatus_Read+0x20>)
    1406:	f7ff ff7d 	bl	1304 <Can_BmsPackStatus_FromCan>
    140a:	2301      	movs	r3, #1
    140c:	702b      	strb	r3, [r5, #0]
    140e:	0020      	movs	r0, r4
    1410:	bd70      	pop	{r4, r5, r6, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	10000100 	.word	0x10000100
    1418:	1000064c 	.word	0x1000064c

0000141c <Can_ElconCommand_Write>:
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconCommand)
    141c:	b500      	push	{lr}

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    141e:	8883      	ldrh	r3, [r0, #4]
    1420:	8802      	ldrh	r2, [r0, #0]
DEFINE(Can_Dash_Request)
DEFINE(Can_FrontCanNodeOutput)
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconCommand)
    1422:	b085      	sub	sp, #20

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    1424:	041b      	lsls	r3, r3, #16
    1426:	4313      	orrs	r3, r2
    1428:	7882      	ldrb	r2, [r0, #2]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    142a:	4668      	mov	r0, sp

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    142c:	2100      	movs	r1, #0
    142e:	07d2      	lsls	r2, r2, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    1430:	7302      	strb	r2, [r0, #12]
    1432:	0e12      	lsrs	r2, r2, #24
    1434:	7242      	strb	r2, [r0, #9]
    1436:	0a1a      	lsrs	r2, r3, #8
    1438:	7203      	strb	r3, [r0, #8]
    143a:	71c2      	strb	r2, [r0, #7]
    143c:	0c1a      	lsrs	r2, r3, #16
    143e:	0e1b      	lsrs	r3, r3, #24
    1440:	72c1      	strb	r1, [r0, #11]
    1442:	7281      	strb	r1, [r0, #10]
    1444:	7143      	strb	r3, [r0, #5]
    1446:	4669      	mov	r1, sp
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
  can_out->len = 5;
    1448:	2305      	movs	r3, #5
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    144a:	7182      	strb	r2, [r0, #6]
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
    144c:	4804      	ldr	r0, [pc, #16]	; (1460 <Can_ElconCommand_Write+0x44>)
  can_out->len = 5;
    144e:	710b      	strb	r3, [r1, #4]
    1450:	2205      	movs	r2, #5
    1452:	3105      	adds	r1, #5
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
    1454:	9000      	str	r0, [sp, #0]
    1456:	f7ff fe4b 	bl	10f0 <CAN_Transmit>
DEFINE(Can_Dash_Request)
DEFINE(Can_FrontCanNodeOutput)
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconCommand)
    145a:	b005      	add	sp, #20
    145c:	bd00      	pop	{pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	1806e5f4 	.word	0x1806e5f4

00001464 <__aeabi_uidiv>:
    1464:	2200      	movs	r2, #0
    1466:	0843      	lsrs	r3, r0, #1
    1468:	428b      	cmp	r3, r1
    146a:	d374      	bcc.n	1556 <__aeabi_uidiv+0xf2>
    146c:	0903      	lsrs	r3, r0, #4
    146e:	428b      	cmp	r3, r1
    1470:	d35f      	bcc.n	1532 <__aeabi_uidiv+0xce>
    1472:	0a03      	lsrs	r3, r0, #8
    1474:	428b      	cmp	r3, r1
    1476:	d344      	bcc.n	1502 <__aeabi_uidiv+0x9e>
    1478:	0b03      	lsrs	r3, r0, #12
    147a:	428b      	cmp	r3, r1
    147c:	d328      	bcc.n	14d0 <__aeabi_uidiv+0x6c>
    147e:	0c03      	lsrs	r3, r0, #16
    1480:	428b      	cmp	r3, r1
    1482:	d30d      	bcc.n	14a0 <__aeabi_uidiv+0x3c>
    1484:	22ff      	movs	r2, #255	; 0xff
    1486:	0209      	lsls	r1, r1, #8
    1488:	ba12      	rev	r2, r2
    148a:	0c03      	lsrs	r3, r0, #16
    148c:	428b      	cmp	r3, r1
    148e:	d302      	bcc.n	1496 <__aeabi_uidiv+0x32>
    1490:	1212      	asrs	r2, r2, #8
    1492:	0209      	lsls	r1, r1, #8
    1494:	d065      	beq.n	1562 <__aeabi_uidiv+0xfe>
    1496:	0b03      	lsrs	r3, r0, #12
    1498:	428b      	cmp	r3, r1
    149a:	d319      	bcc.n	14d0 <__aeabi_uidiv+0x6c>
    149c:	e000      	b.n	14a0 <__aeabi_uidiv+0x3c>
    149e:	0a09      	lsrs	r1, r1, #8
    14a0:	0bc3      	lsrs	r3, r0, #15
    14a2:	428b      	cmp	r3, r1
    14a4:	d301      	bcc.n	14aa <__aeabi_uidiv+0x46>
    14a6:	03cb      	lsls	r3, r1, #15
    14a8:	1ac0      	subs	r0, r0, r3
    14aa:	4152      	adcs	r2, r2
    14ac:	0b83      	lsrs	r3, r0, #14
    14ae:	428b      	cmp	r3, r1
    14b0:	d301      	bcc.n	14b6 <__aeabi_uidiv+0x52>
    14b2:	038b      	lsls	r3, r1, #14
    14b4:	1ac0      	subs	r0, r0, r3
    14b6:	4152      	adcs	r2, r2
    14b8:	0b43      	lsrs	r3, r0, #13
    14ba:	428b      	cmp	r3, r1
    14bc:	d301      	bcc.n	14c2 <__aeabi_uidiv+0x5e>
    14be:	034b      	lsls	r3, r1, #13
    14c0:	1ac0      	subs	r0, r0, r3
    14c2:	4152      	adcs	r2, r2
    14c4:	0b03      	lsrs	r3, r0, #12
    14c6:	428b      	cmp	r3, r1
    14c8:	d301      	bcc.n	14ce <__aeabi_uidiv+0x6a>
    14ca:	030b      	lsls	r3, r1, #12
    14cc:	1ac0      	subs	r0, r0, r3
    14ce:	4152      	adcs	r2, r2
    14d0:	0ac3      	lsrs	r3, r0, #11
    14d2:	428b      	cmp	r3, r1
    14d4:	d301      	bcc.n	14da <__aeabi_uidiv+0x76>
    14d6:	02cb      	lsls	r3, r1, #11
    14d8:	1ac0      	subs	r0, r0, r3
    14da:	4152      	adcs	r2, r2
    14dc:	0a83      	lsrs	r3, r0, #10
    14de:	428b      	cmp	r3, r1
    14e0:	d301      	bcc.n	14e6 <__aeabi_uidiv+0x82>
    14e2:	028b      	lsls	r3, r1, #10
    14e4:	1ac0      	subs	r0, r0, r3
    14e6:	4152      	adcs	r2, r2
    14e8:	0a43      	lsrs	r3, r0, #9
    14ea:	428b      	cmp	r3, r1
    14ec:	d301      	bcc.n	14f2 <__aeabi_uidiv+0x8e>
    14ee:	024b      	lsls	r3, r1, #9
    14f0:	1ac0      	subs	r0, r0, r3
    14f2:	4152      	adcs	r2, r2
    14f4:	0a03      	lsrs	r3, r0, #8
    14f6:	428b      	cmp	r3, r1
    14f8:	d301      	bcc.n	14fe <__aeabi_uidiv+0x9a>
    14fa:	020b      	lsls	r3, r1, #8
    14fc:	1ac0      	subs	r0, r0, r3
    14fe:	4152      	adcs	r2, r2
    1500:	d2cd      	bcs.n	149e <__aeabi_uidiv+0x3a>
    1502:	09c3      	lsrs	r3, r0, #7
    1504:	428b      	cmp	r3, r1
    1506:	d301      	bcc.n	150c <__aeabi_uidiv+0xa8>
    1508:	01cb      	lsls	r3, r1, #7
    150a:	1ac0      	subs	r0, r0, r3
    150c:	4152      	adcs	r2, r2
    150e:	0983      	lsrs	r3, r0, #6
    1510:	428b      	cmp	r3, r1
    1512:	d301      	bcc.n	1518 <__aeabi_uidiv+0xb4>
    1514:	018b      	lsls	r3, r1, #6
    1516:	1ac0      	subs	r0, r0, r3
    1518:	4152      	adcs	r2, r2
    151a:	0943      	lsrs	r3, r0, #5
    151c:	428b      	cmp	r3, r1
    151e:	d301      	bcc.n	1524 <__aeabi_uidiv+0xc0>
    1520:	014b      	lsls	r3, r1, #5
    1522:	1ac0      	subs	r0, r0, r3
    1524:	4152      	adcs	r2, r2
    1526:	0903      	lsrs	r3, r0, #4
    1528:	428b      	cmp	r3, r1
    152a:	d301      	bcc.n	1530 <__aeabi_uidiv+0xcc>
    152c:	010b      	lsls	r3, r1, #4
    152e:	1ac0      	subs	r0, r0, r3
    1530:	4152      	adcs	r2, r2
    1532:	08c3      	lsrs	r3, r0, #3
    1534:	428b      	cmp	r3, r1
    1536:	d301      	bcc.n	153c <__aeabi_uidiv+0xd8>
    1538:	00cb      	lsls	r3, r1, #3
    153a:	1ac0      	subs	r0, r0, r3
    153c:	4152      	adcs	r2, r2
    153e:	0883      	lsrs	r3, r0, #2
    1540:	428b      	cmp	r3, r1
    1542:	d301      	bcc.n	1548 <__aeabi_uidiv+0xe4>
    1544:	008b      	lsls	r3, r1, #2
    1546:	1ac0      	subs	r0, r0, r3
    1548:	4152      	adcs	r2, r2
    154a:	0843      	lsrs	r3, r0, #1
    154c:	428b      	cmp	r3, r1
    154e:	d301      	bcc.n	1554 <__aeabi_uidiv+0xf0>
    1550:	004b      	lsls	r3, r1, #1
    1552:	1ac0      	subs	r0, r0, r3
    1554:	4152      	adcs	r2, r2
    1556:	1a41      	subs	r1, r0, r1
    1558:	d200      	bcs.n	155c <__aeabi_uidiv+0xf8>
    155a:	4601      	mov	r1, r0
    155c:	4152      	adcs	r2, r2
    155e:	4610      	mov	r0, r2
    1560:	4770      	bx	lr
    1562:	e7ff      	b.n	1564 <__aeabi_uidiv+0x100>
    1564:	b501      	push	{r0, lr}
    1566:	2000      	movs	r0, #0
    1568:	f000 f806 	bl	1578 <__aeabi_idiv0>
    156c:	bd02      	pop	{r1, pc}
    156e:	46c0      	nop			; (mov r8, r8)

00001570 <__aeabi_uidivmod>:
    1570:	2900      	cmp	r1, #0
    1572:	d0f7      	beq.n	1564 <__aeabi_uidiv+0x100>
    1574:	e776      	b.n	1464 <__aeabi_uidiv>
    1576:	4770      	bx	lr

00001578 <__aeabi_idiv0>:
    1578:	4770      	bx	lr
    157a:	46c0      	nop			; (mov r8, r8)

0000157c <memcpy>:
    157c:	b570      	push	{r4, r5, r6, lr}
    157e:	2a0f      	cmp	r2, #15
    1580:	d932      	bls.n	15e8 <memcpy+0x6c>
    1582:	000c      	movs	r4, r1
    1584:	4304      	orrs	r4, r0
    1586:	000b      	movs	r3, r1
    1588:	07a4      	lsls	r4, r4, #30
    158a:	d131      	bne.n	15f0 <memcpy+0x74>
    158c:	0015      	movs	r5, r2
    158e:	0004      	movs	r4, r0
    1590:	3d10      	subs	r5, #16
    1592:	092d      	lsrs	r5, r5, #4
    1594:	3501      	adds	r5, #1
    1596:	012d      	lsls	r5, r5, #4
    1598:	1949      	adds	r1, r1, r5
    159a:	681e      	ldr	r6, [r3, #0]
    159c:	6026      	str	r6, [r4, #0]
    159e:	685e      	ldr	r6, [r3, #4]
    15a0:	6066      	str	r6, [r4, #4]
    15a2:	689e      	ldr	r6, [r3, #8]
    15a4:	60a6      	str	r6, [r4, #8]
    15a6:	68de      	ldr	r6, [r3, #12]
    15a8:	3310      	adds	r3, #16
    15aa:	60e6      	str	r6, [r4, #12]
    15ac:	3410      	adds	r4, #16
    15ae:	4299      	cmp	r1, r3
    15b0:	d1f3      	bne.n	159a <memcpy+0x1e>
    15b2:	230f      	movs	r3, #15
    15b4:	1945      	adds	r5, r0, r5
    15b6:	4013      	ands	r3, r2
    15b8:	2b03      	cmp	r3, #3
    15ba:	d91b      	bls.n	15f4 <memcpy+0x78>
    15bc:	1f1c      	subs	r4, r3, #4
    15be:	2300      	movs	r3, #0
    15c0:	08a4      	lsrs	r4, r4, #2
    15c2:	3401      	adds	r4, #1
    15c4:	00a4      	lsls	r4, r4, #2
    15c6:	58ce      	ldr	r6, [r1, r3]
    15c8:	50ee      	str	r6, [r5, r3]
    15ca:	3304      	adds	r3, #4
    15cc:	429c      	cmp	r4, r3
    15ce:	d1fa      	bne.n	15c6 <memcpy+0x4a>
    15d0:	2303      	movs	r3, #3
    15d2:	192d      	adds	r5, r5, r4
    15d4:	1909      	adds	r1, r1, r4
    15d6:	401a      	ands	r2, r3
    15d8:	d005      	beq.n	15e6 <memcpy+0x6a>
    15da:	2300      	movs	r3, #0
    15dc:	5ccc      	ldrb	r4, [r1, r3]
    15de:	54ec      	strb	r4, [r5, r3]
    15e0:	3301      	adds	r3, #1
    15e2:	429a      	cmp	r2, r3
    15e4:	d1fa      	bne.n	15dc <memcpy+0x60>
    15e6:	bd70      	pop	{r4, r5, r6, pc}
    15e8:	0005      	movs	r5, r0
    15ea:	2a00      	cmp	r2, #0
    15ec:	d1f5      	bne.n	15da <memcpy+0x5e>
    15ee:	e7fa      	b.n	15e6 <memcpy+0x6a>
    15f0:	0005      	movs	r5, r0
    15f2:	e7f2      	b.n	15da <memcpy+0x5e>
    15f4:	001a      	movs	r2, r3
    15f6:	e7f8      	b.n	15ea <memcpy+0x6e>

000015f8 <memset>:
    15f8:	b570      	push	{r4, r5, r6, lr}
    15fa:	0783      	lsls	r3, r0, #30
    15fc:	d03f      	beq.n	167e <memset+0x86>
    15fe:	1e54      	subs	r4, r2, #1
    1600:	2a00      	cmp	r2, #0
    1602:	d03b      	beq.n	167c <memset+0x84>
    1604:	b2ce      	uxtb	r6, r1
    1606:	0003      	movs	r3, r0
    1608:	2503      	movs	r5, #3
    160a:	e003      	b.n	1614 <memset+0x1c>
    160c:	1e62      	subs	r2, r4, #1
    160e:	2c00      	cmp	r4, #0
    1610:	d034      	beq.n	167c <memset+0x84>
    1612:	0014      	movs	r4, r2
    1614:	3301      	adds	r3, #1
    1616:	1e5a      	subs	r2, r3, #1
    1618:	7016      	strb	r6, [r2, #0]
    161a:	422b      	tst	r3, r5
    161c:	d1f6      	bne.n	160c <memset+0x14>
    161e:	2c03      	cmp	r4, #3
    1620:	d924      	bls.n	166c <memset+0x74>
    1622:	25ff      	movs	r5, #255	; 0xff
    1624:	400d      	ands	r5, r1
    1626:	022a      	lsls	r2, r5, #8
    1628:	4315      	orrs	r5, r2
    162a:	042a      	lsls	r2, r5, #16
    162c:	4315      	orrs	r5, r2
    162e:	2c0f      	cmp	r4, #15
    1630:	d911      	bls.n	1656 <memset+0x5e>
    1632:	0026      	movs	r6, r4
    1634:	3e10      	subs	r6, #16
    1636:	0936      	lsrs	r6, r6, #4
    1638:	3601      	adds	r6, #1
    163a:	0136      	lsls	r6, r6, #4
    163c:	001a      	movs	r2, r3
    163e:	199b      	adds	r3, r3, r6
    1640:	6015      	str	r5, [r2, #0]
    1642:	6055      	str	r5, [r2, #4]
    1644:	6095      	str	r5, [r2, #8]
    1646:	60d5      	str	r5, [r2, #12]
    1648:	3210      	adds	r2, #16
    164a:	4293      	cmp	r3, r2
    164c:	d1f8      	bne.n	1640 <memset+0x48>
    164e:	220f      	movs	r2, #15
    1650:	4014      	ands	r4, r2
    1652:	2c03      	cmp	r4, #3
    1654:	d90a      	bls.n	166c <memset+0x74>
    1656:	1f26      	subs	r6, r4, #4
    1658:	08b6      	lsrs	r6, r6, #2
    165a:	3601      	adds	r6, #1
    165c:	00b6      	lsls	r6, r6, #2
    165e:	001a      	movs	r2, r3
    1660:	199b      	adds	r3, r3, r6
    1662:	c220      	stmia	r2!, {r5}
    1664:	4293      	cmp	r3, r2
    1666:	d1fc      	bne.n	1662 <memset+0x6a>
    1668:	2203      	movs	r2, #3
    166a:	4014      	ands	r4, r2
    166c:	2c00      	cmp	r4, #0
    166e:	d005      	beq.n	167c <memset+0x84>
    1670:	b2c9      	uxtb	r1, r1
    1672:	191c      	adds	r4, r3, r4
    1674:	7019      	strb	r1, [r3, #0]
    1676:	3301      	adds	r3, #1
    1678:	429c      	cmp	r4, r3
    167a:	d1fb      	bne.n	1674 <memset+0x7c>
    167c:	bd70      	pop	{r4, r5, r6, pc}
    167e:	0014      	movs	r4, r2
    1680:	0003      	movs	r3, r0
    1682:	e7cc      	b.n	161e <memset+0x26>

00001684 <OscRateIn>:
    1684:	0000 0000 04be 0000 0456 0000 0536 0000     ........V...6...
    1694:	04fe 0000 04d4 0000 046e 0000 047a 0000     ........n...z...
    16a4:	096c 0000 09bc 0000 099c 0000 09ac 0000     l...............
    16b4:	097c 0000 098e 0000                         |.......

000016bc <wdtOSCRate>:
    16bc:	0000 0000 27c0 0009 0590 0010 5cc0 0015     .....'.......\..
    16cc:	b3f0 001a 0b20 0020 9f00 0024 32e0 0029     .... . ...$..2).
    16dc:	c6c0 002d 9750 0031 67e0 0035 3870 0039     ..-.P.1..g5.p89.
    16ec:	0900 003d 1640 0040 2380 0043 30c0 0046     ..=.@.@..#C..0F.
    16fc:	0ee0 0000 0ef6 0000 0efa 0000 0efe 0000     ................
    170c:	0f02 0000 0f06 0000 0f0a 0000 0d75 0000     ............u...
    171c:	0db9 0000 0d61 0000 0000 0000 0000 0000     ....a...........
	...
