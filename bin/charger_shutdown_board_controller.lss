
bin/charger_shutdown_board_controller.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	10002000 	.word	0x10002000
       4:	000000c1 	.word	0x000000c1
       8:	000000e1 	.word	0x000000e1
       c:	000000e3 	.word	0x000000e3
	...
      2c:	000000e5 	.word	0x000000e5
	...
      38:	000000e7 	.word	0x000000e7
      3c:	00000125 	.word	0x00000125
      40:	000000eb 	.word	0x000000eb
      44:	000000eb 	.word	0x000000eb
      48:	000000eb 	.word	0x000000eb
      4c:	000000eb 	.word	0x000000eb
      50:	000000eb 	.word	0x000000eb
      54:	000000eb 	.word	0x000000eb
      58:	000000eb 	.word	0x000000eb
      5c:	000000eb 	.word	0x000000eb
      60:	000000eb 	.word	0x000000eb
      64:	000000eb 	.word	0x000000eb
      68:	000000eb 	.word	0x000000eb
      6c:	000000eb 	.word	0x000000eb
      70:	000000eb 	.word	0x000000eb
      74:	000020b9 	.word	0x000020b9
      78:	000000eb 	.word	0x000000eb
      7c:	000000eb 	.word	0x000000eb
      80:	000000eb 	.word	0x000000eb
      84:	000000eb 	.word	0x000000eb
      88:	000000eb 	.word	0x000000eb
      8c:	000000eb 	.word	0x000000eb
      90:	000000eb 	.word	0x000000eb
      94:	00000109 	.word	0x00000109
	...
      a0:	000000eb 	.word	0x000000eb
      a4:	000000eb 	.word	0x000000eb
      a8:	000000eb 	.word	0x000000eb
      ac:	00000000 	.word	0x00000000
      b0:	000000eb 	.word	0x000000eb
      b4:	000000eb 	.word	0x000000eb
      b8:	000000eb 	.word	0x000000eb
      bc:	000000eb 	.word	0x000000eb

000000c0 <Reset_Handler>:
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
      c0:	4905      	ldr	r1, [pc, #20]	; (d8 <Reset_Handler+0x18>)
    ldr r2, =__bss_end__
      c2:	4a06      	ldr	r2, [pc, #24]	; (dc <Reset_Handler+0x1c>)

    movs    r0, #0
      c4:	2000      	movs	r0, #0

    sub    r2, r1
      c6:	1a52      	subs	r2, r2, r1
    ble .L_loop3_done
      c8:	dd02      	ble.n	d0 <Reset_Handler+0x10>

.L_loop3:
    sub    r2, #4
      ca:	3a04      	subs	r2, #4
    str r0, [r1, r2]
      cc:	5088      	str	r0, [r1, r2]
    bgt .L_loop3
      ce:	dcfc      	bgt.n	ca <Reset_Handler+0xa>
.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */


#ifndef __NO_SYSTEM_INIT
    bl  SystemInit
      d0:	f001 fcd6 	bl	1a80 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
    bl  __START
      d4:	f000 ffd0 	bl	1078 <main>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
      d8:	10000108 	.word	0x10000108
    ldr r2, =__bss_end__
      dc:	10000a78 	.word	0x10000a78

000000e0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
      e0:	e7fe      	b.n	e0 <NMI_Handler>

000000e2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
      e2:	e7fe      	b.n	e2 <HardFault_Handler>

000000e4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
      e4:	e7fe      	b.n	e4 <SVC_Handler>

000000e6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
      e6:	e7fe      	b.n	e6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
      e8:	e7fe      	b.n	e8 <PendSV_Handler+0x2>

000000ea <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
      ea:	e7fe      	b.n	ea <Default_Handler>

000000ec <handle_can_error.part.1>:
  csb_input->int_fault = Interlock_Pin_Get();
  csb_input->bms_fault = BMS_Pin_Get();
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
      ec:	b510      	push	{r4, lr}
        return;
    }
    if (!isResetting) {
        // We have an error, and should start a reset.
        // TODO change behavior depending on error type.
        isResetting = true;
      ee:	2201      	movs	r2, #1
  csb_input->int_fault = Interlock_Pin_Get();
  csb_input->bms_fault = BMS_Pin_Get();
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
      f0:	0004      	movs	r4, r0
        return;
    }
    if (!isResetting) {
        // We have an error, and should start a reset.
        // TODO change behavior depending on error type.
        isResetting = true;
      f2:	4b04      	ldr	r3, [pc, #16]	; (104 <handle_can_error.part.1+0x18>)
      f4:	701a      	strb	r2, [r3, #0]
        CAN_ResetPeripheral();
      f6:	f001 ffa5 	bl	2044 <CAN_ResetPeripheral>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
      fa:	0020      	movs	r0, r4
      fc:	f002 f91c 	bl	2338 <Can0_Csb_Init>
        CAN_ResetPeripheral();
        Board_Can_Init(baud_rate);
        UNUSED(err);

    }
}
     100:	bd10      	pop	{r4, pc}
     102:	46c0      	nop			; (mov r8, r8)
     104:	100001ec 	.word	0x100001ec

00000108 <UART_IRQHandler>:
void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate);
void Send_Elcon_Command(CSB_OUTPUT_T *csb_output);
void Send_Bms_Switch(void);
void Send_Bms_Mode(CSB_STATE_T *csb_state);

void UART_IRQHandler(void) {
     108:	b510      	push	{r4, lr}
  Chip_UART_IRQRBHandler(LPC_USART, &uart_rx_ring, &uart_tx_ring);
     10a:	4a03      	ldr	r2, [pc, #12]	; (118 <UART_IRQHandler+0x10>)
     10c:	4903      	ldr	r1, [pc, #12]	; (11c <UART_IRQHandler+0x14>)
     10e:	4804      	ldr	r0, [pc, #16]	; (120 <UART_IRQHandler+0x18>)
     110:	f001 fe82 	bl	1e18 <Chip_UART_IRQRBHandler>
}
     114:	bd10      	pop	{r4, pc}
     116:	46c0      	nop			; (mov r8, r8)
     118:	10000170 	.word	0x10000170
     11c:	100001f0 	.word	0x100001f0
     120:	40008000 	.word	0x40008000

00000124 <SysTick_Handler>:

void SysTick_Handler(void) {
  msTicks++;
     124:	4a02      	ldr	r2, [pc, #8]	; (130 <SysTick_Handler+0xc>)
     126:	6813      	ldr	r3, [r2, #0]
     128:	3301      	adds	r3, #1
     12a:	6013      	str	r3, [r2, #0]
}
     12c:	4770      	bx	lr
     12e:	46c0      	nop			; (mov r8, r8)
     130:	10000724 	.word	0x10000724

00000134 <Board_Chip_Init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     134:	21fa      	movs	r1, #250	; 0xfa

void Board_Chip_Init(void) {
  SysTick_Config(Hertz2Ticks(1000));
     136:	4b0b      	ldr	r3, [pc, #44]	; (164 <Board_Chip_Init+0x30>)

void SysTick_Handler(void) {
  msTicks++;
}

void Board_Chip_Init(void) {
     138:	b510      	push	{r4, lr}
     13a:	6818      	ldr	r0, [r3, #0]
     13c:	0089      	lsls	r1, r1, #2
     13e:	f002 fa61 	bl	2604 <__aeabi_uidiv>
     142:	4a09      	ldr	r2, [pc, #36]	; (168 <Board_Chip_Init+0x34>)
     144:	3801      	subs	r0, #1
     146:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     148:	20c0      	movs	r0, #192	; 0xc0
     14a:	4908      	ldr	r1, [pc, #32]	; (16c <Board_Chip_Init+0x38>)
     14c:	0600      	lsls	r0, r0, #24
     14e:	6a0b      	ldr	r3, [r1, #32]
     150:	021b      	lsls	r3, r3, #8
     152:	0a1b      	lsrs	r3, r3, #8
     154:	4303      	orrs	r3, r0
     156:	620b      	str	r3, [r1, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     158:	2300      	movs	r3, #0
     15a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     15c:	3307      	adds	r3, #7
     15e:	6013      	str	r3, [r2, #0]
  SysTick_Config(Hertz2Ticks(1000));
}
     160:	bd10      	pop	{r4, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	10000728 	.word	0x10000728
     168:	e000e010 	.word	0xe000e010
     16c:	e000ed00 	.word	0xe000ed00

00000170 <Board_Print>:

uint32_t Board_Print(const char *str) {
     170:	b510      	push	{r4, lr}
     172:	0004      	movs	r4, r0
  return Chip_UART_SendRB(LPC_USART, &uart_tx_ring, str, strlen(str));
     174:	f002 fbe6 	bl	2944 <strlen>
     178:	0022      	movs	r2, r4
     17a:	0003      	movs	r3, r0
     17c:	4902      	ldr	r1, [pc, #8]	; (188 <Board_Print+0x18>)
     17e:	4803      	ldr	r0, [pc, #12]	; (18c <Board_Print+0x1c>)
     180:	f001 fe1c 	bl	1dbc <Chip_UART_SendRB>
}
     184:	bd10      	pop	{r4, pc}
     186:	46c0      	nop			; (mov r8, r8)
     188:	10000170 	.word	0x10000170
     18c:	40008000 	.word	0x40008000

00000190 <Board_Println>:
void Board_BlockingDelay(uint32_t dlyTicks) {
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
}

uint32_t Board_Println(const char *str) {
     190:	b510      	push	{r4, lr}
  uint32_t count = Board_Print(str);
     192:	f7ff ffed 	bl	170 <Board_Print>
     196:	0004      	movs	r4, r0
  return count + Board_Print("\r\n");
     198:	4802      	ldr	r0, [pc, #8]	; (1a4 <Board_Println+0x14>)
     19a:	f7ff ffe9 	bl	170 <Board_Print>
     19e:	1820      	adds	r0, r4, r0
}
     1a0:	bd10      	pop	{r4, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	00002a44 	.word	0x00002a44

000001a8 <Board_Read>:

uint32_t Board_Write(const char *str, uint32_t count) {
  return Chip_UART_SendRB(LPC_USART, &uart_tx_ring, str, count);
}

uint32_t Board_Read(char *charBuffer, uint32_t length) {
     1a8:	b510      	push	{r4, lr}
     1aa:	0002      	movs	r2, r0
     1ac:	000b      	movs	r3, r1
  return Chip_UART_ReadRB(LPC_USART, &uart_rx_ring, charBuffer, length);
     1ae:	4802      	ldr	r0, [pc, #8]	; (1b8 <Board_Read+0x10>)
     1b0:	4902      	ldr	r1, [pc, #8]	; (1bc <Board_Read+0x14>)
     1b2:	f001 fe29 	bl	1e08 <Chip_UART_ReadRB>
}
     1b6:	bd10      	pop	{r4, pc}
     1b8:	40008000 	.word	0x40008000
     1bc:	100001f0 	.word	0x100001f0

000001c0 <Board_Print_BLOCKING>:

// USE THESE SPARINGLY. ONLY WHEN A PRINT WOULD RESULT IN A BUFFER OVERFLOW
uint32_t Board_Print_BLOCKING(const char *str) {
     1c0:	b510      	push	{r4, lr}
     1c2:	0004      	movs	r4, r0
  return Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
     1c4:	f002 fbbe 	bl	2944 <strlen>
     1c8:	0021      	movs	r1, r4
     1ca:	0002      	movs	r2, r0
     1cc:	4801      	ldr	r0, [pc, #4]	; (1d4 <Board_Print_BLOCKING+0x14>)
     1ce:	f001 fdc7 	bl	1d60 <Chip_UART_SendBlocking>
}
     1d2:	bd10      	pop	{r4, pc}
     1d4:	40008000 	.word	0x40008000

000001d8 <Board_Println_BLOCKING>:

uint32_t Board_Println_BLOCKING(const char *str) {
     1d8:	b510      	push	{r4, lr}
  uint32_t count = Board_Print_BLOCKING(str);
     1da:	f7ff fff1 	bl	1c0 <Board_Print_BLOCKING>
     1de:	0004      	movs	r4, r0
  return count + Board_Print_BLOCKING("\r\n");
     1e0:	4802      	ldr	r0, [pc, #8]	; (1ec <Board_Println_BLOCKING+0x14>)
     1e2:	f7ff ffed 	bl	1c0 <Board_Print_BLOCKING>
     1e6:	1820      	adds	r0, r4, r0
}
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	00002a44 	.word	0x00002a44

000001f0 <Board_Can_Init>:

void Board_Can_Init(uint32_t baud_rate) {
     1f0:	b510      	push	{r4, lr}
  Can0_Csb_Init(baud_rate);
     1f2:	f002 f8a1 	bl	2338 <Can0_Csb_Init>
}
     1f6:	bd10      	pop	{r4, pc}

000001f8 <Board_UART_Init>:

void Board_UART_Init(uint32_t baudRateHz) {
     1f8:	b570      	push	{r4, r5, r6, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
     1fa:	2400      	movs	r4, #0
  // Initialize UART Buffers
  RingBuffer_Init(&uart_rx_ring, _uart_rx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     1fc:	4d18      	ldr	r5, [pc, #96]	; (260 <Stack_Size+0x60>)

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
}

void Board_UART_Init(uint32_t baudRateHz) {
     1fe:	0006      	movs	r6, r0
  // Initialize UART Buffers
  RingBuffer_Init(&uart_rx_ring, _uart_rx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     200:	2364      	movs	r3, #100	; 0x64
     202:	2201      	movs	r2, #1
     204:	4917      	ldr	r1, [pc, #92]	; (264 <Stack_Size+0x64>)
     206:	0028      	movs	r0, r5
     208:	f001 fcc4 	bl	1b94 <RingBuffer_Init>
     20c:	612c      	str	r4, [r5, #16]
     20e:	60ec      	str	r4, [r5, #12]
  RingBuffer_Flush(&uart_rx_ring);
  RingBuffer_Init(&uart_tx_ring, _uart_tx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     210:	4d15      	ldr	r5, [pc, #84]	; (268 <Stack_Size+0x68>)
     212:	4916      	ldr	r1, [pc, #88]	; (26c <Stack_Size+0x6c>)
     214:	2364      	movs	r3, #100	; 0x64
     216:	2201      	movs	r2, #1
     218:	0028      	movs	r0, r5
     21a:	f001 fcbb 	bl	1b94 <RingBuffer_Init>
     21e:	612c      	str	r4, [r5, #16]
     220:	60ec      	str	r4, [r5, #12]
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
     222:	22a4      	movs	r2, #164	; 0xa4
     224:	2501      	movs	r5, #1
     226:	4b12      	ldr	r3, [pc, #72]	; (270 <Stack_Size+0x70>)
  RingBuffer_Flush(&uart_tx_ring);

  Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_6, (IOCON_FUNC1 | IOCON_MODE_INACT));/* RXD */
  Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_7, (IOCON_FUNC1 | IOCON_MODE_INACT));/* TXD */

  Chip_UART_Init(LPC_USART);
     228:	4c12      	ldr	r4, [pc, #72]	; (274 <Stack_Size+0x74>)
     22a:	509d      	str	r5, [r3, r2]
     22c:	3204      	adds	r2, #4
     22e:	509d      	str	r5, [r3, r2]
     230:	0020      	movs	r0, r4
     232:	f001 fd81 	bl	1d38 <Chip_UART_Init>
  Chip_UART_SetBaudFDR(LPC_USART, baudRateHz);
     236:	0031      	movs	r1, r6
     238:	0020      	movs	r0, r4
     23a:	f001 fe13 	bl	1e64 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
     23e:	2303      	movs	r3, #3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     240:	2280      	movs	r2, #128	; 0x80
     242:	21c0      	movs	r1, #192	; 0xc0
     244:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
     246:	337e      	adds	r3, #126	; 0x7e
     248:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
     24a:	3b01      	subs	r3, #1
     24c:	6323      	str	r3, [r4, #48]	; 0x30
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
     24e:	6863      	ldr	r3, [r4, #4]
     250:	0392      	lsls	r2, r2, #14
     252:	431d      	orrs	r5, r3
     254:	4b08      	ldr	r3, [pc, #32]	; (278 <Stack_Size+0x78>)
     256:	0049      	lsls	r1, r1, #1
     258:	6065      	str	r5, [r4, #4]
     25a:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     25c:	601a      	str	r2, [r3, #0]
  Chip_UART_TXEnable(LPC_USART);

  Chip_UART_IntEnable(LPC_USART, UART_IER_RBRINT);
  NVIC_ClearPendingIRQ(UART0_IRQn);
  NVIC_EnableIRQ(UART0_IRQn);
}
     25e:	bd70      	pop	{r4, r5, r6, pc}
     260:	100001f0 	.word	0x100001f0
     264:	10000108 	.word	0x10000108
     268:	10000170 	.word	0x10000170
     26c:	10000188 	.word	0x10000188
     270:	40044000 	.word	0x40044000
     274:	40008000 	.word	0x40008000
     278:	e000e100 	.word	0xe000e100

0000027c <Board_Can_ProcessInput>:

void Board_Can_ProcessInput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state){
     27c:	b530      	push	{r4, r5, lr}
     27e:	b085      	sub	sp, #20
     280:	0004      	movs	r4, r0
     282:	000d      	movs	r5, r1
  Can_MsgID_T msgType = Can_MsgType();
     284:	f002 f868 	bl	2358 <Can_MsgType>

  if (msgType == Can_No_Msg) {
     288:	2800      	cmp	r0, #0
     28a:	d00a      	beq.n	2a2 <Board_Can_ProcessInput+0x26>
      // No message, so do nothing this round
      return;
  } else if (msgType == Can_Error_Msg) {
     28c:	2802      	cmp	r0, #2
     28e:	d01e      	beq.n	2ce <Board_Can_ProcessInput+0x52>
      handle_can_error(err, csb_state->curr_baud_rate);
      return;
  }

  // We had a successful reception, so finish reset (if it's still happening)
  isResetting = false;
     290:	2200      	movs	r2, #0
     292:	4b26      	ldr	r3, [pc, #152]	; (32c <Board_Can_ProcessInput+0xb0>)
     294:	701a      	strb	r2, [r3, #0]

  if (msgType == Can_Unknown_Msg) {
     296:	2801      	cmp	r0, #1
     298:	d025      	beq.n	2e6 <Board_Can_ProcessInput+0x6a>
      Frame f;
      Can_Unknown_Read(&f);
  } else if (msgType == Can_ElconHeartbeat_Msg) {
     29a:	2806      	cmp	r0, #6
     29c:	d027      	beq.n	2ee <Board_Can_ProcessInput+0x72>
      csb_input->elcon_is_input_voltage_wrong = msg.is_input_voltage_wrong;
      csb_input->elcon_battery_voltage_not_detected = msg.battery_voltage_not_detected;
      csb_input->elcon_is_comms_bad = msg.elcon_is_comms_bad;
      //check this, maybe some logic from above signals
      csb_input->charger_on = true;
  } else if (msgType == Can_BmsPackStatus_Msg) {
     29e:	280f      	cmp	r0, #15
     2a0:	d001      	beq.n	2a6 <Board_Can_ProcessInput+0x2a>
      //check this maybe gotta check if the above read correctly from CAN 2
      csb_input->receive_bms_config = true;
  } else {
      // note other errors
  }
}
     2a2:	b005      	add	sp, #20
     2a4:	bd30      	pop	{r4, r5, pc}
      csb_input->elcon_is_comms_bad = msg.elcon_is_comms_bad;
      //check this, maybe some logic from above signals
      csb_input->charger_on = true;
  } else if (msgType == Can_BmsPackStatus_Msg) {
      Can_BmsPackStatus_T msg;
      Can_BmsPackStatus_Read(&msg);
     2a6:	4668      	mov	r0, sp
     2a8:	f002 f976 	bl	2598 <Can_BmsPackStatus_Read>
      csb_input->pack_status->pack_cell_max_mV = msg.max_cell_voltage;
     2ac:	466a      	mov	r2, sp
     2ae:	6823      	ldr	r3, [r4, #0]
     2b0:	88d2      	ldrh	r2, [r2, #6]
     2b2:	601a      	str	r2, [r3, #0]
      csb_input->pack_status->pack_current_mA = msg.pack_current;
     2b4:	466a      	mov	r2, sp
     2b6:	2108      	movs	r1, #8
     2b8:	5e52      	ldrsh	r2, [r2, r1]
     2ba:	605a      	str	r2, [r3, #4]
      csb_input->pack_status->pack_voltage_mV= msg.pack_voltage;
     2bc:	466a      	mov	r2, sp
     2be:	8852      	ldrh	r2, [r2, #2]
     2c0:	609a      	str	r2, [r3, #8]
      csb_input->balance_req = msg.balancing_needed;
     2c2:	466b      	mov	r3, sp
     2c4:	7b1b      	ldrb	r3, [r3, #12]
     2c6:	76a3      	strb	r3, [r4, #26]
      //check this maybe gotta check if the above read correctly from CAN 2
      csb_input->receive_bms_config = true;
     2c8:	2301      	movs	r3, #1
     2ca:	7663      	strb	r3, [r4, #25]
     2cc:	e7e9      	b.n	2a2 <Board_Can_ProcessInput+0x26>

  if (msgType == Can_No_Msg) {
      // No message, so do nothing this round
      return;
  } else if (msgType == Can_Error_Msg) {
      Can_ErrorID_T err = Can_Error_Read();
     2ce:	f002 f82b 	bl	2328 <Can_Error_Read>
  csb_input->bms_fault = BMS_Pin_Get();
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     2d2:	2801      	cmp	r0, #1
     2d4:	d926      	bls.n	324 <Board_Can_ProcessInput+0xa8>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     2d6:	4b15      	ldr	r3, [pc, #84]	; (32c <Board_Can_ProcessInput+0xb0>)
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	2b00      	cmp	r3, #0
     2dc:	d1e1      	bne.n	2a2 <Board_Can_ProcessInput+0x26>
     2de:	68a8      	ldr	r0, [r5, #8]
     2e0:	f7ff ff04 	bl	ec <handle_can_error.part.1>
     2e4:	e7dd      	b.n	2a2 <Board_Can_ProcessInput+0x26>
  // We had a successful reception, so finish reset (if it's still happening)
  isResetting = false;

  if (msgType == Can_Unknown_Msg) {
      Frame f;
      Can_Unknown_Read(&f);
     2e6:	4668      	mov	r0, sp
     2e8:	f002 f802 	bl	22f0 <Can_Unknown_Read>
     2ec:	e7d9      	b.n	2a2 <Board_Can_ProcessInput+0x26>
  } else if (msgType == Can_ElconHeartbeat_Msg) {
      Can_ElconHeartbeat_T msg;
      Can_ElconHeartbeat_Read(&msg);
     2ee:	4668      	mov	r0, sp
     2f0:	f002 f922 	bl	2538 <Can_ElconHeartbeat_Read>
      csb_input->elcon_output_voltage = msg.output_voltage;
     2f4:	466b      	mov	r3, sp
     2f6:	889b      	ldrh	r3, [r3, #4]
     2f8:	8223      	strh	r3, [r4, #16]
      csb_input->elcon_output_current = msg.output_current;
     2fa:	466b      	mov	r3, sp
     2fc:	88db      	ldrh	r3, [r3, #6]
     2fe:	8263      	strh	r3, [r4, #18]
      csb_input->elcon_has_hardware_failure = msg.has_hardware_failure;
     300:	466b      	mov	r3, sp
     302:	7a1b      	ldrb	r3, [r3, #8]
     304:	7523      	strb	r3, [r4, #20]
      csb_input->elcon_over_temp_protection_on = msg.over_temp_protection_on;
     306:	466b      	mov	r3, sp
     308:	785b      	ldrb	r3, [r3, #1]
     30a:	7563      	strb	r3, [r4, #21]
      csb_input->elcon_is_input_voltage_wrong = msg.is_input_voltage_wrong;
     30c:	466b      	mov	r3, sp
     30e:	789b      	ldrb	r3, [r3, #2]
     310:	75a3      	strb	r3, [r4, #22]
      csb_input->elcon_battery_voltage_not_detected = msg.battery_voltage_not_detected;
     312:	466b      	mov	r3, sp
     314:	781b      	ldrb	r3, [r3, #0]
     316:	75e3      	strb	r3, [r4, #23]
      csb_input->elcon_is_comms_bad = msg.elcon_is_comms_bad;
     318:	466b      	mov	r3, sp
     31a:	78db      	ldrb	r3, [r3, #3]
     31c:	7623      	strb	r3, [r4, #24]
      //check this, maybe some logic from above signals
      csb_input->charger_on = true;
     31e:	2301      	movs	r3, #1
     320:	7723      	strb	r3, [r4, #28]
     322:	e7be      	b.n	2a2 <Board_Can_ProcessInput+0x26>
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
        // Neither of these are real errors
        isResetting = false;
     324:	2200      	movs	r2, #0
     326:	4b01      	ldr	r3, [pc, #4]	; (32c <Board_Can_ProcessInput+0xb0>)
     328:	701a      	strb	r2, [r3, #0]
     32a:	e7ba      	b.n	2a2 <Board_Can_ProcessInput+0x26>
     32c:	100001ec 	.word	0x100001ec

00000330 <Send_Elcon_Command>:
      last_csb_bms_mode_time = msTicks;
      Send_Bms_Mode(csb_state);
  }
}

void Send_Elcon_Command(CSB_OUTPUT_T *csb_output) {
     330:	b500      	push	{lr}
     332:	b083      	sub	sp, #12
  Can_ElconCommand_T elcon_command;
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
     334:	466b      	mov	r3, sp
     336:	8802      	ldrh	r2, [r0, #0]
     338:	809a      	strh	r2, [r3, #4]
  elcon_command.max_current = csb_output->current_req_mA;
     33a:	8882      	ldrh	r2, [r0, #4]
     33c:	801a      	strh	r2, [r3, #0]
  elcon_command.control = csb_output->charger_on;
     33e:	466a      	mov	r2, sp
     340:	7a83      	ldrb	r3, [r0, #10]

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
     342:	4668      	mov	r0, sp

void Send_Elcon_Command(CSB_OUTPUT_T *csb_output) {
  Can_ElconCommand_T elcon_command;
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
  elcon_command.max_current = csb_output->current_req_mA;
  elcon_command.control = csb_output->charger_on;
     344:	7093      	strb	r3, [r2, #2]

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
     346:	f002 f939 	bl	25bc <Can_ElconCommand_Write>
  csb_input->bms_fault = BMS_Pin_Get();
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     34a:	2801      	cmp	r0, #1
     34c:	d909      	bls.n	362 <Send_Elcon_Command+0x32>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     34e:	4b07      	ldr	r3, [pc, #28]	; (36c <Send_Elcon_Command+0x3c>)
     350:	781b      	ldrb	r3, [r3, #0]
     352:	2b00      	cmp	r3, #0
     354:	d001      	beq.n	35a <Send_Elcon_Command+0x2a>
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
  elcon_command.max_current = csb_output->current_req_mA;
  elcon_command.control = csb_output->charger_on;

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
}
     356:	b003      	add	sp, #12
     358:	bd00      	pop	{pc}
     35a:	4805      	ldr	r0, [pc, #20]	; (370 <Send_Elcon_Command+0x40>)
     35c:	f7ff fec6 	bl	ec <handle_can_error.part.1>
     360:	e7f9      	b.n	356 <Send_Elcon_Command+0x26>
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
        // Neither of these are real errors
        isResetting = false;
     362:	2200      	movs	r2, #0
     364:	4b01      	ldr	r3, [pc, #4]	; (36c <Send_Elcon_Command+0x3c>)
     366:	701a      	strb	r2, [r3, #0]
     368:	e7f5      	b.n	356 <Send_Elcon_Command+0x26>
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	100001ec 	.word	0x100001ec
     370:	0003d090 	.word	0x0003d090

00000374 <Send_Bms_Switch>:
  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
}

void Send_Bms_Switch(void) {
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;
     374:	2301      	movs	r3, #1
  elcon_command.control = csb_output->charger_on;

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
}

void Send_Bms_Switch(void) {
     376:	b500      	push	{lr}
     378:	b083      	sub	sp, #12
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;
     37a:	a801      	add	r0, sp, #4
     37c:	7003      	strb	r3, [r0, #0]

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
     37e:	f002 f8bd 	bl	24fc <Can_BMS_CSB_Switch_Write>
  csb_input->bms_fault = BMS_Pin_Get();
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     382:	2801      	cmp	r0, #1
     384:	d909      	bls.n	39a <Send_Bms_Switch+0x26>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <Send_Bms_Switch+0x30>)
     388:	781b      	ldrb	r3, [r3, #0]
     38a:	2b00      	cmp	r3, #0
     38c:	d001      	beq.n	392 <Send_Bms_Switch+0x1e>
void Send_Bms_Switch(void) {
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
}
     38e:	b003      	add	sp, #12
     390:	bd00      	pop	{pc}
     392:	4805      	ldr	r0, [pc, #20]	; (3a8 <Send_Bms_Switch+0x34>)
     394:	f7ff feaa 	bl	ec <handle_can_error.part.1>
     398:	e7f9      	b.n	38e <Send_Bms_Switch+0x1a>
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
        // Neither of these are real errors
        isResetting = false;
     39a:	2200      	movs	r2, #0
     39c:	4b01      	ldr	r3, [pc, #4]	; (3a4 <Send_Bms_Switch+0x30>)
     39e:	701a      	strb	r2, [r3, #0]
     3a0:	e7f5      	b.n	38e <Send_Bms_Switch+0x1a>
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	100001ec 	.word	0x100001ec
     3a8:	0007a120 	.word	0x0007a120

000003ac <Send_Bms_Mode>:
  switch_msg.always_true = true;

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
}

void Send_Bms_Mode(CSB_STATE_T *csb_state) {
     3ac:	b500      	push	{lr}
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
     3ae:	7903      	ldrb	r3, [r0, #4]
  switch_msg.always_true = true;

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
}

void Send_Bms_Mode(CSB_STATE_T *csb_state) {
     3b0:	b083      	sub	sp, #12
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
     3b2:	2b02      	cmp	r3, #2
     3b4:	d01c      	beq.n	3f0 <Send_Bms_Mode+0x44>
     3b6:	2b03      	cmp	r3, #3
     3b8:	d00f      	beq.n	3da <Send_Bms_Mode+0x2e>
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__BALANCE;
      break;
    case CSB_SSM_MODE_INIT:
    case CSB_SSM_MODE_IDLE:
    default:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__IDLE;
     3ba:	2302      	movs	r3, #2
     3bc:	a801      	add	r0, sp, #4
     3be:	7003      	strb	r3, [r0, #0]
      break;
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
     3c0:	f002 f8cc 	bl	255c <Can_BMS_Mode_Write>
  csb_input->bms_fault = BMS_Pin_Get();
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     3c4:	2801      	cmp	r0, #1
     3c6:	d90f      	bls.n	3e8 <Send_Bms_Mode+0x3c>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     3c8:	4b0b      	ldr	r3, [pc, #44]	; (3f8 <Send_Bms_Mode+0x4c>)
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d102      	bne.n	3d6 <Send_Bms_Mode+0x2a>
     3d0:	480a      	ldr	r0, [pc, #40]	; (3fc <Send_Bms_Mode+0x50>)
     3d2:	f7ff fe8b 	bl	ec <handle_can_error.part.1>
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__IDLE;
      break;
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
}
     3d6:	b003      	add	sp, #12
     3d8:	bd00      	pop	{pc}
  switch (csb_state->curr_mode) {
    case CSB_SSM_MODE_CHARGE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__CHARGE;
      break;
    case CSB_SSM_MODE_BALANCE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__BALANCE;
     3da:	2301      	movs	r3, #1
     3dc:	a801      	add	r0, sp, #4
     3de:	7003      	strb	r3, [r0, #0]
    default:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__IDLE;
      break;
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
     3e0:	f002 f8bc 	bl	255c <Can_BMS_Mode_Write>
  csb_input->bms_fault = BMS_Pin_Get();
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     3e4:	2801      	cmp	r0, #1
     3e6:	d8ef      	bhi.n	3c8 <Send_Bms_Mode+0x1c>
        // Neither of these are real errors
        isResetting = false;
     3e8:	2200      	movs	r2, #0
     3ea:	4b03      	ldr	r3, [pc, #12]	; (3f8 <Send_Bms_Mode+0x4c>)
     3ec:	701a      	strb	r2, [r3, #0]
     3ee:	e7f2      	b.n	3d6 <Send_Bms_Mode+0x2a>
void Send_Bms_Mode(CSB_STATE_T *csb_state) {
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
    case CSB_SSM_MODE_CHARGE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__CHARGE;
     3f0:	2300      	movs	r3, #0
     3f2:	a801      	add	r0, sp, #4
     3f4:	7003      	strb	r3, [r0, #0]
      break;
     3f6:	e7e3      	b.n	3c0 <Send_Bms_Mode+0x14>
     3f8:	100001ec 	.word	0x100001ec
     3fc:	0003d090 	.word	0x0003d090

00000400 <Board_Can_ProcessOutput>:
  } else {
      // note other errors
  }
}

void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
     400:	b570      	push	{r4, r5, r6, lr}
     402:	0016      	movs	r6, r2
  uint32_t msTicks = csb_input->msTicks;
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_500)){
     404:	2280      	movs	r2, #128	; 0x80
     406:	888b      	ldrh	r3, [r1, #4]
  } else {
      // note other errors
  }
}

void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
     408:	000d      	movs	r5, r1
  uint32_t msTicks = csb_input->msTicks;
     40a:	68c4      	ldr	r4, [r0, #12]
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_500)){
     40c:	0052      	lsls	r2, r2, #1
     40e:	4293      	cmp	r3, r2
     410:	d02b      	beq.n	46a <Board_Can_ProcessOutput+0x6a>
      Board_Can_Init(BMS_CAN_BAUD);
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
     412:	22c0      	movs	r2, #192	; 0xc0
     414:	0092      	lsls	r2, r2, #2
     416:	4293      	cmp	r3, r2
     418:	d02f      	beq.n	47a <Board_Can_ProcessOutput+0x7a>
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
     41a:	21fa      	movs	r1, #250	; 0xfa
     41c:	4a19      	ldr	r2, [pc, #100]	; (484 <Board_Can_ProcessOutput+0x84>)
     41e:	0089      	lsls	r1, r1, #2
     420:	6813      	ldr	r3, [r2, #0]
     422:	1ae3      	subs	r3, r4, r3
     424:	428b      	cmp	r3, r1
     426:	d902      	bls.n	42e <Board_Can_ProcessOutput+0x2e>
     428:	792b      	ldrb	r3, [r5, #4]
     42a:	2b00      	cmp	r3, #0
     42c:	d118      	bne.n	460 <Board_Can_ProcessOutput+0x60>
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
  }
  if ( ((msTicks - last_csb_bms_switch_time) > CSB_BMS_CSB_SWITCH_PERIOD) && (csb_output->send_bms_config == true)) {
     42e:	4a16      	ldr	r2, [pc, #88]	; (488 <Board_Can_ProcessOutput+0x88>)
     430:	4916      	ldr	r1, [pc, #88]	; (48c <Board_Can_ProcessOutput+0x8c>)
     432:	6813      	ldr	r3, [r2, #0]
     434:	1ae3      	subs	r3, r4, r3
     436:	428b      	cmp	r3, r1
     438:	d902      	bls.n	440 <Board_Can_ProcessOutput+0x40>
     43a:	7a33      	ldrb	r3, [r6, #8]
     43c:	2b00      	cmp	r3, #0
     43e:	d10b      	bne.n	458 <Board_Can_ProcessOutput+0x58>
      last_csb_bms_switch_time = msTicks;
      Send_Bms_Switch();
  }
  if ( (msTicks - last_csb_bms_mode_time) > CSB_BMS_MODE_PERIOD) {
     440:	21fa      	movs	r1, #250	; 0xfa
     442:	4a13      	ldr	r2, [pc, #76]	; (490 <Board_Can_ProcessOutput+0x90>)
     444:	0089      	lsls	r1, r1, #2
     446:	6813      	ldr	r3, [r2, #0]
     448:	1ae3      	subs	r3, r4, r3
     44a:	428b      	cmp	r3, r1
     44c:	d903      	bls.n	456 <Board_Can_ProcessOutput+0x56>
      last_csb_bms_mode_time = msTicks;
      Send_Bms_Mode(csb_state);
     44e:	0028      	movs	r0, r5
  if ( ((msTicks - last_csb_bms_switch_time) > CSB_BMS_CSB_SWITCH_PERIOD) && (csb_output->send_bms_config == true)) {
      last_csb_bms_switch_time = msTicks;
      Send_Bms_Switch();
  }
  if ( (msTicks - last_csb_bms_mode_time) > CSB_BMS_MODE_PERIOD) {
      last_csb_bms_mode_time = msTicks;
     450:	6014      	str	r4, [r2, #0]
      Send_Bms_Mode(csb_state);
     452:	f7ff ffab 	bl	3ac <Send_Bms_Mode>
  }
}
     456:	bd70      	pop	{r4, r5, r6, pc}
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
  }
  if ( ((msTicks - last_csb_bms_switch_time) > CSB_BMS_CSB_SWITCH_PERIOD) && (csb_output->send_bms_config == true)) {
      last_csb_bms_switch_time = msTicks;
     458:	6014      	str	r4, [r2, #0]
      Send_Bms_Switch();
     45a:	f7ff ff8b 	bl	374 <Send_Bms_Switch>
     45e:	e7ef      	b.n	440 <Board_Can_ProcessOutput+0x40>
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
     460:	0030      	movs	r0, r6
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
     462:	6014      	str	r4, [r2, #0]
      Send_Elcon_Command(csb_output);
     464:	f7ff ff64 	bl	330 <Send_Elcon_Command>
     468:	e7e1      	b.n	42e <Board_Can_ProcessOutput+0x2e>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
     46a:	480a      	ldr	r0, [pc, #40]	; (494 <Board_Can_ProcessOutput+0x94>)
     46c:	f001 ff64 	bl	2338 <Can0_Csb_Init>
void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
  uint32_t msTicks = csb_input->msTicks;
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_500)){
      Board_Can_Init(BMS_CAN_BAUD);
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_INIT) && (csb_state->init_state == CSB_INIT_SWITCH_250)){
     470:	22c0      	movs	r2, #192	; 0xc0
     472:	88ab      	ldrh	r3, [r5, #4]
     474:	0092      	lsls	r2, r2, #2
     476:	4293      	cmp	r3, r2
     478:	d1cf      	bne.n	41a <Board_Can_ProcessOutput+0x1a>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
     47a:	4807      	ldr	r0, [pc, #28]	; (498 <Board_Can_ProcessOutput+0x98>)
     47c:	f001 ff5c 	bl	2338 <Can0_Csb_Init>
     480:	e7cb      	b.n	41a <Board_Can_ProcessOutput+0x1a>
     482:	46c0      	nop			; (mov r8, r8)
     484:	1000016c 	.word	0x1000016c
     488:	10000204 	.word	0x10000204
     48c:	00007530 	.word	0x00007530
     490:	10000184 	.word	0x10000184
     494:	0007a120 	.word	0x0007a120
     498:	0003d090 	.word	0x0003d090

0000049c <Board_Contactors_Closed>:
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
}

bool Board_Contactors_Closed(void) {
     49c:	b510      	push	{r4, lr}
  return Low_Side_Contactor_Pin_Get();
     49e:	f001 fa1f 	bl	18e0 <Low_Side_Contactor_Pin_Get>
}
     4a2:	bd10      	pop	{r4, pc}

000004a4 <Board_GetModeRequest>:

void Board_GetModeRequest(void) {
  //balance_mV, mode_request for csb_inputs
}
     4a4:	4770      	bx	lr
     4a6:	46c0      	nop			; (mov r8, r8)

000004a8 <Board_Contactors_Set>:

void Board_Contactors_Set(bool close_contactors) {
     4a8:	b510      	push	{r4, lr}
  High_Side_Contactor_Pin_Set(close_contactors);
     4aa:	f001 fa21 	bl	18f0 <High_Side_Contactor_Pin_Set>
}
     4ae:	bd10      	pop	{r4, pc}

000004b0 <Board_Check_Faults>:

void Board_Check_Faults(CSB_INPUT_T *csb_input) {
     4b0:	b510      	push	{r4, lr}
     4b2:	0004      	movs	r4, r0
  csb_input->imd_fault = IMD_Pin_Get();
     4b4:	f001 fa22 	bl	18fc <IMD_Pin_Get>
     4b8:	7760      	strb	r0, [r4, #29]
  csb_input->int_fault = Interlock_Pin_Get();
     4ba:	f001 fa31 	bl	1920 <Interlock_Pin_Get>
     4be:	77a0      	strb	r0, [r4, #30]
  csb_input->bms_fault = BMS_Pin_Get();
     4c0:	f001 fa24 	bl	190c <BMS_Pin_Get>
     4c4:	77e0      	strb	r0, [r4, #31]
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
     4c6:	f001 fa0b 	bl	18e0 <Low_Side_Contactor_Pin_Get>
     4ca:	2320      	movs	r3, #32
     4cc:	54e0      	strb	r0, [r4, r3]
}
     4ce:	bd10      	pop	{r4, pc}

000004d0 <Charge_Init>:
static uint32_t last_time_above_cv_min_curr;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state, PACK_CONFIG_T *pack_config) {
    state->charge_state = CSB_CHARGE_OFF;
     4d0:	2300      	movs	r3, #0
    last_time_above_cv_min_curr = 0;
     4d2:	4a0f      	ldr	r2, [pc, #60]	; (510 <Charge_Init+0x40>)
static uint32_t cv_charge_current_mA;
static uint32_t last_time_above_cv_min_curr;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state, PACK_CONFIG_T *pack_config) {
     4d4:	b570      	push	{r4, r5, r6, lr}
    state->charge_state = CSB_CHARGE_OFF;
    last_time_above_cv_min_curr = 0;
     4d6:	6013      	str	r3, [r2, #0]
static uint32_t last_time_above_cv_min_curr;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state, PACK_CONFIG_T *pack_config) {
    state->charge_state = CSB_CHARGE_OFF;
     4d8:	7183      	strb	r3, [r0, #6]
}

void Charge_Config(PACK_CONFIG_T *pack_config) {
    total_num_cells = pack_config->num_modules * pack_config->module_cell_count;

    cc_charge_voltage_mV = pack_config->cc_cell_voltage_mV * total_num_cells;
     4da:	68cc      	ldr	r4, [r1, #12]
     4dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     4de:	4a0d      	ldr	r2, [pc, #52]	; (514 <Charge_Init+0x44>)
     4e0:	435c      	muls	r4, r3
     4e2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     4e4:	b2a4      	uxth	r4, r4
     4e6:	4363      	muls	r3, r4
    cc_charge_current_mA = pack_config->cell_capacity_cAh * pack_config->cell_charge_c_rating_cC * pack_config->pack_cells_p / 10;
     4e8:	6908      	ldr	r0, [r1, #16]
}

void Charge_Config(PACK_CONFIG_T *pack_config) {
    total_num_cells = pack_config->num_modules * pack_config->module_cell_count;

    cc_charge_voltage_mV = pack_config->cc_cell_voltage_mV * total_num_cells;
     4ea:	6013      	str	r3, [r2, #0]
    cc_charge_current_mA = pack_config->cell_capacity_cAh * pack_config->cell_charge_c_rating_cC * pack_config->pack_cells_p / 10;
     4ec:	688b      	ldr	r3, [r1, #8]
static uint32_t cv_charge_current_mA;
static uint32_t last_time_above_cv_min_curr;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state, PACK_CONFIG_T *pack_config) {
     4ee:	000d      	movs	r5, r1

void Charge_Config(PACK_CONFIG_T *pack_config) {
    total_num_cells = pack_config->num_modules * pack_config->module_cell_count;

    cc_charge_voltage_mV = pack_config->cc_cell_voltage_mV * total_num_cells;
    cc_charge_current_mA = pack_config->cell_capacity_cAh * pack_config->cell_charge_c_rating_cC * pack_config->pack_cells_p / 10;
     4f0:	4358      	muls	r0, r3
     4f2:	69cb      	ldr	r3, [r1, #28]
     4f4:	210a      	movs	r1, #10
     4f6:	4358      	muls	r0, r3
     4f8:	f002 f884 	bl	2604 <__aeabi_uidiv>
     4fc:	4b06      	ldr	r3, [pc, #24]	; (518 <Charge_Init+0x48>)
     4fe:	6018      	str	r0, [r3, #0]

    cv_charge_voltage_mV = pack_config->cell_max_mV * total_num_cells;
     500:	686b      	ldr	r3, [r5, #4]
     502:	435c      	muls	r4, r3
     504:	4b05      	ldr	r3, [pc, #20]	; (51c <Charge_Init+0x4c>)
     506:	601c      	str	r4, [r3, #0]
    cv_charge_current_mA = cc_charge_current_mA;
     508:	4b05      	ldr	r3, [pc, #20]	; (520 <Charge_Init+0x50>)
     50a:	6018      	str	r0, [r3, #0]

void Charge_Init(CSB_STATE_T *state, PACK_CONFIG_T *pack_config) {
    state->charge_state = CSB_CHARGE_OFF;
    last_time_above_cv_min_curr = 0;
    Charge_Config(pack_config);
}
     50c:	bd70      	pop	{r4, r5, r6, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	10000210 	.word	0x10000210
     514:	10000208 	.word	0x10000208
     518:	10000214 	.word	0x10000214
     51c:	1000020c 	.word	0x1000020c
     520:	10000218 	.word	0x10000218

00000524 <Charge_Step>:
    cv_charge_current_mA = cc_charge_current_mA;
}

void Charge_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {

    if (input->low_side_cntr_fault) {
     524:	2320      	movs	r3, #32

    cv_charge_voltage_mV = pack_config->cell_max_mV * total_num_cells;
    cv_charge_current_mA = cc_charge_current_mA;
}

void Charge_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     526:	b5f0      	push	{r4, r5, r6, r7, lr}

    if (input->low_side_cntr_fault) {
     528:	5cc4      	ldrb	r4, [r0, r3]
     52a:	2c00      	cmp	r4, #0
     52c:	d011      	beq.n	552 <Charge_Step+0x2e>
      state->charge_state = CSB_CHARGE_FAULT;
     52e:	3b1b      	subs	r3, #27
     530:	718b      	strb	r3, [r1, #6]
    }

    switch (input->mode_request) {
     532:	7903      	ldrb	r3, [r0, #4]
     534:	2505      	movs	r5, #5
     536:	2b02      	cmp	r3, #2
     538:	d007      	beq.n	54a <Charge_Step+0x26>
     53a:	2b03      	cmp	r3, #3
     53c:	d133      	bne.n	5a6 <Charge_Step+0x82>
            }
            break;

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_CC
     53e:	1eae      	subs	r6, r5, #2
     540:	2303      	movs	r3, #3
     542:	2e01      	cmp	r6, #1
     544:	d90d      	bls.n	562 <Charge_Step+0x3e>
                state->charge_state = CSB_CHARGE_DONE;
            }
            break;
    }

    switch (state->charge_state) {
     546:	2d06      	cmp	r5, #6
     548:	d81b      	bhi.n	582 <Charge_Step+0x5e>
     54a:	4e62      	ldr	r6, [pc, #392]	; (6d4 <Charge_Step+0x1b0>)
     54c:	00ad      	lsls	r5, r5, #2
     54e:	5975      	ldr	r5, [r6, r5]
     550:	46af      	mov	pc, r5

    if (input->low_side_cntr_fault) {
      state->charge_state = CSB_CHARGE_FAULT;
    }

    switch (input->mode_request) {
     552:	7903      	ldrb	r3, [r0, #4]
     554:	2b02      	cmp	r3, #2
     556:	d015      	beq.n	584 <Charge_Step+0x60>
     558:	2b03      	cmp	r3, #3
     55a:	d11b      	bne.n	594 <Charge_Step+0x70>
     55c:	798d      	ldrb	r5, [r1, #6]
                state->charge_state = CSB_CHARGE_INIT;
            }
            break;

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
     55e:	2d00      	cmp	r5, #0
     560:	d1ed      	bne.n	53e <Charge_Step+0x1a>
                    || state->charge_state == CSB_CHARGE_CC
                    || state->charge_state == CSB_CHARGE_CV) {
                state->charge_state = CSB_CHARGE_INIT;
     562:	2301      	movs	r3, #1
     564:	718b      	strb	r3, [r1, #6]
     566:	3302      	adds	r3, #2
    switch (state->charge_state) {
        case CSB_CHARGE_OFF:
            _set_output(false, false, 0, 0, output);
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);
     568:	1e9c      	subs	r4, r3, #2
     56a:	4266      	negs	r6, r4
     56c:	4166      	adcs	r6, r4
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
    output->charger_on = charger_on;
     56e:	2500      	movs	r5, #0
    switch (state->charge_state) {
        case CSB_CHARGE_OFF:
            _set_output(false, false, 0, 0, output);
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);
     570:	b2f4      	uxtb	r4, r6
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     572:	7254      	strb	r4, [r2, #9]
    output->charger_on = charger_on;
     574:	7295      	strb	r5, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     576:	6015      	str	r5, [r2, #0]
    output->current_req_mA = charge_current_mA;
     578:	6055      	str	r5, [r2, #4]
            _set_output(false, false, 0, 0, output);
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
     57a:	7ec2      	ldrb	r2, [r0, #27]
     57c:	42a2      	cmp	r2, r4
     57e:	d100      	bne.n	582 <Charge_Step+0x5e>
     580:	e08d      	b.n	69e <Charge_Step+0x17a>
            if (input->low_side_cntr_fault) {
              state->charge_state = CSB_CHARGE_INIT;
            }
            break;
    }
}
     582:	bdf0      	pop	{r4, r5, r6, r7, pc}
     584:	798d      	ldrb	r5, [r1, #6]
      state->charge_state = CSB_CHARGE_FAULT;
    }

    switch (input->mode_request) {
        case CSB_SSM_MODE_CHARGE:
            if (state->charge_state == CSB_CHARGE_OFF
     586:	2604      	movs	r6, #4
     588:	002f      	movs	r7, r5
     58a:	43b7      	bics	r7, r6
     58c:	d1db      	bne.n	546 <Charge_Step+0x22>
                    || state->charge_state == CSB_CHARGE_BAL) {
                state->charge_state = CSB_CHARGE_INIT;
     58e:	2401      	movs	r4, #1
     590:	718c      	strb	r4, [r1, #6]
     592:	e7e9      	b.n	568 <Charge_Step+0x44>
            }
            break;

        // we want to switch states (either to STANDBY/DISCHARGE/ERROR)
        default:
            if(state->charge_state == CSB_CHARGE_OFF) {
     594:	798c      	ldrb	r4, [r1, #6]
     596:	2c00      	cmp	r4, #0
     598:	d105      	bne.n	5a6 <Charge_Step+0x82>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     59a:	2300      	movs	r3, #0
     59c:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     59e:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     5a0:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     5a2:	6053      	str	r3, [r2, #4]
     5a4:	e7ed      	b.n	582 <Charge_Step+0x5e>
        // we want to switch states (either to STANDBY/DISCHARGE/ERROR)
        default:
            if(state->charge_state == CSB_CHARGE_OFF) {
                state->charge_state = CSB_CHARGE_OFF;
            } else {
                state->charge_state = CSB_CHARGE_DONE;
     5a6:	2406      	movs	r4, #6
     5a8:	718c      	strb	r4, [r1, #6]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     5aa:	2400      	movs	r4, #0
     5ac:	7254      	strb	r4, [r2, #9]
    output->charger_on = charger_on;
     5ae:	7294      	strb	r4, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     5b0:	6014      	str	r4, [r2, #0]
    output->current_req_mA = charge_current_mA;
     5b2:	6054      	str	r4, [r2, #4]
            _set_output(false, false, 0, 0, output);

            // if not in Charge or Balance, that means SSM is trying to switch to another mode so wait for contactors to close
            // if in charge or balance, make sure we don't need to go back to charge or balance
            //    if we do, go back to init
            if (input->mode_request != CSB_SSM_MODE_CHARGE && input->mode_request != CSB_SSM_MODE_BALANCE) {
     5b4:	1e9a      	subs	r2, r3, #2
     5b6:	2a01      	cmp	r2, #1
     5b8:	d977      	bls.n	6aa <Charge_Step+0x186>
                if (!input->contactors_closed && !input->charger_on) {
     5ba:	7ec3      	ldrb	r3, [r0, #27]
     5bc:	2b00      	cmp	r3, #0
     5be:	d1e0      	bne.n	582 <Charge_Step+0x5e>
     5c0:	7f03      	ldrb	r3, [r0, #28]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d1dd      	bne.n	582 <Charge_Step+0x5e>
                state->charge_state = CSB_CHARGE_DONE;
            }

            if(input->contactors_closed) {
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_INIT;
     5c6:	718b      	strb	r3, [r1, #6]
     5c8:	e7db      	b.n	582 <Charge_Step+0x5e>
                state->charge_state = CSB_CHARGE_INIT;
            }
            break;
        case CSB_CHARGE_CV:

            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
     5ca:	6804      	ldr	r4, [r0, #0]
     5cc:	680b      	ldr	r3, [r1, #0]
     5ce:	6825      	ldr	r5, [r4, #0]
     5d0:	685e      	ldr	r6, [r3, #4]
     5d2:	42b5      	cmp	r5, r6
     5d4:	d241      	bcs.n	65a <Charge_Step+0x136>
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
     5d6:	2302      	movs	r3, #2
     5d8:	718b      	strb	r3, [r1, #6]
            if (input->pack_status->pack_cell_max_mV >= state->pack_config->cell_max_mV) {
                state->charge_state = CSB_CHARGE_CV; // Need to go to CV Mode
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
            } else {
                // Charge in CC Mode
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
     5da:	4b3f      	ldr	r3, [pc, #252]	; (6d8 <Charge_Step+0x1b4>)
     5dc:	681b      	ldr	r3, [r3, #0]
     5de:	6013      	str	r3, [r2, #0]
     5e0:	4b3e      	ldr	r3, [pc, #248]	; (6dc <Charge_Step+0x1b8>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	6053      	str	r3, [r2, #4]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     5e6:	2301      	movs	r3, #1
     5e8:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     5ea:	7293      	strb	r3, [r2, #10]
                // Charge in CC Mode
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            }

            // if(!input->contactors_closed || !input->charger_on) { // [TODO] Think about this
            if(!input->contactors_closed) {
     5ec:	7ec3      	ldrb	r3, [r0, #27]
     5ee:	2b00      	cmp	r3, #0
     5f0:	d1c7      	bne.n	582 <Charge_Step+0x5e>
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
    output->charger_on = charger_on;
     5f2:	2300      	movs	r3, #0
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     5f4:	2001      	movs	r0, #1
    output->charger_on = charger_on;
     5f6:	7293      	strb	r3, [r2, #10]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     5f8:	7250      	strb	r0, [r2, #9]
    output->charger_on = charger_on;
    output->voltage_req_mV = charge_voltage_mV;
     5fa:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     5fc:	6053      	str	r3, [r2, #4]
            }

            // if(!input->contactors_closed || !input->charger_on) { // [TODO] Think about this
            if(!input->contactors_closed) {
                _set_output(true, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_INIT;
     5fe:	7188      	strb	r0, [r1, #6]
     600:	e7bf      	b.n	582 <Charge_Step+0x5e>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     602:	2300      	movs	r3, #0
     604:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     606:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     608:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     60a:	6053      	str	r3, [r2, #4]
                }
            }
            break;
        case CSB_CHARGE_FAULT:
            _set_output(false, false, 0, 0, output);
            if (input->low_side_cntr_fault) {
     60c:	2c00      	cmp	r4, #0
     60e:	d0b8      	beq.n	582 <Charge_Step+0x5e>
                    state->charge_state = CSB_CHARGE_OFF;
                }
            } else {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
                    if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                        state->charge_state = CSB_CHARGE_INIT;
     610:	2301      	movs	r3, #1
                state->charge_state = CSB_CHARGE_DONE;
            }

            if(input->contactors_closed) {
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_INIT;
     612:	718b      	strb	r3, [r1, #6]
     614:	e7b5      	b.n	582 <Charge_Step+0x5e>
                    state->charge_state = CSB_CHARGE_BAL;
                }
            }
            break;
        case CSB_CHARGE_CC:
            if (input->pack_status->pack_cell_max_mV >= state->pack_config->cell_max_mV) {
     616:	6804      	ldr	r4, [r0, #0]
     618:	680b      	ldr	r3, [r1, #0]
     61a:	6824      	ldr	r4, [r4, #0]
     61c:	685b      	ldr	r3, [r3, #4]
     61e:	429c      	cmp	r4, r3
     620:	d3db      	bcc.n	5da <Charge_Step+0xb6>
                state->charge_state = CSB_CHARGE_CV; // Need to go to CV Mode
     622:	2303      	movs	r3, #3
     624:	718b      	strb	r3, [r1, #6]
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     626:	4b2e      	ldr	r3, [pc, #184]	; (6e0 <Charge_Step+0x1bc>)
     628:	681b      	ldr	r3, [r3, #0]
     62a:	6013      	str	r3, [r2, #0]
     62c:	4b2d      	ldr	r3, [pc, #180]	; (6e4 <Charge_Step+0x1c0>)
     62e:	e7d8      	b.n	5e2 <Charge_Step+0xbe>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     630:	2300      	movs	r3, #0
     632:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     634:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     636:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     638:	6053      	str	r3, [r2, #4]
        case CSB_CHARGE_BAL:
            _set_output(false, false, 0, 0, output);
            bool balancing = input->balance_req;

            // Done balancing
            if (!balancing) {
     63a:	7e83      	ldrb	r3, [r0, #26]
     63c:	2b00      	cmp	r3, #0
     63e:	d101      	bne.n	644 <Charge_Step+0x120>
                state->charge_state = CSB_CHARGE_DONE;
     640:	3306      	adds	r3, #6
     642:	718b      	strb	r3, [r1, #6]
            }

            if(input->contactors_closed) {
     644:	7ec3      	ldrb	r3, [r0, #27]
     646:	2b00      	cmp	r3, #0
     648:	d09b      	beq.n	582 <Charge_Step+0x5e>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     64a:	2300      	movs	r3, #0
     64c:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     64e:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     650:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     652:	6053      	str	r3, [r2, #4]
                state->charge_state = CSB_CHARGE_DONE;
            }

            if(input->contactors_closed) {
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_INIT;
     654:	3301      	adds	r3, #1
     656:	718b      	strb	r3, [r1, #6]
     658:	e793      	b.n	582 <Charge_Step+0x5e>
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     65a:	4d21      	ldr	r5, [pc, #132]	; (6e0 <Charge_Step+0x1bc>)

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     65c:	6a1e      	ldr	r6, [r3, #32]
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     65e:	682d      	ldr	r5, [r5, #0]

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     660:	6864      	ldr	r4, [r4, #4]
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);
     662:	6015      	str	r5, [r2, #0]
     664:	4d1f      	ldr	r5, [pc, #124]	; (6e4 <Charge_Step+0x1c0>)
     666:	682d      	ldr	r5, [r5, #0]
     668:	6055      	str	r5, [r2, #4]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     66a:	2501      	movs	r5, #1
     66c:	7255      	strb	r5, [r2, #9]
    output->charger_on = charger_on;
     66e:	7295      	strb	r5, [r2, #10]
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, cc_charge_voltage_mV, cc_charge_current_mA, output);
            } else {
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     670:	69dd      	ldr	r5, [r3, #28]
     672:	4375      	muls	r5, r6
     674:	42ac      	cmp	r4, r5
     676:	d20e      	bcs.n	696 <Charge_Step+0x172>
                    if ((input->msTicks - last_time_above_cv_min_curr) >= state->pack_config->cv_min_current_ms) {
     678:	4c1b      	ldr	r4, [pc, #108]	; (6e8 <Charge_Step+0x1c4>)
     67a:	68c5      	ldr	r5, [r0, #12]
     67c:	6824      	ldr	r4, [r4, #0]
     67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     680:	1b2c      	subs	r4, r5, r4
     682:	429c      	cmp	r4, r3
     684:	d3b2      	bcc.n	5ec <Charge_Step+0xc8>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     686:	2300      	movs	r3, #0
     688:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     68a:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     68c:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     68e:	6053      	str	r3, [r2, #4]
                _set_output(true, true, cv_charge_voltage_mV, cv_charge_current_mA, output);

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
                    if ((input->msTicks - last_time_above_cv_min_curr) >= state->pack_config->cv_min_current_ms) {
                        _set_output(false, false, 0, 0, output);
                        state->charge_state = CSB_CHARGE_DONE;
     690:	3306      	adds	r3, #6
     692:	718b      	strb	r3, [r1, #6]
                        break;
     694:	e775      	b.n	582 <Charge_Step+0x5e>
                    }
                } else {
                    last_time_above_cv_min_curr = input->msTicks;
     696:	4b14      	ldr	r3, [pc, #80]	; (6e8 <Charge_Step+0x1c4>)
     698:	68c4      	ldr	r4, [r0, #12]
     69a:	601c      	str	r4, [r3, #0]
     69c:	e7a6      	b.n	5ec <Charge_Step+0xc8>
            break;
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
     69e:	2b02      	cmp	r3, #2
     6a0:	d00f      	beq.n	6c2 <Charge_Step+0x19e>
                    state->charge_state =
                        (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) ? CSB_CHARGE_CC : CSB_CHARGE_CV;
                } else if (input->mode_request == CSB_SSM_MODE_BALANCE) {
     6a2:	2b03      	cmp	r3, #3
     6a4:	d000      	beq.n	6a8 <Charge_Step+0x184>
     6a6:	e76c      	b.n	582 <Charge_Step+0x5e>
     6a8:	e7d4      	b.n	654 <Charge_Step+0x130>
            if (input->mode_request != CSB_SSM_MODE_CHARGE && input->mode_request != CSB_SSM_MODE_BALANCE) {
                if (!input->contactors_closed && !input->charger_on) {
                    state->charge_state = CSB_CHARGE_OFF;
                }
            } else {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
     6aa:	2b02      	cmp	r3, #2
     6ac:	d000      	beq.n	6b0 <Charge_Step+0x18c>
     6ae:	e768      	b.n	582 <Charge_Step+0x5e>
                    if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
     6b0:	6802      	ldr	r2, [r0, #0]
     6b2:	680b      	ldr	r3, [r1, #0]
     6b4:	6812      	ldr	r2, [r2, #0]
     6b6:	685b      	ldr	r3, [r3, #4]
     6b8:	429a      	cmp	r2, r3
     6ba:	d300      	bcc.n	6be <Charge_Step+0x19a>
     6bc:	e761      	b.n	582 <Charge_Step+0x5e>
                        state->charge_state = CSB_CHARGE_INIT;
     6be:	2301      	movs	r3, #1
     6c0:	e7a7      	b.n	612 <Charge_Step+0xee>
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
                    state->charge_state =
                        (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) ? CSB_CHARGE_CC : CSB_CHARGE_CV;
     6c2:	6802      	ldr	r2, [r0, #0]
     6c4:	680b      	ldr	r3, [r1, #0]
        case CSB_CHARGE_INIT:
            _set_output((input->mode_request == CSB_SSM_MODE_CHARGE), false, 0, 0, output);

            if (input->contactors_closed == output->close_contactors) {
                if(input->mode_request == CSB_SSM_MODE_CHARGE) {
                    state->charge_state =
     6c6:	6812      	ldr	r2, [r2, #0]
     6c8:	685b      	ldr	r3, [r3, #4]
     6ca:	429a      	cmp	r2, r3
     6cc:	416d      	adcs	r5, r5
     6ce:	3502      	adds	r5, #2
     6d0:	718d      	strb	r5, [r1, #6]
     6d2:	e756      	b.n	582 <Charge_Step+0x5e>
     6d4:	00002a48 	.word	0x00002a48
     6d8:	10000208 	.word	0x10000208
     6dc:	10000214 	.word	0x10000214
     6e0:	1000020c 	.word	0x1000020c
     6e4:	10000218 	.word	0x10000218
     6e8:	10000210 	.word	0x10000210

000006ec <measure>:
  } else {
      Board_Println("invalid location");
  }
}

static void measure(const char * const * argv) {
     6ec:	b510      	push	{r4, lr}
    if (strcmp(argv[1],"on") == 0) {
     6ee:	6844      	ldr	r4, [r0, #4]
     6f0:	492c      	ldr	r1, [pc, #176]	; (7a4 <measure+0xb8>)
     6f2:	0020      	movs	r0, r4
     6f4:	f002 f8e2 	bl	28bc <strcmp>
     6f8:	2800      	cmp	r0, #0
     6fa:	d02e      	beq.n	75a <measure+0x6e>
        console_output->measure_on = true;
        Board_Println("Measure On!");

    } else if (strcmp(argv[1],"off") == 0) {
     6fc:	492a      	ldr	r1, [pc, #168]	; (7a8 <measure+0xbc>)
     6fe:	0020      	movs	r0, r4
     700:	f002 f8dc 	bl	28bc <strcmp>
     704:	2800      	cmp	r0, #0
     706:	d042      	beq.n	78e <measure+0xa2>
        console_output->measure_on = false;
        Board_Println("Measure Off!");

    } else if (strcmp(argv[1],"print_flags") == 0) {
     708:	4928      	ldr	r1, [pc, #160]	; (7ac <measure+0xc0>)
     70a:	0020      	movs	r0, r4
     70c:	f002 f8d6 	bl	28bc <strcmp>
     710:	2800      	cmp	r0, #0
     712:	d10f      	bne.n	734 <measure+0x48>

        if(console_output->measure_packcurrent) {
     714:	4c26      	ldr	r4, [pc, #152]	; (7b0 <measure+0xc4>)
     716:	6823      	ldr	r3, [r4, #0]
     718:	7a5b      	ldrb	r3, [r3, #9]
     71a:	2b00      	cmp	r3, #0
     71c:	d125      	bne.n	76a <measure+0x7e>
            Board_Println("Pack Current: On");
        } else {
            Board_Println("Pack Current: Off");
     71e:	4825      	ldr	r0, [pc, #148]	; (7b4 <measure+0xc8>)
     720:	f7ff fd36 	bl	190 <Board_Println>
        }

        if(console_output->measure_packvoltage) {
     724:	6823      	ldr	r3, [r4, #0]
     726:	7a9b      	ldrb	r3, [r3, #10]
     728:	2b00      	cmp	r3, #0
     72a:	d025      	beq.n	778 <measure+0x8c>
            Board_Println("Pack Current: On");
     72c:	4822      	ldr	r0, [pc, #136]	; (7b8 <measure+0xcc>)
     72e:	f7ff fd2f 	bl	190 <Board_Println>
     732:	e019      	b.n	768 <measure+0x7c>
        } else {
            Board_Println("Pack Current: Off");
        }

    } else if (strcmp(argv[1],"packcurrent") == 0) {
     734:	4921      	ldr	r1, [pc, #132]	; (7bc <measure+0xd0>)
     736:	0020      	movs	r0, r4
     738:	f002 f8c0 	bl	28bc <strcmp>
     73c:	2800      	cmp	r0, #0
     73e:	d01f      	beq.n	780 <measure+0x94>
        console_output->measure_packcurrent = !console_output->measure_packcurrent;

    } else if (strcmp(argv[1],"packvoltage") == 0) {
     740:	491f      	ldr	r1, [pc, #124]	; (7c0 <measure+0xd4>)
     742:	0020      	movs	r0, r4
     744:	f002 f8ba 	bl	28bc <strcmp>
     748:	2800      	cmp	r0, #0
     74a:	d127      	bne.n	79c <measure+0xb0>
        console_output->measure_packvoltage = !console_output->measure_packvoltage;
     74c:	4b18      	ldr	r3, [pc, #96]	; (7b0 <measure+0xc4>)
     74e:	681a      	ldr	r2, [r3, #0]
     750:	2301      	movs	r3, #1
     752:	7a91      	ldrb	r1, [r2, #10]
     754:	404b      	eors	r3, r1
     756:	7293      	strb	r3, [r2, #10]
     758:	e006      	b.n	768 <measure+0x7c>
  }
}

static void measure(const char * const * argv) {
    if (strcmp(argv[1],"on") == 0) {
        console_output->measure_on = true;
     75a:	2201      	movs	r2, #1
     75c:	4b14      	ldr	r3, [pc, #80]	; (7b0 <measure+0xc4>)
        Board_Println("Measure On!");
     75e:	4819      	ldr	r0, [pc, #100]	; (7c4 <measure+0xd8>)
  }
}

static void measure(const char * const * argv) {
    if (strcmp(argv[1],"on") == 0) {
        console_output->measure_on = true;
     760:	681b      	ldr	r3, [r3, #0]
     762:	721a      	strb	r2, [r3, #8]
        Board_Println("Measure On!");
     764:	f7ff fd14 	bl	190 <Board_Println>
        console_output->measure_packvoltage = !console_output->measure_packvoltage;

    } else {
        Board_Println("Unrecognized command!");
    }
}
     768:	bd10      	pop	{r4, pc}
        Board_Println("Measure Off!");

    } else if (strcmp(argv[1],"print_flags") == 0) {

        if(console_output->measure_packcurrent) {
            Board_Println("Pack Current: On");
     76a:	4813      	ldr	r0, [pc, #76]	; (7b8 <measure+0xcc>)
     76c:	f7ff fd10 	bl	190 <Board_Println>
        } else {
            Board_Println("Pack Current: Off");
        }

        if(console_output->measure_packvoltage) {
     770:	6823      	ldr	r3, [r4, #0]
     772:	7a9b      	ldrb	r3, [r3, #10]
     774:	2b00      	cmp	r3, #0
     776:	d1d9      	bne.n	72c <measure+0x40>
            Board_Println("Pack Current: On");
        } else {
            Board_Println("Pack Current: Off");
     778:	480e      	ldr	r0, [pc, #56]	; (7b4 <measure+0xc8>)
     77a:	f7ff fd09 	bl	190 <Board_Println>
     77e:	e7f3      	b.n	768 <measure+0x7c>
        }

    } else if (strcmp(argv[1],"packcurrent") == 0) {
        console_output->measure_packcurrent = !console_output->measure_packcurrent;
     780:	4b0b      	ldr	r3, [pc, #44]	; (7b0 <measure+0xc4>)
     782:	681a      	ldr	r2, [r3, #0]
     784:	2301      	movs	r3, #1
     786:	7a51      	ldrb	r1, [r2, #9]
     788:	404b      	eors	r3, r1
     78a:	7253      	strb	r3, [r2, #9]
     78c:	e7ec      	b.n	768 <measure+0x7c>
    if (strcmp(argv[1],"on") == 0) {
        console_output->measure_on = true;
        Board_Println("Measure On!");

    } else if (strcmp(argv[1],"off") == 0) {
        console_output->measure_on = false;
     78e:	4b08      	ldr	r3, [pc, #32]	; (7b0 <measure+0xc4>)
     790:	681b      	ldr	r3, [r3, #0]
     792:	7218      	strb	r0, [r3, #8]
        Board_Println("Measure Off!");
     794:	480c      	ldr	r0, [pc, #48]	; (7c8 <measure+0xdc>)
     796:	f7ff fcfb 	bl	190 <Board_Println>
     79a:	e7e5      	b.n	768 <measure+0x7c>

    } else if (strcmp(argv[1],"packvoltage") == 0) {
        console_output->measure_packvoltage = !console_output->measure_packvoltage;

    } else {
        Board_Println("Unrecognized command!");
     79c:	480b      	ldr	r0, [pc, #44]	; (7cc <measure+0xe0>)
     79e:	f7ff fcf7 	bl	190 <Board_Println>
    }
}
     7a2:	e7e1      	b.n	768 <measure+0x7c>
     7a4:	00002cf0 	.word	0x00002cf0
     7a8:	00002ce8 	.word	0x00002ce8
     7ac:	00002b50 	.word	0x00002b50
     7b0:	1000021c 	.word	0x1000021c
     7b4:	00002b70 	.word	0x00002b70
     7b8:	00002b5c 	.word	0x00002b5c
     7bc:	00002b84 	.word	0x00002b84
     7c0:	00002b90 	.word	0x00002b90
     7c4:	00002b34 	.word	0x00002b34
     7c8:	00002b40 	.word	0x00002b40
     7cc:	00002b9c 	.word	0x00002b9c

000007d0 <set>:
            Board_Println("invalid get location");
        }
    }
}

static void set(const char * const * argv) {
     7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7d2:	464f      	mov	r7, r9
     7d4:	4646      	mov	r6, r8
     7d6:	b4c0      	push	{r6, r7}
    if (csb_state->curr_mode != CSB_SSM_MODE_IDLE)
     7d8:	4bb6      	ldr	r3, [pc, #728]	; (ab4 <set+0x2e4>)
            Board_Println("invalid get location");
        }
    }
}

static void set(const char * const * argv) {
     7da:	4680      	mov	r8, r0
    if (csb_state->curr_mode != CSB_SSM_MODE_IDLE)
     7dc:	681f      	ldr	r7, [r3, #0]
     7de:	793b      	ldrb	r3, [r7, #4]
     7e0:	2b01      	cmp	r3, #1
     7e2:	d122      	bne.n	82a <set+0x5a>
     7e4:	4bb4      	ldr	r3, [pc, #720]	; (ab8 <set+0x2e8>)
     7e6:	6846      	ldr	r6, [r0, #4]
     7e8:	4699      	mov	r9, r3
     7ea:	1d1d      	adds	r5, r3, #4
     7ec:	49b3      	ldr	r1, [pc, #716]	; (abc <set+0x2ec>)
     7ee:	2400      	movs	r4, #0
     7f0:	e000      	b.n	7f4 <set+0x24>
     7f2:	cd02      	ldmia	r5!, {r1}
    }
    rw_loc_label_t rwloc;
    //loop over r/w entries
    bool foundloc = false;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
        if (strcmp(argv[1],locstring[rwloc]) == 0){
     7f4:	0030      	movs	r0, r6
     7f6:	f002 f861 	bl	28bc <strcmp>
     7fa:	2800      	cmp	r0, #0
     7fc:	d01c      	beq.n	838 <set+0x68>
        return;
    }
    rw_loc_label_t rwloc;
    //loop over r/w entries
    bool foundloc = false;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
     7fe:	3401      	adds	r4, #1
     800:	b2e4      	uxtb	r4, r4
     802:	2c0c      	cmp	r4, #12
     804:	d1f5      	bne.n	7f2 <set+0x22>
     806:	464d      	mov	r5, r9
     808:	464c      	mov	r4, r9
     80a:	3514      	adds	r5, #20
     80c:	49ac      	ldr	r1, [pc, #688]	; (ac0 <set+0x2f0>)
     80e:	e000      	b.n	812 <set+0x42>
     810:	6b21      	ldr	r1, [r4, #48]	; 0x30
        }
    } else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
            if (strcmp(argv[1],locstring[roloc]) == 0){
     812:	0030      	movs	r0, r6
     814:	f002 f852 	bl	28bc <strcmp>
     818:	2800      	cmp	r0, #0
     81a:	d013      	beq.n	844 <set+0x74>
     81c:	3404      	adds	r4, #4
                break;
        }
    } else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
     81e:	42a5      	cmp	r5, r4
     820:	d1f6      	bne.n	810 <set+0x40>
                foundloc = true;
                Board_Println("this location is read only");
                return;
            }
        }
        Board_Println("invalid location");
     822:	48a8      	ldr	r0, [pc, #672]	; (ac4 <set+0x2f4>)
     824:	f7ff fcb4 	bl	190 <Board_Println>
     828:	e002      	b.n	830 <set+0x60>
}

static void set(const char * const * argv) {
    if (csb_state->curr_mode != CSB_SSM_MODE_IDLE)
    {
        Board_Println("Set failed (not in standby mode)!");
     82a:	48a7      	ldr	r0, [pc, #668]	; (ac8 <set+0x2f8>)
     82c:	f7ff fcb0 	bl	190 <Board_Println>
                return;
            }
        }
        Board_Println("invalid location");
    }
}
     830:	bc0c      	pop	{r2, r3}
     832:	4690      	mov	r8, r2
     834:	4699      	mov	r9, r3
     836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            foundloc = true;
            break;
        }
    }
    if(foundloc){
        switch (rwloc) {
     838:	2c0b      	cmp	r4, #11
     83a:	d81f      	bhi.n	87c <set+0xac>
     83c:	4ba3      	ldr	r3, [pc, #652]	; (acc <set+0x2fc>)
     83e:	00a4      	lsls	r4, r4, #2
     840:	591b      	ldr	r3, [r3, r4]
     842:	469f      	mov	pc, r3
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
            if (strcmp(argv[1],locstring[roloc]) == 0){
                foundloc = true;
                Board_Println("this location is read only");
     844:	48a2      	ldr	r0, [pc, #648]	; (ad0 <set+0x300>)
     846:	f7ff fca3 	bl	190 <Board_Println>
                return;
     84a:	e7f1      	b.n	830 <set+0x60>
            case RWL_cv_min_current_mA:
                csb_state->pack_config->cv_min_current_mA = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
     84c:	4643      	mov	r3, r8
     84e:	6899      	ldr	r1, [r3, #8]
     850:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     852:	780a      	ldrb	r2, [r1, #0]
     854:	2a00      	cmp	r2, #0
     856:	d100      	bne.n	85a <set+0x8a>
     858:	e127      	b.n	aaa <set+0x2da>
     85a:	2300      	movs	r3, #0
     85c:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     85e:	0098      	lsls	r0, r3, #2
     860:	18c3      	adds	r3, r0, r3
     862:	005b      	lsls	r3, r3, #1
     864:	3101      	adds	r1, #1
     866:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     868:	1e4a      	subs	r2, r1, #1
     86a:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     86c:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     86e:	2a00      	cmp	r2, #0
     870:	d1f5      	bne.n	85e <set+0x8e>
            case RWL_cv_min_current_mA:
                csb_state->pack_config->cv_min_current_mA = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
     872:	6263      	str	r3, [r4, #36]	; 0x24
                Board_Println("Done!");
     874:	4897      	ldr	r0, [pc, #604]	; (ad4 <set+0x304>)
     876:	f7ff fc8b 	bl	190 <Board_Println>
                break;
     87a:	e7d9      	b.n	830 <set+0x60>
        }
    }
    if(foundloc){
        switch (rwloc) {
            case RWL_cell_min_mV:
                csb_state->pack_config->cell_min_mV = my_atou(argv[2]);
     87c:	4643      	mov	r3, r8
     87e:	6899      	ldr	r1, [r3, #8]
     880:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     882:	780a      	ldrb	r2, [r1, #0]
     884:	2a00      	cmp	r2, #0
     886:	d100      	bne.n	88a <set+0xba>
     888:	e111      	b.n	aae <set+0x2de>
     88a:	2300      	movs	r3, #0
     88c:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     88e:	0098      	lsls	r0, r3, #2
     890:	18c3      	adds	r3, r0, r3
     892:	005b      	lsls	r3, r3, #1
     894:	3101      	adds	r1, #1
     896:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     898:	1e4a      	subs	r2, r1, #1
     89a:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     89c:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     89e:	2a00      	cmp	r2, #0
     8a0:	d1f5      	bne.n	88e <set+0xbe>
        }
    }
    if(foundloc){
        switch (rwloc) {
            case RWL_cell_min_mV:
                csb_state->pack_config->cell_min_mV = my_atou(argv[2]);
     8a2:	6023      	str	r3, [r4, #0]
                Board_Println("Done!");
     8a4:	488b      	ldr	r0, [pc, #556]	; (ad4 <set+0x304>)
     8a6:	f7ff fc73 	bl	190 <Board_Println>
                break;
     8aa:	e7c1      	b.n	830 <set+0x60>
            case RWL_cell_max_mV:
                csb_state->pack_config->cell_max_mV = my_atou(argv[2]);
     8ac:	4643      	mov	r3, r8
     8ae:	6899      	ldr	r1, [r3, #8]
     8b0:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     8b2:	780a      	ldrb	r2, [r1, #0]
     8b4:	2a00      	cmp	r2, #0
     8b6:	d100      	bne.n	8ba <set+0xea>
     8b8:	e0ef      	b.n	a9a <set+0x2ca>
     8ba:	2300      	movs	r3, #0
     8bc:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     8be:	0098      	lsls	r0, r3, #2
     8c0:	18c3      	adds	r3, r0, r3
     8c2:	005b      	lsls	r3, r3, #1
     8c4:	3101      	adds	r1, #1
     8c6:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     8c8:	1e4a      	subs	r2, r1, #1
     8ca:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     8cc:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     8ce:	2a00      	cmp	r2, #0
     8d0:	d1f5      	bne.n	8be <set+0xee>
            case RWL_cell_min_mV:
                csb_state->pack_config->cell_min_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_max_mV:
                csb_state->pack_config->cell_max_mV = my_atou(argv[2]);
     8d2:	6063      	str	r3, [r4, #4]
                Board_Println("Done!");
     8d4:	487f      	ldr	r0, [pc, #508]	; (ad4 <set+0x304>)
     8d6:	f7ff fc5b 	bl	190 <Board_Println>
                break;
     8da:	e7a9      	b.n	830 <set+0x60>
            case RWL_cell_capacity_cAh:
                csb_state->pack_config->cell_capacity_cAh = my_atou(argv[2]);
     8dc:	4643      	mov	r3, r8
     8de:	6899      	ldr	r1, [r3, #8]
     8e0:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     8e2:	780a      	ldrb	r2, [r1, #0]
     8e4:	2a00      	cmp	r2, #0
     8e6:	d100      	bne.n	8ea <set+0x11a>
     8e8:	e0db      	b.n	aa2 <set+0x2d2>
     8ea:	2300      	movs	r3, #0
     8ec:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     8ee:	0098      	lsls	r0, r3, #2
     8f0:	18c3      	adds	r3, r0, r3
     8f2:	005b      	lsls	r3, r3, #1
     8f4:	3101      	adds	r1, #1
     8f6:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     8f8:	1e4a      	subs	r2, r1, #1
     8fa:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     8fc:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     8fe:	2a00      	cmp	r2, #0
     900:	d1f5      	bne.n	8ee <set+0x11e>
            case RWL_cell_max_mV:
                csb_state->pack_config->cell_max_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_capacity_cAh:
                csb_state->pack_config->cell_capacity_cAh = my_atou(argv[2]);
     902:	60a3      	str	r3, [r4, #8]
                Board_Println("Done!");
     904:	4873      	ldr	r0, [pc, #460]	; (ad4 <set+0x304>)
     906:	f7ff fc43 	bl	190 <Board_Println>
                break;
     90a:	e791      	b.n	830 <set+0x60>
            case RWL_num_modules:
                csb_state->pack_config->num_modules = my_atou(argv[2]);
     90c:	4643      	mov	r3, r8
     90e:	6899      	ldr	r1, [r3, #8]
     910:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     912:	780a      	ldrb	r2, [r1, #0]
     914:	2a00      	cmp	r2, #0
     916:	d100      	bne.n	91a <set+0x14a>
     918:	e0bb      	b.n	a92 <set+0x2c2>
     91a:	2300      	movs	r3, #0
     91c:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     91e:	0098      	lsls	r0, r3, #2
     920:	18c3      	adds	r3, r0, r3
     922:	005b      	lsls	r3, r3, #1
     924:	3101      	adds	r1, #1
     926:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     928:	1e4a      	subs	r2, r1, #1
     92a:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     92c:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     92e:	2a00      	cmp	r2, #0
     930:	d1f5      	bne.n	91e <set+0x14e>
            case RWL_cell_capacity_cAh:
                csb_state->pack_config->cell_capacity_cAh = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_num_modules:
                csb_state->pack_config->num_modules = my_atou(argv[2]);
     932:	60e3      	str	r3, [r4, #12]
                Board_Println("Done!");
     934:	4867      	ldr	r0, [pc, #412]	; (ad4 <set+0x304>)
     936:	f7ff fc2b 	bl	190 <Board_Println>
                break;
     93a:	e779      	b.n	830 <set+0x60>
            case RWL_cell_charge_c_rating_cC:
              csb_state->pack_config->cell_charge_c_rating_cC = my_atou(argv[2]);
              Board_Println("Done!");
              break;
            case RWL_bal_on_thresh_mV:
                csb_state->pack_config->bal_on_thresh_mV = my_atou(argv[2]);
     93c:	4643      	mov	r3, r8
     93e:	6899      	ldr	r1, [r3, #8]
     940:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     942:	780a      	ldrb	r2, [r1, #0]
     944:	2a00      	cmp	r2, #0
     946:	d100      	bne.n	94a <set+0x17a>
     948:	e0ad      	b.n	aa6 <set+0x2d6>
     94a:	2300      	movs	r3, #0
     94c:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     94e:	0098      	lsls	r0, r3, #2
     950:	18c3      	adds	r3, r0, r3
     952:	005b      	lsls	r3, r3, #1
     954:	3101      	adds	r1, #1
     956:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     958:	1e4a      	subs	r2, r1, #1
     95a:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     95c:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     95e:	2a00      	cmp	r2, #0
     960:	d1f5      	bne.n	94e <set+0x17e>
            case RWL_cell_charge_c_rating_cC:
              csb_state->pack_config->cell_charge_c_rating_cC = my_atou(argv[2]);
              Board_Println("Done!");
              break;
            case RWL_bal_on_thresh_mV:
                csb_state->pack_config->bal_on_thresh_mV = my_atou(argv[2]);
     962:	6163      	str	r3, [r4, #20]
                Board_Println("Done!");
     964:	485b      	ldr	r0, [pc, #364]	; (ad4 <set+0x304>)
     966:	f7ff fc13 	bl	190 <Board_Println>
                break;
     96a:	e761      	b.n	830 <set+0x60>
            case RWL_bal_off_thresh_mV:
                csb_state->pack_config->bal_off_thresh_mV = my_atou(argv[2]);
     96c:	4643      	mov	r3, r8
     96e:	6899      	ldr	r1, [r3, #8]
     970:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     972:	780a      	ldrb	r2, [r1, #0]
     974:	2a00      	cmp	r2, #0
     976:	d100      	bne.n	97a <set+0x1aa>
     978:	e091      	b.n	a9e <set+0x2ce>
     97a:	2300      	movs	r3, #0
     97c:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     97e:	0098      	lsls	r0, r3, #2
     980:	18c3      	adds	r3, r0, r3
     982:	005b      	lsls	r3, r3, #1
     984:	3101      	adds	r1, #1
     986:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     988:	1e4a      	subs	r2, r1, #1
     98a:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     98c:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     98e:	2a00      	cmp	r2, #0
     990:	d1f5      	bne.n	97e <set+0x1ae>
            case RWL_bal_on_thresh_mV:
                csb_state->pack_config->bal_on_thresh_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_bal_off_thresh_mV:
                csb_state->pack_config->bal_off_thresh_mV = my_atou(argv[2]);
     992:	61a3      	str	r3, [r4, #24]
                Board_Println("Done!");
     994:	484f      	ldr	r0, [pc, #316]	; (ad4 <set+0x304>)
     996:	f7ff fbfb 	bl	190 <Board_Println>
                break;
     99a:	e749      	b.n	830 <set+0x60>
            case RWL_num_modules:
                csb_state->pack_config->num_modules = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_module_cell_count:
                csb_state->pack_config->module_cell_count = my_atou(argv[2]);
     99c:	4643      	mov	r3, r8
     99e:	6899      	ldr	r1, [r3, #8]
     9a0:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     9a2:	780a      	ldrb	r2, [r1, #0]
     9a4:	2a00      	cmp	r2, #0
     9a6:	d070      	beq.n	a8a <set+0x2ba>
     9a8:	2300      	movs	r3, #0
     9aa:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     9ac:	0098      	lsls	r0, r3, #2
     9ae:	18c3      	adds	r3, r0, r3
     9b0:	005b      	lsls	r3, r3, #1
     9b2:	3101      	adds	r1, #1
     9b4:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     9b6:	1e4a      	subs	r2, r1, #1
     9b8:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     9ba:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     9bc:	2a00      	cmp	r2, #0
     9be:	d1f5      	bne.n	9ac <set+0x1dc>
            case RWL_num_modules:
                csb_state->pack_config->num_modules = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_module_cell_count:
                csb_state->pack_config->module_cell_count = my_atou(argv[2]);
     9c0:	62e3      	str	r3, [r4, #44]	; 0x2c
                Board_Println("Done!");
     9c2:	4844      	ldr	r0, [pc, #272]	; (ad4 <set+0x304>)
     9c4:	f7ff fbe4 	bl	190 <Board_Println>
                break;
     9c8:	e732      	b.n	830 <set+0x60>
            case RWL_cell_charge_c_rating_cC:
              csb_state->pack_config->cell_charge_c_rating_cC = my_atou(argv[2]);
     9ca:	4643      	mov	r3, r8
     9cc:	6899      	ldr	r1, [r3, #8]
     9ce:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     9d0:	780a      	ldrb	r2, [r1, #0]
     9d2:	2a00      	cmp	r2, #0
     9d4:	d05f      	beq.n	a96 <set+0x2c6>
     9d6:	2300      	movs	r3, #0
     9d8:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     9da:	0098      	lsls	r0, r3, #2
     9dc:	18c3      	adds	r3, r0, r3
     9de:	005b      	lsls	r3, r3, #1
     9e0:	3101      	adds	r1, #1
     9e2:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     9e4:	1e4a      	subs	r2, r1, #1
     9e6:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     9e8:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     9ea:	2a00      	cmp	r2, #0
     9ec:	d1f5      	bne.n	9da <set+0x20a>
            case RWL_module_cell_count:
                csb_state->pack_config->module_cell_count = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_charge_c_rating_cC:
              csb_state->pack_config->cell_charge_c_rating_cC = my_atou(argv[2]);
     9ee:	6123      	str	r3, [r4, #16]
              Board_Println("Done!");
     9f0:	4838      	ldr	r0, [pc, #224]	; (ad4 <set+0x304>)
     9f2:	f7ff fbcd 	bl	190 <Board_Println>
              break;
     9f6:	e71b      	b.n	830 <set+0x60>
            case RWL_bal_off_thresh_mV:
                csb_state->pack_config->bal_off_thresh_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_pack_cells_p:
                csb_state->pack_config->pack_cells_p = my_atou(argv[2]);
     9f8:	4643      	mov	r3, r8
     9fa:	6899      	ldr	r1, [r3, #8]
     9fc:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     9fe:	780a      	ldrb	r2, [r1, #0]
     a00:	2a00      	cmp	r2, #0
     a02:	d044      	beq.n	a8e <set+0x2be>
     a04:	2300      	movs	r3, #0
     a06:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     a08:	0098      	lsls	r0, r3, #2
     a0a:	18c3      	adds	r3, r0, r3
     a0c:	005b      	lsls	r3, r3, #1
     a0e:	3101      	adds	r1, #1
     a10:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a12:	1e4a      	subs	r2, r1, #1
     a14:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     a16:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a18:	2a00      	cmp	r2, #0
     a1a:	d1f5      	bne.n	a08 <set+0x238>
            case RWL_bal_off_thresh_mV:
                csb_state->pack_config->bal_off_thresh_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_pack_cells_p:
                csb_state->pack_config->pack_cells_p = my_atou(argv[2]);
     a1c:	61e3      	str	r3, [r4, #28]
                Board_Println("Done!");
     a1e:	482d      	ldr	r0, [pc, #180]	; (ad4 <set+0x304>)
     a20:	f7ff fbb6 	bl	190 <Board_Println>
                break;
     a24:	e704      	b.n	830 <set+0x60>
            case RWL_cv_min_current_mA:
                csb_state->pack_config->cv_min_current_mA = my_atou(argv[2]);
     a26:	4643      	mov	r3, r8
     a28:	6899      	ldr	r1, [r3, #8]
     a2a:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a2c:	780a      	ldrb	r2, [r1, #0]
     a2e:	2a00      	cmp	r2, #0
     a30:	d029      	beq.n	a86 <set+0x2b6>
     a32:	2300      	movs	r3, #0
     a34:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     a36:	0098      	lsls	r0, r3, #2
     a38:	18c3      	adds	r3, r0, r3
     a3a:	005b      	lsls	r3, r3, #1
     a3c:	3101      	adds	r1, #1
     a3e:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a40:	1e4a      	subs	r2, r1, #1
     a42:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     a44:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a46:	2a00      	cmp	r2, #0
     a48:	d1f5      	bne.n	a36 <set+0x266>
            case RWL_pack_cells_p:
                csb_state->pack_config->pack_cells_p = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_min_current_mA:
                csb_state->pack_config->cv_min_current_mA = my_atou(argv[2]);
     a4a:	6223      	str	r3, [r4, #32]
                Board_Println("Done!");
     a4c:	4821      	ldr	r0, [pc, #132]	; (ad4 <set+0x304>)
     a4e:	f7ff fb9f 	bl	190 <Board_Println>
                break;
     a52:	e6ed      	b.n	830 <set+0x60>
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cc_cell_voltage_mV:
                csb_state->pack_config->cc_cell_voltage_mV = my_atou(argv[2]);
     a54:	4643      	mov	r3, r8
     a56:	6899      	ldr	r1, [r3, #8]
     a58:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a5a:	780a      	ldrb	r2, [r1, #0]
     a5c:	2a00      	cmp	r2, #0
     a5e:	d010      	beq.n	a82 <set+0x2b2>
     a60:	2300      	movs	r3, #0
     a62:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     a64:	0098      	lsls	r0, r3, #2
     a66:	18c3      	adds	r3, r0, r3
     a68:	005b      	lsls	r3, r3, #1
     a6a:	3101      	adds	r1, #1
     a6c:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a6e:	1e4a      	subs	r2, r1, #1
     a70:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     a72:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a74:	2a00      	cmp	r2, #0
     a76:	d1f5      	bne.n	a64 <set+0x294>
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cc_cell_voltage_mV:
                csb_state->pack_config->cc_cell_voltage_mV = my_atou(argv[2]);
     a78:	62a3      	str	r3, [r4, #40]	; 0x28
                Board_Println("Done!");
     a7a:	4816      	ldr	r0, [pc, #88]	; (ad4 <set+0x304>)
     a7c:	f7ff fb88 	bl	190 <Board_Println>
                break;
     a80:	e6d6      	b.n	830 <set+0x60>
static uint32_t lastPackCurrentPrintTime = 0;
static uint32_t lastPackVoltagePrintTime = 0;

// [TODO] Fix to not parse strings falsely
uint32_t my_atou(const char *str) {
    uint32_t res = 0; // Initialize result
     a82:	2300      	movs	r3, #0
     a84:	e7f8      	b.n	a78 <set+0x2a8>
     a86:	2300      	movs	r3, #0
     a88:	e7df      	b.n	a4a <set+0x27a>
     a8a:	2300      	movs	r3, #0
     a8c:	e798      	b.n	9c0 <set+0x1f0>
     a8e:	2300      	movs	r3, #0
     a90:	e7c4      	b.n	a1c <set+0x24c>
     a92:	2300      	movs	r3, #0
     a94:	e74d      	b.n	932 <set+0x162>
     a96:	2300      	movs	r3, #0
     a98:	e7a9      	b.n	9ee <set+0x21e>
     a9a:	2300      	movs	r3, #0
     a9c:	e719      	b.n	8d2 <set+0x102>
     a9e:	2300      	movs	r3, #0
     aa0:	e777      	b.n	992 <set+0x1c2>
     aa2:	2300      	movs	r3, #0
     aa4:	e72d      	b.n	902 <set+0x132>
     aa6:	2300      	movs	r3, #0
     aa8:	e75b      	b.n	962 <set+0x192>
     aaa:	2300      	movs	r3, #0
     aac:	e6e1      	b.n	872 <set+0xa2>
     aae:	2300      	movs	r3, #0
     ab0:	e6f7      	b.n	8a2 <set+0xd2>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	1000022c 	.word	0x1000022c
     ab8:	00002ac4 	.word	0x00002ac4
     abc:	00002bb4 	.word	0x00002bb4
     ac0:	00002bc0 	.word	0x00002bc0
     ac4:	00002c10 	.word	0x00002c10
     ac8:	00002bc8 	.word	0x00002bc8
     acc:	00002a64 	.word	0x00002a64
     ad0:	00002bf4 	.word	0x00002bf4
     ad4:	00002bec 	.word	0x00002bec

00000ad8 <get>:

    // return result.
    return res;
}

static void get(const char * const * argv) {
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ada:	4d50      	ldr	r5, [pc, #320]	; (c1c <get+0x144>)
     adc:	b087      	sub	sp, #28
     ade:	6846      	ldr	r6, [r0, #4]
     ae0:	1d2f      	adds	r7, r5, #4
     ae2:	494f      	ldr	r1, [pc, #316]	; (c20 <get+0x148>)
    rw_loc_label_t rwloc;

    //loop over r/w entries
    bool foundloc = false;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
     ae4:	2400      	movs	r4, #0
     ae6:	e000      	b.n	aea <get+0x12>
     ae8:	cf02      	ldmia	r7!, {r1}
        if (strcmp(argv[1],locstring[rwloc]) == 0){
     aea:	0030      	movs	r0, r6
     aec:	f001 fee6 	bl	28bc <strcmp>
     af0:	2800      	cmp	r0, #0
     af2:	d015      	beq.n	b20 <get+0x48>
static void get(const char * const * argv) {
    rw_loc_label_t rwloc;

    //loop over r/w entries
    bool foundloc = false;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
     af4:	3401      	adds	r4, #1
     af6:	b2e4      	uxtb	r4, r4
     af8:	2c0c      	cmp	r4, #12
     afa:	d1f5      	bne.n	ae8 <get+0x10>
     afc:	4949      	ldr	r1, [pc, #292]	; (c24 <get+0x14c>)
     afe:	e000      	b.n	b02 <get+0x2a>
     b00:	6b29      	ldr	r1, [r5, #48]	; 0x30
    }
    else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
            if (strcmp(argv[1],locstring[roloc]) == 0){
     b02:	0030      	movs	r0, r6
     b04:	f001 feda 	bl	28bc <strcmp>
     b08:	2800      	cmp	r0, #0
     b0a:	d00f      	beq.n	b2c <get+0x54>

    }
    else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
     b0c:	3401      	adds	r4, #1
     b0e:	b2e4      	uxtb	r4, r4
     b10:	3504      	adds	r5, #4
     b12:	2c11      	cmp	r4, #17
     b14:	d1f4      	bne.n	b00 <get+0x28>
                case ROL_LENGTH:
                    break; //how the hell?
            }
        }
        else{
            Board_Println("invalid get location");
     b16:	4844      	ldr	r0, [pc, #272]	; (c28 <get+0x150>)
     b18:	f7ff fb3a 	bl	190 <Board_Println>
        }
    }
}
     b1c:	b007      	add	sp, #28
     b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }
    }

    if (foundloc) {
        char tempstr[20];
        switch (rwloc) {
     b20:	2c0b      	cmp	r4, #11
     b22:	d83e      	bhi.n	ba2 <get+0xca>
     b24:	4b41      	ldr	r3, [pc, #260]	; (c2c <get+0x154>)
     b26:	00a4      	lsls	r4, r4, #2
     b28:	591b      	ldr	r3, [r3, r4]
     b2a:	469f      	mov	pc, r3
                break;
            }
        }
        if (foundloc) {
            char tempstr[20];
            switch (roloc) {
     b2c:	2c0e      	cmp	r4, #14
     b2e:	d017      	beq.n	b60 <get+0x88>
     b30:	d90f      	bls.n	b52 <get+0x7a>
     b32:	2c0f      	cmp	r4, #15
     b34:	d030      	beq.n	b98 <get+0xc0>
     b36:	2c10      	cmp	r4, #16
     b38:	d117      	bne.n	b6a <get+0x92>
                    utoa(csb_input->pack_status->pack_voltage_mV, tempstr,10);
                    Board_Println(tempstr);
                    break;
                case ROL_fault:
                    //change this to say what fault
                    utoa(csb_input->low_side_cntr_fault, tempstr,10);
     b3a:	4b3d      	ldr	r3, [pc, #244]	; (c30 <get+0x158>)
     b3c:	681a      	ldr	r2, [r3, #0]
     b3e:	2320      	movs	r3, #32
     b40:	5cd0      	ldrb	r0, [r2, r3]
     b42:	220a      	movs	r2, #10
     b44:	a901      	add	r1, sp, #4
     b46:	f001 ff77 	bl	2a38 <utoa>
                    Board_Println(tempstr);
     b4a:	a801      	add	r0, sp, #4
     b4c:	f7ff fb20 	bl	190 <Board_Println>
        }
        else{
            Board_Println("invalid get location");
        }
    }
}
     b50:	e7e4      	b.n	b1c <get+0x44>
                break;
            }
        }
        if (foundloc) {
            char tempstr[20];
            switch (roloc) {
     b52:	2c0d      	cmp	r4, #13
     b54:	d109      	bne.n	b6a <get+0x92>
                    Board_Println(CSB_SSM_MODE_NAMES[csb_state->curr_mode]);
                    Board_Println(CSB_INIT_MODE_NAMES[csb_state->init_state]);
                    Board_Println(CSB_CHARGE_MODE_NAMES[csb_state->charge_state]);
                    break;
                case ROL_pack_cell_max_mV:
                    utoa(csb_input->pack_status->pack_cell_max_mV, tempstr,10);
     b56:	4b36      	ldr	r3, [pc, #216]	; (c30 <get+0x158>)
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	6818      	ldr	r0, [r3, #0]
     b5e:	e7f0      	b.n	b42 <get+0x6a>
                    Board_Println(tempstr);
                    break;
                case ROL_pack_current_mA:
                    utoa(csb_input->pack_status->pack_current_mA, tempstr,10);
     b60:	4b33      	ldr	r3, [pc, #204]	; (c30 <get+0x158>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	6858      	ldr	r0, [r3, #4]
     b68:	e7eb      	b.n	b42 <get+0x6a>
        }
        if (foundloc) {
            char tempstr[20];
            switch (roloc) {
                case ROL_state:
                    Board_Println(CSB_SSM_MODE_NAMES[csb_state->curr_mode]);
     b6a:	4c32      	ldr	r4, [pc, #200]	; (c34 <get+0x15c>)
     b6c:	4a32      	ldr	r2, [pc, #200]	; (c38 <get+0x160>)
     b6e:	6823      	ldr	r3, [r4, #0]
     b70:	791b      	ldrb	r3, [r3, #4]
     b72:	009b      	lsls	r3, r3, #2
     b74:	5898      	ldr	r0, [r3, r2]
     b76:	f7ff fb0b 	bl	190 <Board_Println>
                    Board_Println(CSB_INIT_MODE_NAMES[csb_state->init_state]);
     b7a:	6823      	ldr	r3, [r4, #0]
     b7c:	4a2f      	ldr	r2, [pc, #188]	; (c3c <get+0x164>)
     b7e:	795b      	ldrb	r3, [r3, #5]
     b80:	009b      	lsls	r3, r3, #2
     b82:	5898      	ldr	r0, [r3, r2]
     b84:	f7ff fb04 	bl	190 <Board_Println>
                    Board_Println(CSB_CHARGE_MODE_NAMES[csb_state->charge_state]);
     b88:	6823      	ldr	r3, [r4, #0]
     b8a:	4a2d      	ldr	r2, [pc, #180]	; (c40 <get+0x168>)
     b8c:	799b      	ldrb	r3, [r3, #6]
     b8e:	009b      	lsls	r3, r3, #2
     b90:	5898      	ldr	r0, [r3, r2]
     b92:	f7ff fafd 	bl	190 <Board_Println>
                    break;
     b96:	e7c1      	b.n	b1c <get+0x44>
                case ROL_pack_current_mA:
                    utoa(csb_input->pack_status->pack_current_mA, tempstr,10);
                    Board_Println(tempstr);
                    break;
                case ROL_pack_voltage_mV:
                    utoa(csb_input->pack_status->pack_voltage_mV, tempstr,10);
     b98:	4b25      	ldr	r3, [pc, #148]	; (c30 <get+0x158>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	6898      	ldr	r0, [r3, #8]
     ba0:	e7cf      	b.n	b42 <get+0x6a>

    if (foundloc) {
        char tempstr[20];
        switch (rwloc) {
            case RWL_cell_min_mV:
                utoa(csb_state->pack_config->cell_min_mV, tempstr,10);
     ba2:	4b24      	ldr	r3, [pc, #144]	; (c34 <get+0x15c>)
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	681b      	ldr	r3, [r3, #0]
     ba8:	6818      	ldr	r0, [r3, #0]
     baa:	e7ca      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_cell_max_mV:
                utoa(csb_state->pack_config->cell_max_mV, tempstr,10);
     bac:	4b21      	ldr	r3, [pc, #132]	; (c34 <get+0x15c>)
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	681b      	ldr	r3, [r3, #0]
     bb2:	6858      	ldr	r0, [r3, #4]
     bb4:	e7c5      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_cell_capacity_cAh:
                utoa(csb_state->pack_config->cell_capacity_cAh, tempstr,10);
     bb6:	4b1f      	ldr	r3, [pc, #124]	; (c34 <get+0x15c>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	6898      	ldr	r0, [r3, #8]
     bbe:	e7c0      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_num_modules:
                utoa(csb_state->pack_config->num_modules, tempstr,10);
     bc0:	4b1c      	ldr	r3, [pc, #112]	; (c34 <get+0x15c>)
     bc2:	681b      	ldr	r3, [r3, #0]
     bc4:	681b      	ldr	r3, [r3, #0]
     bc6:	68d8      	ldr	r0, [r3, #12]
     bc8:	e7bb      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_module_cell_count:
                utoa(csb_state->pack_config->module_cell_count, tempstr,10);
     bca:	4b1a      	ldr	r3, [pc, #104]	; (c34 <get+0x15c>)
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
     bd2:	e7b6      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_cell_charge_c_rating_cC:
              utoa(csb_state->pack_config->cell_charge_c_rating_cC, tempstr,10);
     bd4:	4b17      	ldr	r3, [pc, #92]	; (c34 <get+0x15c>)
     bd6:	681b      	ldr	r3, [r3, #0]
     bd8:	681b      	ldr	r3, [r3, #0]
     bda:	6918      	ldr	r0, [r3, #16]
     bdc:	e7b1      	b.n	b42 <get+0x6a>
              Board_Println(tempstr);
              break;
            case RWL_bal_on_thresh_mV:
                utoa(csb_state->pack_config->bal_on_thresh_mV, tempstr,10);
     bde:	4b15      	ldr	r3, [pc, #84]	; (c34 <get+0x15c>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	6958      	ldr	r0, [r3, #20]
     be6:	e7ac      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_bal_off_thresh_mV:
                utoa(csb_state->pack_config->bal_off_thresh_mV, tempstr,10);
     be8:	4b12      	ldr	r3, [pc, #72]	; (c34 <get+0x15c>)
     bea:	681b      	ldr	r3, [r3, #0]
     bec:	681b      	ldr	r3, [r3, #0]
     bee:	6998      	ldr	r0, [r3, #24]
     bf0:	e7a7      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_pack_cells_p:
                utoa(csb_state->pack_config->pack_cells_p, tempstr,10);
     bf2:	4b10      	ldr	r3, [pc, #64]	; (c34 <get+0x15c>)
     bf4:	681b      	ldr	r3, [r3, #0]
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	69d8      	ldr	r0, [r3, #28]
     bfa:	e7a2      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_cv_min_current_mA:
                utoa(csb_state->pack_config->cv_min_current_mA, tempstr,10);
     bfc:	4b0d      	ldr	r3, [pc, #52]	; (c34 <get+0x15c>)
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	681b      	ldr	r3, [r3, #0]
     c02:	6a18      	ldr	r0, [r3, #32]
     c04:	e79d      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_cv_min_current_ms:
                utoa(csb_state->pack_config->cv_min_current_ms, tempstr,10);
     c06:	4b0b      	ldr	r3, [pc, #44]	; (c34 <get+0x15c>)
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
     c0e:	e798      	b.n	b42 <get+0x6a>
                Board_Println(tempstr);
                break;
            case RWL_cc_cell_voltage_mV:
                utoa(csb_state->pack_config->cc_cell_voltage_mV, tempstr,10);
     c10:	4b08      	ldr	r3, [pc, #32]	; (c34 <get+0x15c>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	6a98      	ldr	r0, [r3, #40]	; 0x28
     c18:	e793      	b.n	b42 <get+0x6a>
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	00002ac4 	.word	0x00002ac4
     c20:	00002bb4 	.word	0x00002bb4
     c24:	00002bc0 	.word	0x00002bc0
     c28:	00002c24 	.word	0x00002c24
     c2c:	00002a94 	.word	0x00002a94
     c30:	10000228 	.word	0x10000228
     c34:	1000022c 	.word	0x1000022c
     c38:	00002b08 	.word	0x00002b08
     c3c:	00002f94 	.word	0x00002f94
     c40:	00002fac 	.word	0x00002fac

00000c44 <chrg>:
    } else {
        Board_Println("Must be in standby");
    }
}

static void chrg(const char * const * argv) {
     c44:	b510      	push	{r4, lr}
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
     c46:	4b0e      	ldr	r3, [pc, #56]	; (c80 <chrg+0x3c>)
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	791b      	ldrb	r3, [r3, #4]
     c4c:	3b01      	subs	r3, #1
     c4e:	2b01      	cmp	r3, #1
     c50:	d903      	bls.n	c5a <chrg+0x16>
            console_output->valid_mode_request = true;
            console_output->mode_request = CSB_SSM_MODE_CHARGE;
            Board_Println("chrg on");
        }
    } else {
        Board_Println("Must be in standby");
     c52:	480c      	ldr	r0, [pc, #48]	; (c84 <chrg+0x40>)
     c54:	f7ff fa9c 	bl	190 <Board_Println>
    }
}
     c58:	bd10      	pop	{r4, pc}

static void chrg(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
            csb_state->curr_mode == CSB_SSM_MODE_CHARGE) {
        if (console_output->valid_mode_request) {
     c5a:	4b0b      	ldr	r3, [pc, #44]	; (c88 <chrg+0x44>)
     c5c:	681b      	ldr	r3, [r3, #0]
     c5e:	781a      	ldrb	r2, [r3, #0]
     c60:	2a00      	cmp	r2, #0
     c62:	d005      	beq.n	c70 <chrg+0x2c>
            console_output->valid_mode_request = false;
     c64:	2200      	movs	r2, #0
            Board_Println("chrg off");
     c66:	4809      	ldr	r0, [pc, #36]	; (c8c <chrg+0x48>)
static void chrg(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
            csb_state->curr_mode == CSB_SSM_MODE_CHARGE) {
        if (console_output->valid_mode_request) {
            console_output->valid_mode_request = false;
     c68:	701a      	strb	r2, [r3, #0]
            Board_Println("chrg off");
     c6a:	f7ff fa91 	bl	190 <Board_Println>
     c6e:	e7f3      	b.n	c58 <chrg+0x14>
        } else {
            console_output->valid_mode_request = true;
     c70:	2201      	movs	r2, #1
     c72:	701a      	strb	r2, [r3, #0]
            console_output->mode_request = CSB_SSM_MODE_CHARGE;
     c74:	3201      	adds	r2, #1
     c76:	709a      	strb	r2, [r3, #2]
            Board_Println("chrg on");
     c78:	4805      	ldr	r0, [pc, #20]	; (c90 <chrg+0x4c>)
     c7a:	f7ff fa89 	bl	190 <Board_Println>
     c7e:	e7eb      	b.n	c58 <chrg+0x14>
     c80:	1000022c 	.word	0x1000022c
     c84:	00002c50 	.word	0x00002c50
     c88:	1000021c 	.word	0x1000021c
     c8c:	00002c3c 	.word	0x00002c3c
     c90:	00002c48 	.word	0x00002c48

00000c94 <config_def>:
            Board_Println_BLOCKING(locstring[i]); //blocking print.
        }
    }
}

static void config_def(const char * const * argv) {
     c94:	b510      	push	{r4, lr}
     c96:	6844      	ldr	r4, [r0, #4]
  bool foundloc = false;
  config_loc_label_t configloc;
  for (configloc = 0; configloc< CONL_LENGTH; ++configloc){
      if (strcmp(argv[1],config_locstring[configloc]) == 0){
     c98:	490f      	ldr	r1, [pc, #60]	; (cd8 <config_def+0x44>)
     c9a:	0020      	movs	r0, r4
     c9c:	f001 fe0e 	bl	28bc <strcmp>
     ca0:	2800      	cmp	r0, #0
     ca2:	d009      	beq.n	cb8 <config_def+0x24>
     ca4:	490d      	ldr	r1, [pc, #52]	; (cdc <config_def+0x48>)
     ca6:	0020      	movs	r0, r4
     ca8:	f001 fe08 	bl	28bc <strcmp>
     cac:	2800      	cmp	r0, #0
     cae:	d00b      	beq.n	cc8 <config_def+0x34>
              break;
          case CONL_LENGTH:
              break;
      }
  } else {
      Board_Println("invalid location");
     cb0:	480b      	ldr	r0, [pc, #44]	; (ce0 <config_def+0x4c>)
     cb2:	f7ff fa6d 	bl	190 <Board_Println>
  }
}
     cb6:	bd10      	pop	{r4, pc}
      }
  }
  if (foundloc) {
      switch (configloc) {
          case CONL_MY18:
              MY18_Pack_Config(csb_state);
     cb8:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <config_def+0x50>)
     cba:	6818      	ldr	r0, [r3, #0]
     cbc:	f000 fcf2 	bl	16a4 <MY18_Pack_Config>
              Board_Println("Done!");
     cc0:	4809      	ldr	r0, [pc, #36]	; (ce8 <config_def+0x54>)
     cc2:	f7ff fa65 	bl	190 <Board_Println>
     cc6:	e7f6      	b.n	cb6 <config_def+0x22>
              break;
          case CONL_MY16:
              MY16_Pack_Config(csb_state);
     cc8:	4b06      	ldr	r3, [pc, #24]	; (ce4 <config_def+0x50>)
     cca:	6818      	ldr	r0, [r3, #0]
     ccc:	f000 fcc8 	bl	1660 <MY16_Pack_Config>
              Board_Println("Done!");
     cd0:	4805      	ldr	r0, [pc, #20]	; (ce8 <config_def+0x54>)
     cd2:	f7ff fa5d 	bl	190 <Board_Println>
              break;
     cd6:	e7ee      	b.n	cb6 <config_def+0x22>
     cd8:	00002c64 	.word	0x00002c64
     cdc:	00002c6c 	.word	0x00002c6c
     ce0:	00002c10 	.word	0x00002c10
     ce4:	1000022c 	.word	0x1000022c
     ce8:	00002bec 	.word	0x00002bec

00000cec <help>:
        }
        Board_Println("invalid location");
    }
}

static void help(const char * const * argv) {
     cec:	b570      	push	{r4, r5, r6, lr}
     cee:	491f      	ldr	r1, [pc, #124]	; (d6c <help+0x80>)
     cf0:	6846      	ldr	r6, [r0, #4]
     cf2:	4d1f      	ldr	r5, [pc, #124]	; (d70 <help+0x84>)
    command_label_t command_i = 0;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
     cf4:	2400      	movs	r4, #0
     cf6:	e000      	b.n	cfa <help+0xe>
     cf8:	6829      	ldr	r1, [r5, #0]
    {
        if (strcmp(argv[1],commands[command_i]) == 0){
     cfa:	0030      	movs	r0, r6
     cfc:	f001 fdde 	bl	28bc <strcmp>
     d00:	2800      	cmp	r0, #0
     d02:	d008      	beq.n	d16 <help+0x2a>
    }
}

static void help(const char * const * argv) {
    command_label_t command_i = 0;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
     d04:	3401      	adds	r4, #1
     d06:	b2e4      	uxtb	r4, r4
     d08:	3504      	adds	r5, #4
     d0a:	2c07      	cmp	r4, #7
     d0c:	d1f4      	bne.n	cf8 <help+0xc>
            Board_Println_BLOCKING(helpstring[command_i]); //blocking print

            break;
        }
    }
    Board_Print("");
     d0e:	4819      	ldr	r0, [pc, #100]	; (d74 <help+0x88>)
     d10:	f7ff fa2e 	bl	170 <Board_Print>
        Board_Println_BLOCKING("------r/o entries------");
        for (i = ROL_FIRST; i < (rw_loc_label_t)(ROL_LENGTH); ++i){
            Board_Println_BLOCKING(locstring[i]); //blocking print.
        }
    }
}
     d14:	bd70      	pop	{r4, r5, r6, pc}
static void help(const char * const * argv) {
    command_label_t command_i = 0;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
    {
        if (strcmp(argv[1],commands[command_i]) == 0){
            Board_Println_BLOCKING(helpstring[command_i]); //blocking print
     d16:	4b18      	ldr	r3, [pc, #96]	; (d78 <help+0x8c>)
     d18:	00a2      	lsls	r2, r4, #2
     d1a:	58d0      	ldr	r0, [r2, r3]
     d1c:	f7ff fa5c 	bl	1d8 <Board_Println_BLOCKING>

            break;
        }
    }
    Board_Print("");
     d20:	4814      	ldr	r0, [pc, #80]	; (d74 <help+0x88>)
     d22:	f7ff fa25 	bl	170 <Board_Print>

    if (command_i == C_GET || command_i == C_SET)
     d26:	2c01      	cmp	r4, #1
     d28:	d8f4      	bhi.n	d14 <help+0x28>
    {
        rw_loc_label_t i;
        Board_Println_BLOCKING("------r/w entries------");
     d2a:	4814      	ldr	r0, [pc, #80]	; (d7c <help+0x90>)
     d2c:	f7ff fa54 	bl	1d8 <Board_Println_BLOCKING>
     d30:	4d13      	ldr	r5, [pc, #76]	; (d80 <help+0x94>)
     d32:	4814      	ldr	r0, [pc, #80]	; (d84 <help+0x98>)
     d34:	1d2c      	adds	r4, r5, #4
     d36:	3530      	adds	r5, #48	; 0x30
     d38:	e000      	b.n	d3c <help+0x50>
     d3a:	cc01      	ldmia	r4!, {r0}
        for (i = 0; i < RWL_LENGTH; ++i){
            Board_Println_BLOCKING(locstring[i]); //blocking print.
     d3c:	f7ff fa4c 	bl	1d8 <Board_Println_BLOCKING>

    if (command_i == C_GET || command_i == C_SET)
    {
        rw_loc_label_t i;
        Board_Println_BLOCKING("------r/w entries------");
        for (i = 0; i < RWL_LENGTH; ++i){
     d40:	42ac      	cmp	r4, r5
     d42:	d1fa      	bne.n	d3a <help+0x4e>
            Board_Println_BLOCKING(locstring[i]); //blocking print.
        }

        Board_Println_BLOCKING("------r/o entries------");
     d44:	4810      	ldr	r0, [pc, #64]	; (d88 <help+0x9c>)
     d46:	f7ff fa47 	bl	1d8 <Board_Println_BLOCKING>
        for (i = ROL_FIRST; i < (rw_loc_label_t)(ROL_LENGTH); ++i){
            Board_Println_BLOCKING(locstring[i]); //blocking print.
     d4a:	4810      	ldr	r0, [pc, #64]	; (d8c <help+0xa0>)
     d4c:	f7ff fa44 	bl	1d8 <Board_Println_BLOCKING>
     d50:	480f      	ldr	r0, [pc, #60]	; (d90 <help+0xa4>)
     d52:	f7ff fa41 	bl	1d8 <Board_Println_BLOCKING>
     d56:	480f      	ldr	r0, [pc, #60]	; (d94 <help+0xa8>)
     d58:	f7ff fa3e 	bl	1d8 <Board_Println_BLOCKING>
     d5c:	480e      	ldr	r0, [pc, #56]	; (d98 <help+0xac>)
     d5e:	f7ff fa3b 	bl	1d8 <Board_Println_BLOCKING>
     d62:	480e      	ldr	r0, [pc, #56]	; (d9c <help+0xb0>)
     d64:	f7ff fa38 	bl	1d8 <Board_Println_BLOCKING>
     d68:	e7d4      	b.n	d14 <help+0x28>
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	00002c74 	.word	0x00002c74
     d70:	00002f70 	.word	0x00002f70
     d74:	00002b4c 	.word	0x00002b4c
     d78:	00002f70 	.word	0x00002f70
     d7c:	00002c78 	.word	0x00002c78
     d80:	00002ac4 	.word	0x00002ac4
     d84:	00002bb4 	.word	0x00002bb4
     d88:	00002c90 	.word	0x00002c90
     d8c:	00002bc0 	.word	0x00002bc0
     d90:	00002ca8 	.word	0x00002ca8
     d94:	00002cbc 	.word	0x00002cbc
     d98:	00002ccc 	.word	0x00002ccc
     d9c:	00002cdc 	.word	0x00002cdc

00000da0 <bal>:
        Board_Println("Unrecognized command!");
    }
}


static void bal(const char * const * argv) {
     da0:	b570      	push	{r4, r5, r6, lr}
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
     da2:	4b1b      	ldr	r3, [pc, #108]	; (e10 <bal+0x70>)
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	791d      	ldrb	r5, [r3, #4]
     da8:	2302      	movs	r3, #2
     daa:	439d      	bics	r5, r3
     dac:	2d01      	cmp	r5, #1
     dae:	d003      	beq.n	db8 <bal+0x18>
            console_output->mode_request = CSB_SSM_MODE_BALANCE;
            console_output->balance_mV = my_atou(argv[1]);
            Board_Println("bal on");
        }
    } else {
        Board_Println("Must be in standby");
     db0:	4818      	ldr	r0, [pc, #96]	; (e14 <bal+0x74>)
     db2:	f7ff f9ed 	bl	190 <Board_Println>
    }
}
     db6:	bd70      	pop	{r4, r5, r6, pc}
static void bal(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
            csb_state->curr_mode == CSB_SSM_MODE_BALANCE) {

        if (strcmp(argv[1],"off") == 0) {
     db8:	6844      	ldr	r4, [r0, #4]
     dba:	4917      	ldr	r1, [pc, #92]	; (e18 <bal+0x78>)
     dbc:	0020      	movs	r0, r4
     dbe:	f001 fd7d 	bl	28bc <strcmp>
            console_output->valid_mode_request = false;
     dc2:	4b16      	ldr	r3, [pc, #88]	; (e1c <bal+0x7c>)
static void bal(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
            csb_state->curr_mode == CSB_SSM_MODE_BALANCE) {

        if (strcmp(argv[1],"off") == 0) {
     dc4:	2800      	cmp	r0, #0
     dc6:	d017      	beq.n	df8 <bal+0x58>
            console_output->valid_mode_request = false;
            console_output->balance_mV = UINT32_MAX;
            Board_Println("bal off");
        } else {
            console_output->valid_mode_request = true;
     dc8:	681e      	ldr	r6, [r3, #0]
            console_output->mode_request = CSB_SSM_MODE_BALANCE;
     dca:	2303      	movs	r3, #3
        if (strcmp(argv[1],"off") == 0) {
            console_output->valid_mode_request = false;
            console_output->balance_mV = UINT32_MAX;
            Board_Println("bal off");
        } else {
            console_output->valid_mode_request = true;
     dcc:	7035      	strb	r5, [r6, #0]
            console_output->mode_request = CSB_SSM_MODE_BALANCE;
     dce:	70b3      	strb	r3, [r6, #2]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     dd0:	7822      	ldrb	r2, [r4, #0]
     dd2:	2a00      	cmp	r2, #0
     dd4:	d019      	beq.n	e0a <bal+0x6a>
     dd6:	2300      	movs	r3, #0
     dd8:	1c60      	adds	r0, r4, #1
        res = res*10 + str[i] - '0';
     dda:	0099      	lsls	r1, r3, #2
     ddc:	18cb      	adds	r3, r1, r3
     dde:	005b      	lsls	r3, r3, #1
     de0:	3001      	adds	r0, #1
     de2:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     de4:	1e42      	subs	r2, r0, #1
     de6:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     de8:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     dea:	2a00      	cmp	r2, #0
     dec:	d1f5      	bne.n	dda <bal+0x3a>
            console_output->balance_mV = UINT32_MAX;
            Board_Println("bal off");
        } else {
            console_output->valid_mode_request = true;
            console_output->mode_request = CSB_SSM_MODE_BALANCE;
            console_output->balance_mV = my_atou(argv[1]);
     dee:	6073      	str	r3, [r6, #4]
            Board_Println("bal on");
     df0:	480b      	ldr	r0, [pc, #44]	; (e20 <bal+0x80>)
     df2:	f7ff f9cd 	bl	190 <Board_Println>
     df6:	e7de      	b.n	db6 <bal+0x16>
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
            csb_state->curr_mode == CSB_SSM_MODE_BALANCE) {

        if (strcmp(argv[1],"off") == 0) {
            console_output->valid_mode_request = false;
            console_output->balance_mV = UINT32_MAX;
     df8:	2201      	movs	r2, #1
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
            csb_state->curr_mode == CSB_SSM_MODE_BALANCE) {

        if (strcmp(argv[1],"off") == 0) {
            console_output->valid_mode_request = false;
     dfa:	681b      	ldr	r3, [r3, #0]
            console_output->balance_mV = UINT32_MAX;
     dfc:	4252      	negs	r2, r2
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_IDLE ||
            csb_state->curr_mode == CSB_SSM_MODE_BALANCE) {

        if (strcmp(argv[1],"off") == 0) {
            console_output->valid_mode_request = false;
     dfe:	7018      	strb	r0, [r3, #0]
            console_output->balance_mV = UINT32_MAX;
     e00:	605a      	str	r2, [r3, #4]
            Board_Println("bal off");
     e02:	4808      	ldr	r0, [pc, #32]	; (e24 <bal+0x84>)
     e04:	f7ff f9c4 	bl	190 <Board_Println>
     e08:	e7d5      	b.n	db6 <bal+0x16>
static uint32_t lastPackCurrentPrintTime = 0;
static uint32_t lastPackVoltagePrintTime = 0;

// [TODO] Fix to not parse strings falsely
uint32_t my_atou(const char *str) {
    uint32_t res = 0; // Initialize result
     e0a:	2300      	movs	r3, #0
     e0c:	e7ef      	b.n	dee <bal+0x4e>
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	1000022c 	.word	0x1000022c
     e14:	00002c50 	.word	0x00002c50
     e18:	00002ce8 	.word	0x00002ce8
     e1c:	1000021c 	.word	0x1000021c
     e20:	00002cec 	.word	0x00002cec
     e24:	00002ce4 	.word	0x00002ce4

00000e28 <console_init>:
}

static const EXECUTE_HANDLER handlers[] = {get, set, help, config_def, bal, chrg, measure};

void console_init(CSB_INPUT_T * input, CSB_STATE_T * state, CONSOLE_OUTPUT_T *con_output){
    csb_input = input;
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <console_init+0x20>)
     e2a:	6018      	str	r0, [r3, #0]
    csb_state = state;
     e2c:	4b07      	ldr	r3, [pc, #28]	; (e4c <console_init+0x24>)
     e2e:	6019      	str	r1, [r3, #0]
    console_output = con_output;
     e30:	4b07      	ldr	r3, [pc, #28]	; (e50 <console_init+0x28>)
    console_output->valid_mode_request = false;
    console_output->mode_request = CSB_SSM_MODE_IDLE;
     e32:	2101      	movs	r1, #1
static const EXECUTE_HANDLER handlers[] = {get, set, help, config_def, bal, chrg, measure};

void console_init(CSB_INPUT_T * input, CSB_STATE_T * state, CONSOLE_OUTPUT_T *con_output){
    csb_input = input;
    csb_state = state;
    console_output = con_output;
     e34:	601a      	str	r2, [r3, #0]
    console_output->valid_mode_request = false;
     e36:	2300      	movs	r3, #0
    console_output->mode_request = CSB_SSM_MODE_IDLE;
     e38:	7091      	strb	r1, [r2, #2]

void console_init(CSB_INPUT_T * input, CSB_STATE_T * state, CONSOLE_OUTPUT_T *con_output){
    csb_input = input;
    csb_state = state;
    console_output = con_output;
    console_output->valid_mode_request = false;
     e3a:	7013      	strb	r3, [r2, #0]
    console_output->mode_request = CSB_SSM_MODE_IDLE;
    console_output->config_default = false;
     e3c:	7053      	strb	r3, [r2, #1]

    console_output->measure_on = false;
     e3e:	7213      	strb	r3, [r2, #8]
    console_output->measure_packcurrent = false;
     e40:	7253      	strb	r3, [r2, #9]
    console_output->measure_packvoltage = false;
     e42:	7293      	strb	r3, [r2, #10]
}
     e44:	4770      	bx	lr
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	10000228 	.word	0x10000228
     e4c:	1000022c 	.word	0x1000022c
     e50:	1000021c 	.word	0x1000021c

00000e54 <executerl>:

void executerl(int32_t argc, const char * const * argv){
     e54:	b5f0      	push	{r4, r5, r6, r7, lr}
     e56:	4647      	mov	r7, r8
     e58:	680e      	ldr	r6, [r1, #0]
     e5a:	b480      	push	{r7}
     e5c:	4688      	mov	r8, r1
     e5e:	0007      	movs	r7, r0
     e60:	4d11      	ldr	r5, [pc, #68]	; (ea8 <executerl+0x54>)
     e62:	4912      	ldr	r1, [pc, #72]	; (eac <executerl+0x58>)
    uint32_t command_i = 0;
    bool found_command = false;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
     e64:	2400      	movs	r4, #0
     e66:	e000      	b.n	e6a <executerl+0x16>
     e68:	6829      	ldr	r1, [r5, #0]
    {
        if (strcmp(argv[0],commands[command_i]) == 0){
     e6a:	0030      	movs	r0, r6
     e6c:	f001 fd26 	bl	28bc <strcmp>
     e70:	2800      	cmp	r0, #0
     e72:	d009      	beq.n	e88 <executerl+0x34>
}

void executerl(int32_t argc, const char * const * argv){
    uint32_t command_i = 0;
    bool found_command = false;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
     e74:	3401      	adds	r4, #1
     e76:	3504      	adds	r5, #4
     e78:	2c07      	cmp	r4, #7
     e7a:	d1f5      	bne.n	e68 <executerl+0x14>
        else {
            Board_Println("incorrect number of args");
        }
    }
    else{
        Board_Println("Unrecognized command");
     e7c:	480c      	ldr	r0, [pc, #48]	; (eb0 <executerl+0x5c>)
     e7e:	f7ff f987 	bl	190 <Board_Println>
    }
}
     e82:	bc04      	pop	{r2}
     e84:	4690      	mov	r8, r2
     e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
            found_command = true;
            break;
        }
    }
    if (found_command) {
        if (nargs[command_i] == (uint32_t)(argc-1))
     e88:	4b0a      	ldr	r3, [pc, #40]	; (eb4 <executerl+0x60>)
     e8a:	3f01      	subs	r7, #1
     e8c:	5d1b      	ldrb	r3, [r3, r4]
     e8e:	42bb      	cmp	r3, r7
     e90:	d003      	beq.n	e9a <executerl+0x46>
        {
            handlers[command_i](argv);
        }
        else {
            Board_Println("incorrect number of args");
     e92:	4809      	ldr	r0, [pc, #36]	; (eb8 <executerl+0x64>)
     e94:	f7ff f97c 	bl	190 <Board_Println>
        }
    }
    else{
        Board_Println("Unrecognized command");
    }
}
     e98:	e7f3      	b.n	e82 <executerl+0x2e>
        }
    }
    if (found_command) {
        if (nargs[command_i] == (uint32_t)(argc-1))
        {
            handlers[command_i](argv);
     e9a:	4b08      	ldr	r3, [pc, #32]	; (ebc <executerl+0x68>)
     e9c:	00a4      	lsls	r4, r4, #2
     e9e:	58e3      	ldr	r3, [r4, r3]
     ea0:	4640      	mov	r0, r8
     ea2:	4798      	blx	r3
     ea4:	e7ed      	b.n	e82 <executerl+0x2e>
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00002f70 	.word	0x00002f70
     eac:	00002c74 	.word	0x00002c74
     eb0:	00002d10 	.word	0x00002d10
     eb4:	00002f8c 	.word	0x00002f8c
     eb8:	00002cf4 	.word	0x00002cf4
     ebc:	00002b18 	.word	0x00002b18

00000ec0 <Output_Measurements>:
void Output_Measurements(
        CONSOLE_OUTPUT_T *console_output,
        CSB_INPUT_T* csb_input,
        CSB_STATE_T* csb_state,
        uint32_t msTicks
) {
     ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ec2:	001d      	movs	r5, r3

    char tempstr[20];

    if(console_output->measure_on) {
     ec4:	7a03      	ldrb	r3, [r0, #8]
void Output_Measurements(
        CONSOLE_OUTPUT_T *console_output,
        CSB_INPUT_T* csb_input,
        CSB_STATE_T* csb_state,
        uint32_t msTicks
) {
     ec6:	b087      	sub	sp, #28
     ec8:	0004      	movs	r4, r0
     eca:	000e      	movs	r6, r1

    char tempstr[20];

    if(console_output->measure_on) {
     ecc:	2b00      	cmp	r3, #0
     ece:	d013      	beq.n	ef8 <Output_Measurements+0x38>

        bool printPackCurrent = (msTicks - lastPackCurrentPrintTime) >
                PACK_CURRENT_PRINT_PERIOD_ms;
        if(console_output->measure_packcurrent && printPackCurrent) {
     ed0:	7a43      	ldrb	r3, [r0, #9]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d006      	beq.n	ee4 <Output_Measurements+0x24>
     ed6:	22fa      	movs	r2, #250	; 0xfa

    char tempstr[20];

    if(console_output->measure_on) {

        bool printPackCurrent = (msTicks - lastPackCurrentPrintTime) >
     ed8:	4f21      	ldr	r7, [pc, #132]	; (f60 <Output_Measurements+0xa0>)
                PACK_CURRENT_PRINT_PERIOD_ms;
        if(console_output->measure_packcurrent && printPackCurrent) {
     eda:	0092      	lsls	r2, r2, #2
     edc:	683b      	ldr	r3, [r7, #0]
     ede:	1aeb      	subs	r3, r5, r3
     ee0:	4293      	cmp	r3, r2
     ee2:	d824      	bhi.n	f2e <Output_Measurements+0x6e>
            lastPackCurrentPrintTime = msTicks;
        }

        bool printPackVoltage = (msTicks - lastPackVoltagePrintTime) >
                PACK_VOLTAGE_PRINT_PERIOD_ms;
        if(console_output->measure_packvoltage && printPackVoltage) {
     ee4:	7aa3      	ldrb	r3, [r4, #10]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d006      	beq.n	ef8 <Output_Measurements+0x38>
     eea:	22fa      	movs	r2, #250	; 0xfa
            Board_Println_BLOCKING(tempstr); // print pack current
            Board_Print_BLOCKING("\n");
            lastPackCurrentPrintTime = msTicks;
        }

        bool printPackVoltage = (msTicks - lastPackVoltagePrintTime) >
     eec:	4c1d      	ldr	r4, [pc, #116]	; (f64 <Output_Measurements+0xa4>)
                PACK_VOLTAGE_PRINT_PERIOD_ms;
        if(console_output->measure_packvoltage && printPackVoltage) {
     eee:	0092      	lsls	r2, r2, #2
     ef0:	6823      	ldr	r3, [r4, #0]
     ef2:	1aeb      	subs	r3, r5, r3
     ef4:	4293      	cmp	r3, r2
     ef6:	d801      	bhi.n	efc <Output_Measurements+0x3c>
            Board_Println_BLOCKING(tempstr); // print pack voltage
            Board_Print_BLOCKING("\n");
            lastPackVoltagePrintTime = msTicks;
        }
    }
}
     ef8:	b007      	add	sp, #28
     efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }

        bool printPackVoltage = (msTicks - lastPackVoltagePrintTime) >
                PACK_VOLTAGE_PRINT_PERIOD_ms;
        if(console_output->measure_packvoltage && printPackVoltage) {
            utoa(msTicks, tempstr, 10); // print msTicks
     efc:	220a      	movs	r2, #10
     efe:	a901      	add	r1, sp, #4
     f00:	0028      	movs	r0, r5
     f02:	f001 fd99 	bl	2a38 <utoa>
            Board_Print_BLOCKING(tempstr);
     f06:	a801      	add	r0, sp, #4
     f08:	f7ff f95a 	bl	1c0 <Board_Print_BLOCKING>
            Board_Print_BLOCKING(",pvolt,");
     f0c:	4816      	ldr	r0, [pc, #88]	; (f68 <Output_Measurements+0xa8>)
     f0e:	f7ff f957 	bl	1c0 <Board_Print_BLOCKING>
            utoa(csb_input->pack_status->pack_voltage_mV, tempstr, 10);
     f12:	6833      	ldr	r3, [r6, #0]
     f14:	220a      	movs	r2, #10
     f16:	6898      	ldr	r0, [r3, #8]
     f18:	a901      	add	r1, sp, #4
     f1a:	f001 fd8d 	bl	2a38 <utoa>
            Board_Println_BLOCKING(tempstr); // print pack voltage
     f1e:	a801      	add	r0, sp, #4
     f20:	f7ff f95a 	bl	1d8 <Board_Println_BLOCKING>
            Board_Print_BLOCKING("\n");
     f24:	4811      	ldr	r0, [pc, #68]	; (f6c <Output_Measurements+0xac>)
     f26:	f7ff f94b 	bl	1c0 <Board_Print_BLOCKING>
            lastPackVoltagePrintTime = msTicks;
     f2a:	6025      	str	r5, [r4, #0]
        }
    }
}
     f2c:	e7e4      	b.n	ef8 <Output_Measurements+0x38>
    if(console_output->measure_on) {

        bool printPackCurrent = (msTicks - lastPackCurrentPrintTime) >
                PACK_CURRENT_PRINT_PERIOD_ms;
        if(console_output->measure_packcurrent && printPackCurrent) {
            utoa(msTicks, tempstr, 10); // print msTicks
     f2e:	220a      	movs	r2, #10
     f30:	a901      	add	r1, sp, #4
     f32:	0028      	movs	r0, r5
     f34:	f001 fd80 	bl	2a38 <utoa>
            Board_Print_BLOCKING(tempstr);
     f38:	a801      	add	r0, sp, #4
     f3a:	f7ff f941 	bl	1c0 <Board_Print_BLOCKING>
            Board_Print_BLOCKING(",pcurr,");
     f3e:	480c      	ldr	r0, [pc, #48]	; (f70 <Output_Measurements+0xb0>)
     f40:	f7ff f93e 	bl	1c0 <Board_Print_BLOCKING>
            utoa(csb_input->pack_status->pack_current_mA, tempstr, 10);
     f44:	6833      	ldr	r3, [r6, #0]
     f46:	220a      	movs	r2, #10
     f48:	6858      	ldr	r0, [r3, #4]
     f4a:	a901      	add	r1, sp, #4
     f4c:	f001 fd74 	bl	2a38 <utoa>
            Board_Println_BLOCKING(tempstr); // print pack current
     f50:	a801      	add	r0, sp, #4
     f52:	f7ff f941 	bl	1d8 <Board_Println_BLOCKING>
            Board_Print_BLOCKING("\n");
     f56:	4805      	ldr	r0, [pc, #20]	; (f6c <Output_Measurements+0xac>)
     f58:	f7ff f932 	bl	1c0 <Board_Print_BLOCKING>
            lastPackCurrentPrintTime = msTicks;
     f5c:	603d      	str	r5, [r7, #0]
     f5e:	e7c1      	b.n	ee4 <Output_Measurements+0x24>
     f60:	10000220 	.word	0x10000220
     f64:	10000224 	.word	0x10000224
     f68:	00002d34 	.word	0x00002d34
     f6c:	00002d30 	.word	0x00002d30
     f70:	00002d28 	.word	0x00002d28

00000f74 <Init_Structs>:

// memory for console
static microrl_t rl;
static CONSOLE_OUTPUT_T console_output;

void Init_Structs(void) {
     f74:	b570      	push	{r4, r5, r6, lr}
  csb_output.voltage_req_mV = 0;
     f76:	2400      	movs	r4, #0
     f78:	4b22      	ldr	r3, [pc, #136]	; (1004 <Init_Structs+0x90>)
  csb_output.current_req_mA = 0;
  csb_output.send_bms_config = false;
  csb_output.close_contactors = false;
  csb_output.charger_on = false;

  csb_state.pack_config = &pack_config;
     f7a:	4d23      	ldr	r5, [pc, #140]	; (1008 <Init_Structs+0x94>)
     f7c:	4e23      	ldr	r6, [pc, #140]	; (100c <Init_Structs+0x98>)
// memory for console
static microrl_t rl;
static CONSOLE_OUTPUT_T console_output;

void Init_Structs(void) {
  csb_output.voltage_req_mV = 0;
     f7e:	601c      	str	r4, [r3, #0]
  csb_output.current_req_mA = 0;
     f80:	605c      	str	r4, [r3, #4]
  csb_output.send_bms_config = false;
     f82:	721c      	strb	r4, [r3, #8]
  csb_output.close_contactors = false;
     f84:	725c      	strb	r4, [r3, #9]
  csb_output.charger_on = false;
     f86:	729c      	strb	r4, [r3, #10]
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
     f88:	4821      	ldr	r0, [pc, #132]	; (1010 <Init_Structs+0x9c>)
  csb_state.pack_config = &pack_config;
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
     f8a:	4b22      	ldr	r3, [pc, #136]	; (1014 <Init_Structs+0xa0>)
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     f8c:	22b4      	movs	r2, #180	; 0xb4
     f8e:	2100      	movs	r1, #0
  csb_state.pack_config = &pack_config;
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
     f90:	60b3      	str	r3, [r6, #8]
  csb_output.current_req_mA = 0;
  csb_output.send_bms_config = false;
  csb_output.close_contactors = false;
  csb_output.charger_on = false;

  csb_state.pack_config = &pack_config;
     f92:	6035      	str	r5, [r6, #0]
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
     f94:	7134      	strb	r4, [r6, #4]
  csb_state.init_state = CSB_INIT_OFF;
     f96:	7174      	strb	r4, [r6, #5]
  csb_state.charge_state = CSB_CHARGE_OFF;
     f98:	71b4      	strb	r4, [r6, #6]
  csb_state.idle_state = CSB_IDLE_OFF;
     f9a:	71f4      	strb	r4, [r6, #7]
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
     f9c:	6130      	str	r0, [r6, #16]
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     f9e:	f001 fc47 	bl	2830 <memset>
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     fa2:	22b4      	movs	r2, #180	; 0xb4
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
     fa4:	481c      	ldr	r0, [pc, #112]	; (1018 <Init_Structs+0xa4>)
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     fa6:	0092      	lsls	r2, r2, #2
     fa8:	2100      	movs	r1, #0
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
     faa:	60f0      	str	r0, [r6, #12]
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
     fac:	f001 fc40 	bl	2830 <memset>
  pack_config.cv_min_current_mA = 0;
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
     fb0:	2201      	movs	r2, #1
     fb2:	4b1a      	ldr	r3, [pc, #104]	; (101c <Init_Structs+0xa8>)
  csb_input.receive_bms_config = false;
  csb_input.charger_on = false;
  csb_input.imd_fault = false;
  csb_input.int_fault = false;
  csb_input.bms_fault = false;
  csb_input.low_side_cntr_fault = false;
     fb4:	2020      	movs	r0, #32
  pack_config.cv_min_current_mA = 0;
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
     fb6:	711a      	strb	r2, [r3, #4]
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
     fb8:	4a19      	ldr	r2, [pc, #100]	; (1020 <Init_Structs+0xac>)
  csb_input.elcon_output_current = 0;
  csb_input.elcon_has_hardware_failure = false;
  csb_input.elcon_over_temp_protection_on = false;
  csb_input.elcon_is_input_voltage_wrong = false;
  csb_input.elcon_battery_voltage_not_detected = false;
  csb_input.pack_status = &pack_status;
     fba:	491a      	ldr	r1, [pc, #104]	; (1024 <Init_Structs+0xb0>)
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
     fbc:	6812      	ldr	r2, [r2, #0]
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);

  pack_config.module_cell_count = 0;
     fbe:	62ec      	str	r4, [r5, #44]	; 0x2c
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
     fc0:	60da      	str	r2, [r3, #12]
  csb_input.elcon_output_voltage = 0;
     fc2:	2200      	movs	r2, #0
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);

  pack_config.module_cell_count = 0;
  pack_config.cell_min_mV = 0;
     fc4:	602c      	str	r4, [r5, #0]
  pack_config.cell_max_mV = 0;
     fc6:	606c      	str	r4, [r5, #4]
  pack_config.cell_capacity_cAh = 0;
     fc8:	60ac      	str	r4, [r5, #8]
  pack_config.num_modules = 0;
     fca:	60ec      	str	r4, [r5, #12]
  pack_config.cell_charge_c_rating_cC = 0;
     fcc:	612c      	str	r4, [r5, #16]
  pack_config.bal_on_thresh_mV = 0;
     fce:	616c      	str	r4, [r5, #20]
  pack_config.bal_off_thresh_mV = 0;
     fd0:	61ac      	str	r4, [r5, #24]
  pack_config.pack_cells_p = 0;
     fd2:	61ec      	str	r4, [r5, #28]
  pack_config.cv_min_current_mA = 0;
     fd4:	622c      	str	r4, [r5, #32]
  pack_config.cv_min_current_ms = 0;
     fd6:	626c      	str	r4, [r5, #36]	; 0x24
  pack_config.cc_cell_voltage_mV = 0;
     fd8:	62ac      	str	r4, [r5, #40]	; 0x28

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
     fda:	609c      	str	r4, [r3, #8]
  csb_input.msTicks = msTicks;
  csb_input.elcon_output_voltage = 0;
     fdc:	821c      	strh	r4, [r3, #16]
  csb_input.elcon_output_current = 0;
     fde:	825c      	strh	r4, [r3, #18]
  csb_input.elcon_has_hardware_failure = false;
     fe0:	751a      	strb	r2, [r3, #20]
  csb_input.elcon_over_temp_protection_on = false;
     fe2:	755a      	strb	r2, [r3, #21]
  csb_input.elcon_is_input_voltage_wrong = false;
     fe4:	759a      	strb	r2, [r3, #22]
  csb_input.elcon_battery_voltage_not_detected = false;
     fe6:	75da      	strb	r2, [r3, #23]
  csb_input.pack_status = &pack_status;
     fe8:	6019      	str	r1, [r3, #0]
  csb_input.balance_req = false;
     fea:	769a      	strb	r2, [r3, #26]
  csb_input.contactors_closed = false;
     fec:	76da      	strb	r2, [r3, #27]
  csb_input.receive_bms_config = false;
     fee:	765a      	strb	r2, [r3, #25]
  csb_input.charger_on = false;
     ff0:	771a      	strb	r2, [r3, #28]
  csb_input.imd_fault = false;
     ff2:	775a      	strb	r2, [r3, #29]
  csb_input.int_fault = false;
     ff4:	779a      	strb	r2, [r3, #30]
  csb_input.bms_fault = false;
     ff6:	77da      	strb	r2, [r3, #31]
  csb_input.low_side_cntr_fault = false;
     ff8:	541a      	strb	r2, [r3, r0]

  pack_status.pack_cell_max_mV = 0;
     ffa:	600c      	str	r4, [r1, #0]
  pack_status.pack_current_mA = 0;
     ffc:	604c      	str	r4, [r1, #4]
  pack_status.pack_voltage_mV = 0;
     ffe:	608c      	str	r4, [r1, #8]
}
    1000:	bd70      	pop	{r4, r5, r6, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	1000032c 	.word	0x1000032c
    1008:	100002f0 	.word	0x100002f0
    100c:	100006d0 	.word	0x100006d0
    1010:	1000023c 	.word	0x1000023c
    1014:	0007a120 	.word	0x0007a120
    1018:	10000400 	.word	0x10000400
    101c:	10000338 	.word	0x10000338
    1020:	10000724 	.word	0x10000724
    1024:	10000320 	.word	0x10000320

00001028 <Process_Input>:
void Process_Output(CSB_INPUT_T* csb_input, CSB_OUTPUT_T* csb_output, CSB_STATE_T* csb_state) {
  Board_Contactors_Set(csb_output->close_contactors);
  Board_Can_ProcessOutput(csb_input, csb_state, csb_output);
}

void Process_Input(CSB_INPUT_T* csb_input, CSB_STATE_T* csb_state) {
    1028:	b510      	push	{r4, lr}
    102a:	0004      	movs	r4, r0
  Board_Can_ProcessInput(csb_input, csb_state);
    102c:	f7ff f926 	bl	27c <Board_Can_ProcessInput>
  Board_GetModeRequest();
    1030:	f7ff fa38 	bl	4a4 <Board_GetModeRequest>
  csb_input->msTicks = msTicks;
    1034:	4b04      	ldr	r3, [pc, #16]	; (1048 <Process_Input+0x20>)
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	60e3      	str	r3, [r4, #12]
  csb_input->contactors_closed = Board_Contactors_Closed();
    103a:	f7ff fa2f 	bl	49c <Board_Contactors_Closed>
    103e:	76e0      	strb	r0, [r4, #27]
  Board_Check_Faults(csb_input);
    1040:	0020      	movs	r0, r4
    1042:	f7ff fa35 	bl	4b0 <Board_Check_Faults>
}
    1046:	bd10      	pop	{r4, pc}
    1048:	10000724 	.word	0x10000724

0000104c <Process_Keyboard>:

void Process_Keyboard(void) {
    104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t readln = Board_Read(str,50);
    104e:	4e08      	ldr	r6, [pc, #32]	; (1070 <Process_Keyboard+0x24>)
    1050:	2132      	movs	r1, #50	; 0x32
    1052:	0030      	movs	r0, r6
    1054:	f7ff f8a8 	bl	1a8 <Board_Read>
    1058:	1e05      	subs	r5, r0, #0
    uint32_t i;
    for(i = 0; i < readln; i++) {
    105a:	d008      	beq.n	106e <Process_Keyboard+0x22>
    105c:	2400      	movs	r4, #0
    105e:	4f05      	ldr	r7, [pc, #20]	; (1074 <Process_Keyboard+0x28>)
        microrl_insert_char(&rl, str[i]);
    1060:	5d31      	ldrb	r1, [r6, r4]
    1062:	0038      	movs	r0, r7
}

void Process_Keyboard(void) {
    uint32_t readln = Board_Read(str,50);
    uint32_t i;
    for(i = 0; i < readln; i++) {
    1064:	3401      	adds	r4, #1
        microrl_insert_char(&rl, str[i]);
    1066:	f000 fa5b 	bl	1520 <microrl_insert_char>
}

void Process_Keyboard(void) {
    uint32_t readln = Board_Read(str,50);
    uint32_t i;
    for(i = 0; i < readln; i++) {
    106a:	42a5      	cmp	r5, r4
    106c:	d1f8      	bne.n	1060 <Process_Keyboard+0x14>
        microrl_insert_char(&rl, str[i]);
    }
}
    106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1070:	1000035c 	.word	0x1000035c
    1074:	10000368 	.word	0x10000368

00001078 <main>:

int main(void) {
    1078:	b5f0      	push	{r4, r5, r6, r7, lr}
    107a:	4647      	mov	r7, r8
    107c:	b480      	push	{r7}
  Init_Structs();
    107e:	f7ff ff79 	bl	f74 <Init_Structs>
  Board_Can_Init(BMS_CAN_BAUD);
    1082:	4821      	ldr	r0, [pc, #132]	; (1108 <main+0x90>)
    1084:	f7ff f8b4 	bl	1f0 <Board_Can_Init>
  Board_UART_Init(UART_BAUD);
    1088:	20e1      	movs	r0, #225	; 0xe1
    108a:	0200      	lsls	r0, r0, #8
    108c:	f7ff f8b4 	bl	1f8 <Board_UART_Init>
  Board_Chip_Init();
    1090:	f7ff f850 	bl	134 <Board_Chip_Init>
  Board_GPIO_Init();
    1094:	f000 fb0a 	bl	16ac <Board_GPIO_Init>

  MY18_Pack_Config(&csb_state);
    1098:	4c1c      	ldr	r4, [pc, #112]	; (110c <main+0x94>)
    109a:	0020      	movs	r0, r4
    109c:	f000 fb02 	bl	16a4 <MY18_Pack_Config>
  SSM_Init(&csb_input, &csb_state, &csb_output, &pack_config);
    10a0:	4d1b      	ldr	r5, [pc, #108]	; (1110 <main+0x98>)
    10a2:	4e1c      	ldr	r6, [pc, #112]	; (1114 <main+0x9c>)
    10a4:	4b1c      	ldr	r3, [pc, #112]	; (1118 <main+0xa0>)
    10a6:	0032      	movs	r2, r6
    10a8:	0021      	movs	r1, r4
    10aa:	0028      	movs	r0, r5
    10ac:	f000 fc42 	bl	1934 <SSM_Init>

  //setup readline
  microrl_init(&rl, Board_Print);
    10b0:	4f1a      	ldr	r7, [pc, #104]	; (111c <main+0xa4>)
    10b2:	491b      	ldr	r1, [pc, #108]	; (1120 <main+0xa8>)
    10b4:	0038      	movs	r0, r7
    10b6:	f000 f9b1 	bl	141c <microrl_init>
  microrl_set_execute_callback(&rl, executerl);
    10ba:	0038      	movs	r0, r7
    10bc:	4919      	ldr	r1, [pc, #100]	; (1124 <main+0xac>)
    10be:	f000 f9cf 	bl	1460 <microrl_set_execute_callback>
  console_init(&csb_input, &csb_state, &console_output);
    10c2:	4f19      	ldr	r7, [pc, #100]	; (1128 <main+0xb0>)
    10c4:	0021      	movs	r1, r4
    10c6:	003a      	movs	r2, r7
    10c8:	0028      	movs	r0, r5
    10ca:	f7ff fead 	bl	e28 <console_init>
    10ce:	4b17      	ldr	r3, [pc, #92]	; (112c <main+0xb4>)
    10d0:	4698      	mov	r8, r3

  while(1) {
    Process_Keyboard();
    10d2:	f7ff ffbb 	bl	104c <Process_Keyboard>
    Process_Input(&csb_input, &csb_state);
    10d6:	0021      	movs	r1, r4
    10d8:	0028      	movs	r0, r5
    10da:	f7ff ffa5 	bl	1028 <Process_Input>
    SSM_Step(&csb_input, &csb_state, &csb_output);
    10de:	0032      	movs	r2, r6
    10e0:	0021      	movs	r1, r4
    10e2:	0028      	movs	r0, r5
    10e4:	f000 fc9a 	bl	1a1c <SSM_Step>
  pack_status.pack_current_mA = 0;
  pack_status.pack_voltage_mV = 0;
}

void Process_Output(CSB_INPUT_T* csb_input, CSB_OUTPUT_T* csb_output, CSB_STATE_T* csb_state) {
  Board_Contactors_Set(csb_output->close_contactors);
    10e8:	7a70      	ldrb	r0, [r6, #9]
    10ea:	f7ff f9dd 	bl	4a8 <Board_Contactors_Set>
  Board_Can_ProcessOutput(csb_input, csb_state, csb_output);
    10ee:	0032      	movs	r2, r6
    10f0:	0021      	movs	r1, r4
    10f2:	0028      	movs	r0, r5
    10f4:	f7ff f984 	bl	400 <Board_Can_ProcessOutput>
  while(1) {
    Process_Keyboard();
    Process_Input(&csb_input, &csb_state);
    SSM_Step(&csb_input, &csb_state, &csb_output);
    Process_Output(&csb_input, &csb_output, &csb_state);
    Output_Measurements(&console_output, &csb_input, &csb_state, msTicks);
    10f8:	4643      	mov	r3, r8
    10fa:	0022      	movs	r2, r4
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	0029      	movs	r1, r5
    1100:	0038      	movs	r0, r7
    1102:	f7ff fedd 	bl	ec0 <Output_Measurements>
    1106:	e7e4      	b.n	10d2 <main+0x5a>
    1108:	0007a120 	.word	0x0007a120
    110c:	100006d0 	.word	0x100006d0
    1110:	10000338 	.word	0x10000338
    1114:	1000032c 	.word	0x1000032c
    1118:	100002f0 	.word	0x100002f0
    111c:	10000368 	.word	0x10000368
    1120:	00000171 	.word	0x00000171
    1124:	00000e55 	.word	0x00000e55
    1128:	10000230 	.word	0x10000230
    112c:	10000724 	.word	0x10000724

00001130 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
    1130:	b5f0      	push	{r4, r5, r6, r7, lr}
    1132:	0005      	movs	r5, r0
    1134:	b083      	sub	sp, #12
    char tmp_str [6] = {0,};
    1136:	2206      	movs	r2, #6
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
    1138:	000f      	movs	r7, r1
    char tmp_str [6] = {0,};
    113a:	4668      	mov	r0, sp
    113c:	2100      	movs	r1, #0
    113e:	f001 fb77 	bl	2830 <memset>
    int i = 0, j;
    if (nmb <= 0xFFFF) {
        while (nmb > 0) {
    1142:	4b11      	ldr	r3, [pc, #68]	; (1188 <u16bit_to_str+0x58>)
    1144:	1e6a      	subs	r2, r5, #1
    1146:	429a      	cmp	r2, r3
    1148:	d819      	bhi.n	117e <u16bit_to_str+0x4e>
    114a:	2600      	movs	r6, #0
            tmp_str[i++] = (nmb % 10) + '0';
    114c:	3601      	adds	r6, #1
    114e:	1e73      	subs	r3, r6, #1
    1150:	446b      	add	r3, sp
    1152:	0028      	movs	r0, r5
    1154:	210a      	movs	r1, #10
    1156:	001c      	movs	r4, r3
    1158:	f001 fada 	bl	2710 <__aeabi_uidivmod>
    115c:	3130      	adds	r1, #48	; 0x30
    115e:	7021      	strb	r1, [r4, #0]
            nmb /=10;
    1160:	0028      	movs	r0, r5
    1162:	210a      	movs	r1, #10
    1164:	f001 fa4e 	bl	2604 <__aeabi_uidiv>
    1168:	1e05      	subs	r5, r0, #0
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
    char tmp_str [6] = {0,};
    int i = 0, j;
    if (nmb <= 0xFFFF) {
        while (nmb > 0) {
    116a:	d1ef      	bne.n	114c <u16bit_to_str+0x1c>
    116c:	0023      	movs	r3, r4
    116e:	003a      	movs	r2, r7
    1170:	19bf      	adds	r7, r7, r6
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    1172:	7819      	ldrb	r1, [r3, #0]
    1174:	3b01      	subs	r3, #1
    1176:	7011      	strb	r1, [r2, #0]
    1178:	3201      	adds	r2, #1
    if (nmb <= 0xFFFF) {
        while (nmb > 0) {
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
    117a:	4297      	cmp	r7, r2
    117c:	d1f9      	bne.n	1172 <u16bit_to_str+0x42>
            *(buf++) = tmp_str [i-j-1];
    }
    *buf = '\0';
    117e:	2300      	movs	r3, #0
    return buf;
}
    1180:	0038      	movs	r0, r7
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    }
    *buf = '\0';
    1182:	703b      	strb	r3, [r7, #0]
    return buf;
}
    1184:	b003      	add	sp, #12
    1186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1188:	0000fffe 	.word	0x0000fffe

0000118c <terminal_reset_cursor.isra.3>:
#endif  
    pThis->print (str);
}

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
    118c:	b500      	push	{lr}
    118e:	b085      	sub	sp, #20
    snprintf (str, 16, "\033[%dD\033[%dC", \
                        _COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
    char *endstr;
    strcpy (str, "\033[");
    1190:	466a      	mov	r2, sp
    1192:	4b09      	ldr	r3, [pc, #36]	; (11b8 <terminal_reset_cursor.isra.3+0x2c>)
    1194:	881b      	ldrh	r3, [r3, #0]
    1196:	8013      	strh	r3, [r2, #0]
        while (nmb > 0) {
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    1198:	2335      	movs	r3, #53	; 0x35
    119a:	7093      	strb	r3, [r2, #2]
    119c:	3301      	adds	r3, #1
    119e:	70d3      	strb	r3, [r2, #3]

#else
    char *endstr;
    strcpy (str, "\033[");
    endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
    strcpy (endstr, "D\033["); endstr += 3;
    11a0:	4b06      	ldr	r3, [pc, #24]	; (11bc <terminal_reset_cursor.isra.3+0x30>)
    11a2:	9301      	str	r3, [sp, #4]
        while (nmb > 0) {
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    11a4:	2333      	movs	r3, #51	; 0x33
    11a6:	71d3      	strb	r3, [r2, #7]
    char *endstr;
    strcpy (str, "\033[");
    endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
    strcpy (endstr, "D\033["); endstr += 3;
    endstr = u16bit_to_str (_PROMPT_LEN, endstr);
    strcpy (endstr, "C");
    11a8:	2243      	movs	r2, #67	; 0x43
    11aa:	ab02      	add	r3, sp, #8
    11ac:	801a      	strh	r2, [r3, #0]
#endif
    pThis->print (str);
    11ae:	6803      	ldr	r3, [r0, #0]
    11b0:	4668      	mov	r0, sp
    11b2:	4798      	blx	r3
}
    11b4:	b005      	add	sp, #20
    11b6:	bd00      	pop	{pc}
    11b8:	000031c8 	.word	0x000031c8
    11bc:	005b1b44 	.word	0x005b1b44

000011c0 <terminal_move_cursor.isra.4>:
#endif


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
    11c0:	b530      	push	{r4, r5, lr}
    11c2:	b085      	sub	sp, #20
{
    char str[16] = {0,};
    11c4:	2210      	movs	r2, #16
#endif


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
    11c6:	0005      	movs	r5, r0
    11c8:	000c      	movs	r4, r1
{
    char str[16] = {0,};
    11ca:	4668      	mov	r0, sp
    11cc:	2100      	movs	r1, #0
    11ce:	f001 fb2f 	bl	2830 <memset>
    } else if (offset < 0) {
        snprintf (str, 16, "\033[%dD", -(offset));
    }
#else 
    char *endstr;
    strcpy (str, "\033[");
    11d2:	4669      	mov	r1, sp
    11d4:	4b0f      	ldr	r3, [pc, #60]	; (1214 <terminal_move_cursor.isra.4+0x54>)
    11d6:	881a      	ldrh	r2, [r3, #0]
    11d8:	800a      	strh	r2, [r1, #0]
    11da:	789b      	ldrb	r3, [r3, #2]
    11dc:	708b      	strb	r3, [r1, #2]
    if (offset > 0) {
    11de:	2c00      	cmp	r4, #0
    11e0:	dd0c      	ble.n	11fc <terminal_move_cursor.isra.4+0x3c>
        endstr = u16bit_to_str (offset, str+2);
    11e2:	3102      	adds	r1, #2
    11e4:	0020      	movs	r0, r4
    11e6:	f7ff ffa3 	bl	1130 <u16bit_to_str>
        strcpy (endstr, "C");
    11ea:	2202      	movs	r2, #2
    11ec:	490a      	ldr	r1, [pc, #40]	; (1218 <terminal_move_cursor.isra.4+0x58>)
    11ee:	f001 fa95 	bl	271c <memcpy>
        endstr = u16bit_to_str (-(offset), str+2);
        strcpy (endstr, "D");
    } else
        return;
#endif  
    pThis->print (str);
    11f2:	682b      	ldr	r3, [r5, #0]
    11f4:	4668      	mov	r0, sp
    11f6:	4798      	blx	r3
}
    11f8:	b005      	add	sp, #20
    11fa:	bd30      	pop	{r4, r5, pc}
    char *endstr;
    strcpy (str, "\033[");
    if (offset > 0) {
        endstr = u16bit_to_str (offset, str+2);
        strcpy (endstr, "C");
    } else if (offset < 0) {
    11fc:	2c00      	cmp	r4, #0
    11fe:	d0fb      	beq.n	11f8 <terminal_move_cursor.isra.4+0x38>
        endstr = u16bit_to_str (-(offset), str+2);
    1200:	4260      	negs	r0, r4
    1202:	3102      	adds	r1, #2
    1204:	f7ff ff94 	bl	1130 <u16bit_to_str>
        strcpy (endstr, "D");
    1208:	2202      	movs	r2, #2
    120a:	4904      	ldr	r1, [pc, #16]	; (121c <terminal_move_cursor.isra.4+0x5c>)
    120c:	f001 fa86 	bl	271c <memcpy>
    1210:	e7ef      	b.n	11f2 <terminal_move_cursor.isra.4+0x32>
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	000031c8 	.word	0x000031c8
    1218:	00002ed0 	.word	0x00002ed0
    121c:	000031cc 	.word	0x000031cc

00001220 <terminal_print_line>:
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    1220:	b5f0      	push	{r4, r5, r6, r7, lr}
    1222:	465f      	mov	r7, fp
    1224:	4656      	mov	r6, sl
    1226:	464d      	mov	r5, r9
    1228:	4644      	mov	r4, r8
    pThis->print ("\033[K");    // delete all from cursor to end
    122a:	2394      	movs	r3, #148	; 0x94
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    122c:	b4f0      	push	{r4, r5, r6, r7}
    122e:	000c      	movs	r4, r1
    1230:	0006      	movs	r6, r0
    pThis->print ("\033[K");    // delete all from cursor to end
    1232:	58c3      	ldr	r3, [r0, r3]
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    1234:	b083      	sub	sp, #12
    pThis->print ("\033[K");    // delete all from cursor to end
    1236:	4819      	ldr	r0, [pc, #100]	; (129c <terminal_print_line+0x7c>)
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    1238:	4693      	mov	fp, r2
    pThis->print ("\033[K");    // delete all from cursor to end
    123a:	4798      	blx	r3
    char nch [] = {0,0};
    123c:	2300      	movs	r3, #0
    123e:	0025      	movs	r5, r4
    1240:	af01      	add	r7, sp, #4
    1242:	703b      	strb	r3, [r7, #0]
    1244:	707b      	strb	r3, [r7, #1]
    int i;
    for (i = pos; i < pThis->cmdlen; i++) {
    1246:	3384      	adds	r3, #132	; 0x84
    1248:	58f3      	ldr	r3, [r6, r3]
    124a:	3550      	adds	r5, #80	; 0x50
    124c:	1975      	adds	r5, r6, r5
    124e:	429c      	cmp	r4, r3
    1250:	da14      	bge.n	127c <terminal_print_line+0x5c>
        nch [0] = pThis->cmdline [i];
        if (nch[0] == '\0')
            nch[0] = ' ';
    1252:	2320      	movs	r3, #32
    1254:	469a      	mov	sl, r3
        pThis->print (nch);
    1256:	3374      	adds	r3, #116	; 0x74
    1258:	4699      	mov	r9, r3
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    pThis->print ("\033[K");    // delete all from cursor to end
    char nch [] = {0,0};
    int i;
    for (i = pos; i < pThis->cmdlen; i++) {
    125a:	3b10      	subs	r3, #16
    125c:	4698      	mov	r8, r3
        nch [0] = pThis->cmdline [i];
    125e:	782b      	ldrb	r3, [r5, #0]
        if (nch[0] == '\0')
    1260:	2b00      	cmp	r3, #0
    1262:	d100      	bne.n	1266 <terminal_print_line+0x46>
            nch[0] = ' ';
    1264:	4653      	mov	r3, sl
    1266:	703b      	strb	r3, [r7, #0]
        pThis->print (nch);
    1268:	464b      	mov	r3, r9
    126a:	0038      	movs	r0, r7
    126c:	58f3      	ldr	r3, [r6, r3]
    126e:	4798      	blx	r3
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    pThis->print ("\033[K");    // delete all from cursor to end
    char nch [] = {0,0};
    int i;
    for (i = pos; i < pThis->cmdlen; i++) {
    1270:	4643      	mov	r3, r8
    1272:	58f3      	ldr	r3, [r6, r3]
    1274:	3401      	adds	r4, #1
    1276:	3501      	adds	r5, #1
    1278:	42a3      	cmp	r3, r4
    127a:	dcf0      	bgt.n	125e <terminal_print_line+0x3e>
    127c:	3694      	adds	r6, #148	; 0x94
        if (nch[0] == '\0')
            nch[0] = ' ';
        pThis->print (nch);
    }
    
    terminal_reset_cursor (pThis);
    127e:	0030      	movs	r0, r6
    1280:	f7ff ff84 	bl	118c <terminal_reset_cursor.isra.3>
    terminal_move_cursor (pThis, cursor);
    1284:	4659      	mov	r1, fp
    1286:	0030      	movs	r0, r6
    1288:	f7ff ff9a 	bl	11c0 <terminal_move_cursor.isra.4>
}
    128c:	b003      	add	sp, #12
    128e:	bc3c      	pop	{r2, r3, r4, r5}
    1290:	4690      	mov	r8, r2
    1292:	4699      	mov	r9, r3
    1294:	46a2      	mov	sl, r4
    1296:	46ab      	mov	fp, r5
    1298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	000031d0 	.word	0x000031d0

000012a0 <hist_search>:


#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    12a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12a2:	4646      	mov	r6, r8
    12a4:	464f      	mov	r7, r9
    12a6:	4680      	mov	r8, r0
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    12a8:	2350      	movs	r3, #80	; 0x50


#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    12aa:	b4c0      	push	{r6, r7}
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    12ac:	6c04      	ldr	r4, [r0, #64]	; 0x40

#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    12ae:	4443      	add	r3, r8
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    12b0:	5d06      	ldrb	r6, [r0, r4]

#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    12b2:	4699      	mov	r9, r3
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    12b4:	2e00      	cmp	r6, #0
    12b6:	d100      	bne.n	12ba <hist_search+0x1a>
    12b8:	e08d      	b.n	13d6 <hist_search+0x136>
    12ba:	0025      	movs	r5, r4
    12bc:	0033      	movs	r3, r6
    12be:	2700      	movs	r7, #0
        header += pThis->ring_buf [header] + 1;
    12c0:	3301      	adds	r3, #1
    12c2:	18ed      	adds	r5, r5, r3
        if (header >= _RING_HISTORY_LEN)
    12c4:	2d3f      	cmp	r5, #63	; 0x3f
    12c6:	dd00      	ble.n	12ca <hist_search+0x2a>
            header -= _RING_HISTORY_LEN; 
    12c8:	3d40      	subs	r5, #64	; 0x40
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    12ca:	4643      	mov	r3, r8
    12cc:	5d5b      	ldrb	r3, [r3, r5]
        header += pThis->ring_buf [header] + 1;
        if (header >= _RING_HISTORY_LEN)
            header -= _RING_HISTORY_LEN; 
        cnt++;
    12ce:	3701      	adds	r7, #1
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    12d0:	2b00      	cmp	r3, #0
    12d2:	d1f5      	bne.n	12c0 <hist_search+0x20>
            header -= _RING_HISTORY_LEN; 
        cnt++;
    }

    if (dir == _HIST_UP) {
        if (cnt >= pThis->cur) {
    12d4:	4643      	mov	r3, r8
        if (header >= _RING_HISTORY_LEN)
            header -= _RING_HISTORY_LEN; 
        cnt++;
    }

    if (dir == _HIST_UP) {
    12d6:	2900      	cmp	r1, #0
    12d8:	d11a      	bne.n	1310 <hist_search+0x70>
        if (cnt >= pThis->cur) {
    12da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    12dc:	42ba      	cmp	r2, r7
    12de:	dc13      	bgt.n	1308 <hist_search+0x68>
            int header = pThis->begin;
            int j = 0;
            // found record for 'pThis->cur' index
            while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
    12e0:	2e00      	cmp	r6, #0
    12e2:	d011      	beq.n	1308 <hist_search+0x68>
    12e4:	1e7b      	subs	r3, r7, #1
    12e6:	429a      	cmp	r2, r3
    12e8:	d104      	bne.n	12f4 <hist_search+0x54>
    12ea:	e028      	b.n	133e <hist_search+0x9e>
    12ec:	43cb      	mvns	r3, r1
    12ee:	19db      	adds	r3, r3, r7
    12f0:	429a      	cmp	r2, r3
    12f2:	d024      	beq.n	133e <hist_search+0x9e>
                header += pThis->ring_buf [header] + 1;
    12f4:	3601      	adds	r6, #1
    12f6:	19a4      	adds	r4, r4, r6
                if (header >= _RING_HISTORY_LEN)
    12f8:	2c3f      	cmp	r4, #63	; 0x3f
    12fa:	dd00      	ble.n	12fe <hist_search+0x5e>
                    header -= _RING_HISTORY_LEN;
    12fc:	3c40      	subs	r4, #64	; 0x40
    if (dir == _HIST_UP) {
        if (cnt >= pThis->cur) {
            int header = pThis->begin;
            int j = 0;
            // found record for 'pThis->cur' index
            while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
    12fe:	4643      	mov	r3, r8
    1300:	5d1e      	ldrb	r6, [r3, r4]
                header += pThis->ring_buf [header] + 1;
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
    1302:	3101      	adds	r1, #1
    if (dir == _HIST_UP) {
        if (cnt >= pThis->cur) {
            int header = pThis->begin;
            int j = 0;
            // found record for 'pThis->cur' index
            while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
    1304:	2e00      	cmp	r6, #0
    1306:	d1f1      	bne.n	12ec <hist_search+0x4c>
    if (len >= 0) {
        pThis->cursor = pThis->cmdlen = len;
        terminal_reset_cursor (pThis);
        terminal_print_line (pThis, 0, pThis->cursor);
    }
}
    1308:	bc0c      	pop	{r2, r3}
    130a:	4690      	mov	r8, r2
    130c:	4699      	mov	r9, r3
    130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                }
                return pThis->ring_buf[header];
            }
        }
    } else {
        if (pThis->cur > 0) {
    1310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1312:	2b00      	cmp	r3, #0
    1314:	dd5d      	ble.n	13d2 <hist_search+0x132>
                pThis->cur--;
    1316:	4642      	mov	r2, r8
    1318:	3b01      	subs	r3, #1
    131a:	6493      	str	r3, [r2, #72]	; 0x48
            int header = pThis->begin;
            int j = 0;

            while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
    131c:	2e00      	cmp	r6, #0
    131e:	d10a      	bne.n	1336 <hist_search+0x96>
    1320:	e044      	b.n	13ac <hist_search+0x10c>
                header += pThis->ring_buf [header] + 1;
    1322:	3601      	adds	r6, #1
    1324:	19a4      	adds	r4, r4, r6
                if (header >= _RING_HISTORY_LEN)
    1326:	2c3f      	cmp	r4, #63	; 0x3f
    1328:	dd00      	ble.n	132c <hist_search+0x8c>
                    header -= _RING_HISTORY_LEN;
    132a:	3c40      	subs	r4, #64	; 0x40
        if (pThis->cur > 0) {
                pThis->cur--;
            int header = pThis->begin;
            int j = 0;

            while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
    132c:	4642      	mov	r2, r8
    132e:	5d16      	ldrb	r6, [r2, r4]
    1330:	2e00      	cmp	r6, #0
    1332:	d03b      	beq.n	13ac <hist_search+0x10c>
    1334:	3f01      	subs	r7, #1
    1336:	42bb      	cmp	r3, r7
    1338:	d1f3      	bne.n	1322 <hist_search+0x82>
    133a:	0035      	movs	r5, r6
    133c:	e037      	b.n	13ae <hist_search+0x10e>
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
            }
            if (pThis->ring_buf[header]) {
                    pThis->cur++;
    133e:	4643      	mov	r3, r8
    1340:	3201      	adds	r2, #1
    1342:	649a      	str	r2, [r3, #72]	; 0x48
                // obtain saved line
                if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
    1344:	1933      	adds	r3, r6, r4
    1346:	2b3f      	cmp	r3, #63	; 0x3f
    1348:	dc1c      	bgt.n	1384 <hist_search+0xe4>
                    memset (line, 0, _COMMAND_LINE_LEN);
    134a:	2233      	movs	r2, #51	; 0x33
    134c:	2100      	movs	r1, #0
    134e:	4648      	mov	r0, r9
    1350:	f001 fa6e 	bl	2830 <memset>
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
            }
            if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
    1354:	1c61      	adds	r1, r4, #1
    1356:	4441      	add	r1, r8
    1358:	0032      	movs	r2, r6
    135a:	4648      	mov	r0, r9
    135c:	f001 f9de 	bl	271c <memcpy>
            } else {
                int part0 = _RING_HISTORY_LEN - header - 1;
                memcpy (line, pThis->ring_buf + header + 1, part0);
                memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
            }
            return pThis->ring_buf[header];
    1360:	4643      	mov	r3, r8
    1362:	5d1b      	ldrb	r3, [r3, r4]

static void hist_search (microrl_t * pThis, int dir)
{
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    if (len >= 0) {
        pThis->cursor = pThis->cmdlen = len;
    1364:	4641      	mov	r1, r8
    1366:	2284      	movs	r2, #132	; 0x84
    1368:	2488      	movs	r4, #136	; 0x88
    136a:	4640      	mov	r0, r8
    136c:	508b      	str	r3, [r1, r2]
    136e:	3094      	adds	r0, #148	; 0x94
    1370:	510b      	str	r3, [r1, r4]
        terminal_reset_cursor (pThis);
    1372:	f7ff ff0b 	bl	118c <terminal_reset_cursor.isra.3>
        terminal_print_line (pThis, 0, pThis->cursor);
    1376:	4643      	mov	r3, r8
    1378:	2100      	movs	r1, #0
    137a:	591a      	ldr	r2, [r3, r4]
    137c:	4640      	mov	r0, r8
    137e:	f7ff ff4f 	bl	1220 <terminal_print_line>
    1382:	e7c1      	b.n	1308 <hist_search+0x68>
                // obtain saved line
                if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                    memset (line, 0, _COMMAND_LINE_LEN);
                    memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
                } else {
                    int part0 = _RING_HISTORY_LEN - header - 1;
    1384:	253f      	movs	r5, #63	; 0x3f
                    memset (line, 0, _COMMAND_LINE_LEN);
    1386:	2233      	movs	r2, #51	; 0x33
    1388:	2100      	movs	r1, #0
    138a:	4648      	mov	r0, r9
    138c:	f001 fa50 	bl	2830 <memset>
                // obtain saved line
                if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                    memset (line, 0, _COMMAND_LINE_LEN);
                    memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
                } else {
                    int part0 = _RING_HISTORY_LEN - header - 1;
    1390:	1b2d      	subs	r5, r5, r4
                    memset (line, 0, _COMMAND_LINE_LEN);
                    memcpy (line, pThis->ring_buf + header + 1, part0);
    1392:	1c61      	adds	r1, r4, #1
    1394:	4441      	add	r1, r8
    1396:	002a      	movs	r2, r5
    1398:	4648      	mov	r0, r9
    139a:	f001 f9bf 	bl	271c <memcpy>
                    memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
    139e:	464b      	mov	r3, r9
    13a0:	1b72      	subs	r2, r6, r5
    13a2:	1958      	adds	r0, r3, r5
    13a4:	4641      	mov	r1, r8
    13a6:	f001 f9b9 	bl	271c <memcpy>
    13aa:	e7d9      	b.n	1360 <hist_search+0xc0>
        if (pThis->cur > 0) {
                pThis->cur--;
            int header = pThis->begin;
            int j = 0;

            while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
    13ac:	2500      	movs	r5, #0
                header += pThis->ring_buf [header] + 1;
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
            }
            if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
    13ae:	1963      	adds	r3, r4, r5
    13b0:	2b3f      	cmp	r3, #63	; 0x3f
    13b2:	ddcf      	ble.n	1354 <hist_search+0xb4>
                memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
            } else {
                int part0 = _RING_HISTORY_LEN - header - 1;
    13b4:	223f      	movs	r2, #63	; 0x3f
                memcpy (line, pThis->ring_buf + header + 1, part0);
    13b6:	1c61      	adds	r1, r4, #1
                j++;
            }
            if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
            } else {
                int part0 = _RING_HISTORY_LEN - header - 1;
    13b8:	1b16      	subs	r6, r2, r4
                memcpy (line, pThis->ring_buf + header + 1, part0);
    13ba:	4441      	add	r1, r8
    13bc:	0032      	movs	r2, r6
    13be:	4648      	mov	r0, r9
    13c0:	f001 f9ac 	bl	271c <memcpy>
                memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
    13c4:	464b      	mov	r3, r9
    13c6:	1baa      	subs	r2, r5, r6
    13c8:	1998      	adds	r0, r3, r6
    13ca:	4641      	mov	r1, r8
    13cc:	f001 f9a6 	bl	271c <memcpy>
    13d0:	e7c6      	b.n	1360 <hist_search+0xc0>
            }
            return pThis->ring_buf[header];
        } else {
            /* empty line */
            return 0;
    13d2:	2300      	movs	r3, #0
    13d4:	e7c6      	b.n	1364 <hist_search+0xc4>

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    13d6:	2700      	movs	r7, #0
    13d8:	e77c      	b.n	12d4 <hist_search+0x34>
    13da:	46c0      	nop			; (mov r8, r8)

000013dc <microrl_backspace.part.5>:
    return false;
}

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
    13dc:	2394      	movs	r3, #148	; 0x94
    13de:	b570      	push	{r4, r5, r6, lr}
    13e0:	0004      	movs	r4, r0
{
    if (pThis->cursor > 0) {
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
    13e2:	2688      	movs	r6, #136	; 0x88
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
    13e4:	2584      	movs	r5, #132	; 0x84
    pThis->print (pThis->prompt_str);
}

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis) {
        pThis->print ("\033[D \033[D");
    13e6:	58c3      	ldr	r3, [r0, r3]
    13e8:	480b      	ldr	r0, [pc, #44]	; (1418 <microrl_backspace.part.5+0x3c>)
    13ea:	4798      	blx	r3
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
    if (pThis->cursor > 0) {
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
    13ec:	0020      	movs	r0, r4
    13ee:	59a3      	ldr	r3, [r4, r6]
    13f0:	5962      	ldr	r2, [r4, r5]
    13f2:	3050      	adds	r0, #80	; 0x50
    13f4:	18c1      	adds	r1, r0, r3
    13f6:	1ad2      	subs	r2, r2, r3
    13f8:	3b01      	subs	r3, #1
    13fa:	3201      	adds	r2, #1
    13fc:	18c0      	adds	r0, r0, r3
    13fe:	f001 f9cb 	bl	2798 <memmove>
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
        pThis->cursor--;
        pThis->cmdline [pThis->cmdlen] = '\0';
    1402:	2100      	movs	r1, #0
    if (pThis->cursor > 0) {
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
        pThis->cursor--;
    1404:	59a3      	ldr	r3, [r4, r6]
    1406:	3b01      	subs	r3, #1
    1408:	51a3      	str	r3, [r4, r6]
        pThis->cmdline [pThis->cmdlen] = '\0';
    140a:	5963      	ldr	r3, [r4, r5]
    140c:	18e2      	adds	r2, r4, r3
    140e:	3250      	adds	r2, #80	; 0x50
        pThis->cmdlen--;
    1410:	3b01      	subs	r3, #1
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
        pThis->cursor--;
        pThis->cmdline [pThis->cmdlen] = '\0';
    1412:	7011      	strb	r1, [r2, #0]
        pThis->cmdlen--;
    1414:	5163      	str	r3, [r4, r5]
    }
}
    1416:	bd70      	pop	{r4, r5, r6, pc}
    1418:	000031d4 	.word	0x000031d4

0000141c <microrl_init>:
    terminal_move_cursor (pThis, cursor);
}

//*****************************************************************************
void microrl_init (microrl_t * pThis, uint32_t (*print) (const char *)) 
{
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	0004      	movs	r4, r0
    1420:	000d      	movs	r5, r1
    (void)hist_save_line;
    memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
    1422:	2233      	movs	r2, #51	; 0x33
    1424:	2100      	movs	r1, #0
    1426:	3050      	adds	r0, #80	; 0x50
    1428:	f001 fa02 	bl	2830 <memset>
#ifdef _USE_HISTORY
    memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
    142c:	2100      	movs	r1, #0
    142e:	2240      	movs	r2, #64	; 0x40
    1430:	0020      	movs	r0, r4
    1432:	f001 f9fd 	bl	2830 <memset>
    pThis->ring_hist.begin = 0;
    1436:	2300      	movs	r3, #0
    pThis->ring_hist.end = 0;
    pThis->ring_hist.cur = 0;
#endif
    pThis->cmdlen =0;
    1438:	2284      	movs	r2, #132	; 0x84
{
    (void)hist_save_line;
    memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
#ifdef _USE_HISTORY
    memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
    pThis->ring_hist.begin = 0;
    143a:	6423      	str	r3, [r4, #64]	; 0x40
    pThis->ring_hist.end = 0;
    143c:	6463      	str	r3, [r4, #68]	; 0x44
    pThis->ring_hist.cur = 0;
    143e:	64a3      	str	r3, [r4, #72]	; 0x48
#endif
    pThis->cmdlen =0;
    1440:	50a3      	str	r3, [r4, r2]
    pThis->cursor = 0;
    1442:	3204      	adds	r2, #4
    1444:	50a3      	str	r3, [r4, r2]
    pThis->execute = NULL;
    1446:	3204      	adds	r2, #4
    1448:	50a3      	str	r3, [r4, r2]
    pThis->get_completion = NULL;
#ifdef _USE_CTLR_C
    pThis->sigint = NULL;
#endif
    pThis->prompt_str = " > ";
    144a:	4804      	ldr	r0, [pc, #16]	; (145c <microrl_init+0x40>)
    pThis->ring_hist.cur = 0;
#endif
    pThis->cmdlen =0;
    pThis->cursor = 0;
    pThis->execute = NULL;
    pThis->get_completion = NULL;
    144c:	3204      	adds	r2, #4
    144e:	50a3      	str	r3, [r4, r2]
#ifdef _USE_CTLR_C
    pThis->sigint = NULL;
#endif
    pThis->prompt_str = " > ";
    pThis->print = print;
    1450:	3394      	adds	r3, #148	; 0x94
    pThis->execute = NULL;
    pThis->get_completion = NULL;
#ifdef _USE_CTLR_C
    pThis->sigint = NULL;
#endif
    pThis->prompt_str = " > ";
    1452:	64e0      	str	r0, [r4, #76]	; 0x4c
    pThis->print = print;
    1454:	50e5      	str	r5, [r4, r3]
}


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis) {
    pThis->print (pThis->prompt_str);
    1456:	47a8      	blx	r5
    pThis->prompt_str = " > ";
    pThis->print = print;
#ifdef _ENABLE_INIT_PROMPT
    print_prompt (pThis);
#endif
}
    1458:	bd70      	pop	{r4, r5, r6, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	000031dc 	.word	0x000031dc

00001460 <microrl_set_execute_callback>:
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, void (*execute)(int32_t, const char* const*))
{
    pThis->execute = execute;
    1460:	238c      	movs	r3, #140	; 0x8c
    1462:	50c1      	str	r1, [r0, r3]
}
    1464:	4770      	bx	lr
    1466:	46c0      	nop			; (mov r8, r8)

00001468 <new_line_handler>:
    } 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    1468:	2394      	movs	r3, #148	; 0x94
    146a:	b5f0      	push	{r4, r5, r6, r7, lr}
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
    pThis->print (ENDL);
    146c:	4f2a      	ldr	r7, [pc, #168]	; (1518 <new_line_handler+0xb0>)
    } 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    146e:	0005      	movs	r5, r0
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
    pThis->print (ENDL);
    1470:	58c3      	ldr	r3, [r0, r3]
    } 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    1472:	b08b      	sub	sp, #44	; 0x2c
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
    pThis->print (ENDL);
    1474:	0038      	movs	r0, r7
    1476:	4798      	blx	r3
//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    char const * tkn_arr [_COMMAND_TOKEN_NMB];
    int32_t status;
    terminal_newline (pThis);
    status = split(pThis, pThis->cmdlen, tkn_arr);
    1478:	2384      	movs	r3, #132	; 0x84
    147a:	002e      	movs	r6, r5
    147c:	58ec      	ldr	r4, [r5, r3]
    147e:	3b34      	subs	r3, #52	; 0x34
    1480:	5ce9      	ldrb	r1, [r5, r3]


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int32_t split (microrl_t * pThis, int limit, char const ** tkn_arr) {
    int32_t i = 0;
    1482:	2200      	movs	r2, #0
    int ind = 0;
    1484:	2300      	movs	r3, #0
    1486:	3650      	adds	r6, #80	; 0x50
    while (1) {
        // go to the first whitespace (zerro for us)
        while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
    1488:	2900      	cmp	r1, #0
    148a:	d11b      	bne.n	14c4 <new_line_handler+0x5c>
    148c:	429c      	cmp	r4, r3
    148e:	dc35      	bgt.n	14fc <new_line_handler+0x94>
    if (status == -1){
        //        pThis->print ("ERROR: Max token amount exseed\n");
        pThis->print ("ERROR:too many tokens");
        pThis->print (ENDL);
    }
    if ((status > 0) && (pThis->execute != NULL)) {
    1490:	2a00      	cmp	r2, #0
    1492:	d006      	beq.n	14a2 <new_line_handler+0x3a>
    1494:	0010      	movs	r0, r2
    1496:	238c      	movs	r3, #140	; 0x8c
    1498:	58eb      	ldr	r3, [r5, r3]
    149a:	2b00      	cmp	r3, #0
    149c:	d001      	beq.n	14a2 <new_line_handler+0x3a>
        pThis->execute (status, tkn_arr);
    149e:	4669      	mov	r1, sp
    14a0:	4798      	blx	r3
    14a2:	2394      	movs	r3, #148	; 0x94
}


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis) {
    pThis->print (pThis->prompt_str);
    14a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    14a6:	58eb      	ldr	r3, [r5, r3]
    14a8:	4798      	blx	r3
    }
    if ((status > 0) && (pThis->execute != NULL)) {
        pThis->execute (status, tkn_arr);
    }
    print_prompt (pThis);
    pThis->cmdlen = 0;
    14aa:	2400      	movs	r4, #0
    14ac:	2384      	movs	r3, #132	; 0x84
    14ae:	50ec      	str	r4, [r5, r3]
    pThis->cursor = 0;
    14b0:	3304      	adds	r3, #4
    14b2:	50ec      	str	r4, [r5, r3]
    memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
    14b4:	2233      	movs	r2, #51	; 0x33
    14b6:	2100      	movs	r1, #0
    14b8:	0030      	movs	r0, r6
    14ba:	f001 f9b9 	bl	2830 <memset>
#ifdef _USE_HISTORY
    pThis->ring_hist.cur = 0;
    14be:	64ac      	str	r4, [r5, #72]	; 0x48
#endif
}
    14c0:	b00b      	add	sp, #44	; 0x2c
    14c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (1) {
        // go to the first whitespace (zerro for us)
        while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
            ind++;
        }
        if (!(ind < limit)) return i;
    14c4:	429c      	cmp	r4, r3
    14c6:	dde3      	ble.n	1490 <new_line_handler+0x28>
        tkn_arr[i++] = pThis->cmdline + ind;
    14c8:	a90a      	add	r1, sp, #40	; 0x28
    14ca:	468c      	mov	ip, r1
    14cc:	1c50      	adds	r0, r2, #1
    14ce:	0092      	lsls	r2, r2, #2
    14d0:	4462      	add	r2, ip
    14d2:	3a28      	subs	r2, #40	; 0x28
    14d4:	18f1      	adds	r1, r6, r3
    14d6:	6011      	str	r1, [r2, #0]
        if (i >= _COMMAND_TOKEN_NMB) {
    14d8:	2809      	cmp	r0, #9
    14da:	dc14      	bgt.n	1506 <new_line_handler+0x9e>
    14dc:	001a      	movs	r2, r3
    14de:	3251      	adds	r2, #81	; 0x51
    14e0:	18aa      	adds	r2, r5, r2
    14e2:	e002      	b.n	14ea <new_line_handler+0x82>
    14e4:	3201      	adds	r2, #1
            return -1;
        }
        // go to the first NOT whitespace (not zerro for us)
        while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    14e6:	429c      	cmp	r4, r3
    14e8:	d0d5      	beq.n	1496 <new_line_handler+0x2e>
    14ea:	7811      	ldrb	r1, [r2, #0]
            ind++;
    14ec:	3301      	adds	r3, #1
        tkn_arr[i++] = pThis->cmdline + ind;
        if (i >= _COMMAND_TOKEN_NMB) {
            return -1;
        }
        // go to the first NOT whitespace (not zerro for us)
        while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    14ee:	2900      	cmp	r1, #0
    14f0:	d1f8      	bne.n	14e4 <new_line_handler+0x7c>
            ind++;
        }
        if (!(ind < limit)) return i;
    14f2:	429c      	cmp	r4, r3
    14f4:	ddcf      	ble.n	1496 <new_line_handler+0x2e>
    14f6:	0002      	movs	r2, r0
static int32_t split (microrl_t * pThis, int limit, char const ** tkn_arr) {
    int32_t i = 0;
    int ind = 0;
    while (1) {
        // go to the first whitespace (zerro for us)
        while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
    14f8:	429c      	cmp	r4, r3
    14fa:	ddc9      	ble.n	1490 <new_line_handler+0x28>
            ind++;
    14fc:	3301      	adds	r3, #1
    14fe:	18e9      	adds	r1, r5, r3
    1500:	3150      	adds	r1, #80	; 0x50
    1502:	7809      	ldrb	r1, [r1, #0]
    1504:	e7c0      	b.n	1488 <new_line_handler+0x20>
    int32_t status;
    terminal_newline (pThis);
    status = split(pThis, pThis->cmdlen, tkn_arr);
    if (status == -1){
        //        pThis->print ("ERROR: Max token amount exseed\n");
        pThis->print ("ERROR:too many tokens");
    1506:	2494      	movs	r4, #148	; 0x94
    1508:	4804      	ldr	r0, [pc, #16]	; (151c <new_line_handler+0xb4>)
    150a:	592b      	ldr	r3, [r5, r4]
    150c:	4798      	blx	r3
        pThis->print (ENDL);
    150e:	592b      	ldr	r3, [r5, r4]
    1510:	0038      	movs	r0, r7
    1512:	4798      	blx	r3
    1514:	e7c5      	b.n	14a2 <new_line_handler+0x3a>
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	00002d30 	.word	0x00002d30
    151c:	000031e0 	.word	0x000031e0

00001520 <microrl_insert_char>:
}

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
    1520:	b570      	push	{r4, r5, r6, lr}
    1522:	b082      	sub	sp, #8
    1524:	0004      	movs	r4, r0
    1526:	9101      	str	r1, [sp, #4]
    if (pThis->escape) {
        if (escape_process(pThis, ch))
            pThis->escape = 0;
    } else {
#endif
        switch (ch) {
    1528:	297f      	cmp	r1, #127	; 0x7f
    152a:	d803      	bhi.n	1534 <microrl_insert_char+0x14>
    152c:	4a4a      	ldr	r2, [pc, #296]	; (1658 <microrl_insert_char+0x138>)
    152e:	008b      	lsls	r3, r1, #2
    1530:	58d3      	ldr	r3, [r2, r3]
    1532:	469f      	mov	pc, r3
                pThis->sigint();
            break;
#endif
            //-----------------------------------------------------
            default:
            if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
    1534:	2920      	cmp	r1, #32
    1536:	d100      	bne.n	153a <microrl_insert_char+0x1a>
    1538:	e085      	b.n	1646 <microrl_insert_char+0x126>
    153a:	291f      	cmp	r1, #31
    153c:	dd24      	ble.n	1588 <microrl_insert_char+0x68>
    153e:	2384      	movs	r3, #132	; 0x84
    1540:	58e2      	ldr	r2, [r4, r3]
//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
    int i;
    if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
    1542:	2a31      	cmp	r2, #49	; 0x31
    1544:	dc20      	bgt.n	1588 <microrl_insert_char+0x68>
        memmove (pThis->cmdline + pThis->cursor + len,
    1546:	2588      	movs	r5, #136	; 0x88
    1548:	0020      	movs	r0, r4
    154a:	5963      	ldr	r3, [r4, r5]
    154c:	3050      	adds	r0, #80	; 0x50
    154e:	18c1      	adds	r1, r0, r3
    1550:	1ad2      	subs	r2, r2, r3
    1552:	3301      	adds	r3, #1
    1554:	18c0      	adds	r0, r0, r3
    1556:	f001 f91f 	bl	2798 <memmove>
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen - pThis->cursor);
        for (i = 0; i < len; i++) {
            pThis->cmdline [pThis->cursor + i] = text [i];
    155a:	ab01      	add	r3, sp, #4
    155c:	5961      	ldr	r1, [r4, r5]
    155e:	781a      	ldrb	r2, [r3, #0]
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
                pThis->cmdline [pThis->cursor + i] = 0;
    1560:	1863      	adds	r3, r4, r1
    1562:	3350      	adds	r3, #80	; 0x50
        memmove (pThis->cmdline + pThis->cursor + len,
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen - pThis->cursor);
        for (i = 0; i < len; i++) {
            pThis->cmdline [pThis->cursor + i] = text [i];
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
    1564:	2a20      	cmp	r2, #32
    1566:	d100      	bne.n	156a <microrl_insert_char+0x4a>
    1568:	e073      	b.n	1652 <microrl_insert_char+0x132>
                pThis->cmdline [pThis->cursor + i] = 0;
    156a:	701a      	strb	r2, [r3, #0]
            }
        }
        pThis->cursor += len;
        pThis->cmdlen += len;
    156c:	2084      	movs	r0, #132	; 0x84
            pThis->cmdline [pThis->cursor + i] = text [i];
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
                pThis->cmdline [pThis->cursor + i] = 0;
            }
        }
        pThis->cursor += len;
    156e:	2388      	movs	r3, #136	; 0x88
    1570:	1c4a      	adds	r2, r1, #1
    1572:	50e2      	str	r2, [r4, r3]
        pThis->cmdlen += len;
    1574:	5823      	ldr	r3, [r4, r0]
    1576:	3301      	adds	r3, #1
    1578:	5023      	str	r3, [r4, r0]
        pThis->cmdline [pThis->cmdlen] = '\0';
    157a:	2000      	movs	r0, #0
    157c:	18e3      	adds	r3, r4, r3
    157e:	3350      	adds	r3, #80	; 0x50
    1580:	7018      	strb	r0, [r3, #0]
            //-----------------------------------------------------
            default:
            if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
                break;
            if (microrl_insert_text (pThis, (char*)&ch, 1))
                terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
    1582:	0020      	movs	r0, r4
    1584:	f7ff fe4c 	bl	1220 <terminal_print_line>
            break;
        }
#ifdef _USE_ESC_SEQ
    }
#endif
}
    1588:	b002      	add	sp, #8
    158a:	bd70      	pop	{r4, r5, r6, pc}
                pThis->escape = 1;
#endif
            break;
            //-----------------------------------------------------
            case KEY_NAK: // ^U
                    while (pThis->cursor > 0) {
    158c:	2388      	movs	r3, #136	; 0x88
    158e:	58c2      	ldr	r2, [r0, r3]
    1590:	2588      	movs	r5, #136	; 0x88
    1592:	2a00      	cmp	r2, #0
    1594:	dd05      	ble.n	15a2 <microrl_insert_char+0x82>
    1596:	0020      	movs	r0, r4
    1598:	f7ff ff20 	bl	13dc <microrl_backspace.part.5>
    159c:	5962      	ldr	r2, [r4, r5]
    159e:	2a00      	cmp	r2, #0
    15a0:	dcf9      	bgt.n	1596 <microrl_insert_char+0x76>
                    microrl_backspace (pThis);
                }
                terminal_print_line (pThis, 0, pThis->cursor);
    15a2:	2100      	movs	r1, #0
    15a4:	0020      	movs	r0, r4
    15a6:	f7ff fe3b 	bl	1220 <terminal_print_line>
            break;
    15aa:	e7ed      	b.n	1588 <microrl_insert_char+0x68>
    15ac:	3094      	adds	r0, #148	; 0x94
                terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
                pThis->cursor = pThis->cmdlen;
            break;
            //-----------------------------------------------------
            case KEY_SOH: // ^A
                terminal_reset_cursor (pThis);
    15ae:	f7ff fded 	bl	118c <terminal_reset_cursor.isra.3>
                pThis->cursor = 0;
    15b2:	2200      	movs	r2, #0
    15b4:	2388      	movs	r3, #136	; 0x88
    15b6:	50e2      	str	r2, [r4, r3]
            break;
    15b8:	e7e6      	b.n	1588 <microrl_insert_char+0x68>
                pThis->cursor++;
            }
            break;
            //-----------------------------------------------------
            case KEY_STX: // ^B
            if (pThis->cursor) {
    15ba:	2588      	movs	r5, #136	; 0x88
    15bc:	5943      	ldr	r3, [r0, r5]
    15be:	2b00      	cmp	r3, #0
    15c0:	d0e2      	beq.n	1588 <microrl_insert_char+0x68>
                terminal_move_cursor (pThis, -1);
    15c2:	2101      	movs	r1, #1
    15c4:	3094      	adds	r0, #148	; 0x94
    15c6:	4249      	negs	r1, r1
    15c8:	f7ff fdfa 	bl	11c0 <terminal_move_cursor.isra.4>
                pThis->cursor--;
    15cc:	5963      	ldr	r3, [r4, r5]
    15ce:	3b01      	subs	r3, #1
    15d0:	5163      	str	r3, [r4, r5]
    15d2:	e7d9      	b.n	1588 <microrl_insert_char+0x68>
                pThis->print ("\033[K");
                pThis->cmdlen = pThis->cursor;
            break;
            //-----------------------------------------------------
            case KEY_ENQ: // ^E
                terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
    15d4:	2684      	movs	r6, #132	; 0x84
    15d6:	2588      	movs	r5, #136	; 0x88
    15d8:	5983      	ldr	r3, [r0, r6]
    15da:	5942      	ldr	r2, [r0, r5]
    15dc:	3094      	adds	r0, #148	; 0x94
    15de:	1a99      	subs	r1, r3, r2
    15e0:	f7ff fdee 	bl	11c0 <terminal_move_cursor.isra.4>
                pThis->cursor = pThis->cmdlen;
    15e4:	59a3      	ldr	r3, [r4, r6]
    15e6:	5163      	str	r3, [r4, r5]
            break;
    15e8:	e7ce      	b.n	1588 <microrl_insert_char+0x68>
                terminal_reset_cursor (pThis);
                pThis->cursor = 0;
            break;
            //-----------------------------------------------------
            case KEY_ACK: // ^F
            if (pThis->cursor < pThis->cmdlen) {
    15ea:	2588      	movs	r5, #136	; 0x88
    15ec:	2384      	movs	r3, #132	; 0x84
    15ee:	5942      	ldr	r2, [r0, r5]
    15f0:	58c3      	ldr	r3, [r0, r3]
    15f2:	429a      	cmp	r2, r3
    15f4:	dac8      	bge.n	1588 <microrl_insert_char+0x68>
    15f6:	3094      	adds	r0, #148	; 0x94
                terminal_move_cursor (pThis, 1);
    15f8:	2101      	movs	r1, #1
    15fa:	f7ff fde1 	bl	11c0 <terminal_move_cursor.isra.4>
                pThis->cursor++;
    15fe:	5963      	ldr	r3, [r4, r5]
    1600:	3301      	adds	r3, #1
    1602:	5163      	str	r3, [r4, r5]
    1604:	e7c0      	b.n	1588 <microrl_insert_char+0x68>

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
    if (pThis->cursor > 0) {
    1606:	2588      	movs	r5, #136	; 0x88
    1608:	5941      	ldr	r1, [r0, r5]
    160a:	2900      	cmp	r1, #0
    160c:	dd02      	ble.n	1614 <microrl_insert_char+0xf4>
    160e:	f7ff fee5 	bl	13dc <microrl_backspace.part.5>
    1612:	5961      	ldr	r1, [r4, r5]
            break;
            //-----------------------------------------------------
            case KEY_DEL: // Backspace
            case KEY_BS: // ^U
                microrl_backspace (pThis);
                terminal_print_line (pThis, pThis->cursor, pThis->cursor);
    1614:	000a      	movs	r2, r1
    1616:	0020      	movs	r0, r4
    1618:	f7ff fe02 	bl	1220 <terminal_print_line>
            break;
    161c:	e7b4      	b.n	1588 <microrl_insert_char+0x68>
            break;
#else
            case KEY_CR:
            break;
            case KEY_LF:
                new_line_handler(pThis);
    161e:	f7ff ff23 	bl	1468 <new_line_handler>
            break;
    1622:	e7b1      	b.n	1588 <microrl_insert_char+0x68>
                }
                terminal_print_line (pThis, 0, pThis->cursor);
            break;
            //-----------------------------------------------------
            case KEY_VT:  // ^K
                pThis->print ("\033[K");
    1624:	2394      	movs	r3, #148	; 0x94
    1626:	58c3      	ldr	r3, [r0, r3]
    1628:	480c      	ldr	r0, [pc, #48]	; (165c <microrl_insert_char+0x13c>)
    162a:	4798      	blx	r3
                pThis->cmdlen = pThis->cursor;
    162c:	2388      	movs	r3, #136	; 0x88
    162e:	58e2      	ldr	r2, [r4, r3]
    1630:	3b04      	subs	r3, #4
    1632:	50e2      	str	r2, [r4, r3]
            break;
    1634:	e7a8      	b.n	1588 <microrl_insert_char+0x68>
#endif
            break;
            //-----------------------------------------------------
            case KEY_SO: //^N
#ifdef _USE_HISTORY
            hist_search (pThis, _HIST_DOWN);
    1636:	2101      	movs	r1, #1
    1638:	f7ff fe32 	bl	12a0 <hist_search>
#endif
            break;
    163c:	e7a4      	b.n	1588 <microrl_insert_char+0x68>
            }
            break;
            //-----------------------------------------------------
            case KEY_DLE: //^P
#ifdef _USE_HISTORY
            hist_search (pThis, _HIST_UP);
    163e:	2100      	movs	r1, #0
    1640:	f7ff fe2e 	bl	12a0 <hist_search>
#endif
            break;
    1644:	e7a0      	b.n	1588 <microrl_insert_char+0x68>
                pThis->sigint();
            break;
#endif
            //-----------------------------------------------------
            default:
            if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
    1646:	2384      	movs	r3, #132	; 0x84
    1648:	58e2      	ldr	r2, [r4, r3]
    164a:	2a00      	cmp	r2, #0
    164c:	d000      	beq.n	1650 <microrl_insert_char+0x130>
    164e:	e778      	b.n	1542 <microrl_insert_char+0x22>
    1650:	e79a      	b.n	1588 <microrl_insert_char+0x68>
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen - pThis->cursor);
        for (i = 0; i < len; i++) {
            pThis->cmdline [pThis->cursor + i] = text [i];
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
                pThis->cmdline [pThis->cursor + i] = 0;
    1652:	2200      	movs	r2, #0
    1654:	e789      	b.n	156a <microrl_insert_char+0x4a>
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	00002fc8 	.word	0x00002fc8
    165c:	000031d0 	.word	0x000031d0

00001660 <MY16_Pack_Config>:
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;
}

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
    1660:	6803      	ldr	r3, [r0, #0]
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
    1662:	490c      	ldr	r1, [pc, #48]	; (1694 <MY16_Pack_Config+0x34>)
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;
}

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
    1664:	220c      	movs	r2, #12
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
    1666:	6019      	str	r1, [r3, #0]
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
    1668:	490b      	ldr	r1, [pc, #44]	; (1698 <MY16_Pack_Config+0x38>)
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;
}

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
    166a:	62da      	str	r2, [r3, #44]	; 0x2c
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
    166c:	6059      	str	r1, [r3, #4]
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
    166e:	21fa      	movs	r1, #250	; 0xfa
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
    1670:	61da      	str	r2, [r3, #28]
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
    1672:	3258      	adds	r2, #88	; 0x58

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
    1674:	6099      	str	r1, [r3, #8]
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
    1676:	621a      	str	r2, [r3, #32]
void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
    1678:	39f4      	subs	r1, #244	; 0xf4
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
    167a:	4a08      	ldr	r2, [pc, #32]	; (169c <MY16_Pack_Config+0x3c>)
void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
    167c:	60d9      	str	r1, [r3, #12]
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
    167e:	3901      	subs	r1, #1
    1680:	6119      	str	r1, [r3, #16]
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
    1682:	625a      	str	r2, [r3, #36]	; 0x24
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
    1684:	3901      	subs	r1, #1
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;
    1686:	4a06      	ldr	r2, [pc, #24]	; (16a0 <MY16_Pack_Config+0x40>)
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
    1688:	6159      	str	r1, [r3, #20]
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
    168a:	3903      	subs	r1, #3
    168c:	6199      	str	r1, [r3, #24]
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;
    168e:	629a      	str	r2, [r3, #40]	; 0x28
}
    1690:	4770      	bx	lr
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	000009c4 	.word	0x000009c4
    1698:	0000109a 	.word	0x0000109a
    169c:	0000ea60 	.word	0x0000ea60
    16a0:	000010cc 	.word	0x000010cc

000016a4 <MY18_Pack_Config>:
    16a4:	b510      	push	{r4, lr}
    16a6:	f7ff ffdb 	bl	1660 <MY16_Pack_Config>
    16aa:	bd10      	pop	{r4, pc}

000016ac <Board_GPIO_Init>:
#define PIN_43_PIO_FUNC IOCON_FUNC0
#define PIN_48 3, 3
#define PIN_48_IOCON IOCON_PIO3_3
#define PIN_48_PIO_FUNC IOCON_FUNC0

void Board_GPIO_Init(void) {
    16ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16ae:	465f      	mov	r7, fp
    16b0:	4656      	mov	r6, sl
    16b2:	464d      	mov	r5, r9
    16b4:	4644      	mov	r4, r8
    16b6:	b4f0      	push	{r4, r5, r6, r7}
  Chip_GPIO_Init(LPC_GPIO);
    16b8:	25a0      	movs	r5, #160	; 0xa0
    16ba:	05ed      	lsls	r5, r5, #23
    16bc:	0028      	movs	r0, r5
    16be:	f000 fa5f 	bl	1b80 <Chip_GPIO_Init>
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    16c2:	2380      	movs	r3, #128	; 0x80
    16c4:	2104      	movs	r1, #4
    16c6:	2001      	movs	r0, #1
    16c8:	4c81      	ldr	r4, [pc, #516]	; (18d0 <Board_GPIO_Init+0x224>)
    16ca:	021b      	lsls	r3, r3, #8
    16cc:	58e2      	ldr	r2, [r4, r3]
    16ce:	2610      	movs	r6, #16
    16d0:	430a      	orrs	r2, r1
    16d2:	50e2      	str	r2, [r4, r3]
    16d4:	4a7f      	ldr	r2, [pc, #508]	; (18d4 <Board_GPIO_Init+0x228>)
    16d6:	317c      	adds	r1, #124	; 0x7c
    16d8:	5050      	str	r0, [r2, r1]
    16da:	58e1      	ldr	r1, [r4, r3]
    16dc:	3001      	adds	r0, #1
    16de:	4301      	orrs	r1, r0
    16e0:	50e1      	str	r1, [r4, r3]
    16e2:	2101      	movs	r1, #1
    16e4:	487c      	ldr	r0, [pc, #496]	; (18d8 <Board_GPIO_Init+0x22c>)
    16e6:	67d1      	str	r1, [r2, #124]	; 0x7c
    16e8:	58c1      	ldr	r1, [r0, r3]
    16ea:	2720      	movs	r7, #32
    16ec:	4331      	orrs	r1, r6
    16ee:	50c1      	str	r1, [r0, r3]
    16f0:	2100      	movs	r1, #0
    16f2:	6411      	str	r1, [r2, #64]	; 0x40
    16f4:	58c6      	ldr	r6, [r0, r3]
    16f6:	433e      	orrs	r6, r7
    16f8:	50c6      	str	r6, [r0, r3]
    16fa:	6451      	str	r1, [r2, #68]	; 0x44
    16fc:	58c6      	ldr	r6, [r0, r3]
    16fe:	3720      	adds	r7, #32
    1700:	433e      	orrs	r6, r7
    1702:	50c6      	str	r6, [r0, r3]
    1704:	6011      	str	r1, [r2, #0]
    1706:	58c6      	ldr	r6, [r0, r3]
    1708:	46ba      	mov	sl, r7
    170a:	37c0      	adds	r7, #192	; 0xc0
    170c:	433e      	orrs	r6, r7
    170e:	50c6      	str	r6, [r0, r3]
    1710:	6251      	str	r1, [r2, #36]	; 0x24
    1712:	58c6      	ldr	r6, [r0, r3]
    1714:	3701      	adds	r7, #1
    1716:	37ff      	adds	r7, #255	; 0xff
    1718:	46bc      	mov	ip, r7
    171a:	433e      	orrs	r6, r7
    171c:	2780      	movs	r7, #128	; 0x80
    171e:	50c6      	str	r6, [r0, r3]
    1720:	6551      	str	r1, [r2, #84]	; 0x54
    1722:	58c6      	ldr	r6, [r0, r3]
    1724:	00ff      	lsls	r7, r7, #3
    1726:	46b9      	mov	r9, r7
    1728:	433e      	orrs	r6, r7
    172a:	2780      	movs	r7, #128	; 0x80
    172c:	50c6      	str	r6, [r0, r3]
    172e:	6591      	str	r1, [r2, #88]	; 0x58
    1730:	58c6      	ldr	r6, [r0, r3]
    1732:	013f      	lsls	r7, r7, #4
    1734:	46b8      	mov	r8, r7
    1736:	433e      	orrs	r6, r7
    1738:	2704      	movs	r7, #4
    173a:	50c6      	str	r6, [r0, r3]
    173c:	6711      	str	r1, [r2, #112]	; 0x70
    173e:	58ee      	ldr	r6, [r5, r3]
    1740:	433e      	orrs	r6, r7
    1742:	50ee      	str	r6, [r5, r3]
    1744:	61d1      	str	r1, [r2, #28]
    1746:	58ee      	ldr	r6, [r5, r3]
    1748:	0037      	movs	r7, r6
    174a:	2608      	movs	r6, #8
    174c:	4337      	orrs	r7, r6
    174e:	50ef      	str	r7, [r5, r3]
    1750:	62d1      	str	r1, [r2, #44]	; 0x2c
    1752:	58ef      	ldr	r7, [r5, r3]
    1754:	3608      	adds	r6, #8
    1756:	4337      	orrs	r7, r6
    1758:	50ef      	str	r7, [r5, r3]
    175a:	6311      	str	r1, [r2, #48]	; 0x30
    175c:	58ee      	ldr	r6, [r5, r3]
    175e:	0037      	movs	r7, r6
    1760:	2620      	movs	r6, #32
    1762:	4337      	orrs	r7, r6
    1764:	50ef      	str	r7, [r5, r3]
    1766:	4657      	mov	r7, sl
    1768:	6351      	str	r1, [r2, #52]	; 0x34
    176a:	58ee      	ldr	r6, [r5, r3]
    176c:	4337      	orrs	r7, r6
    176e:	50ef      	str	r7, [r5, r3]
    1770:	64d1      	str	r1, [r2, #76]	; 0x4c
    1772:	58ee      	ldr	r6, [r5, r3]
    1774:	0037      	movs	r7, r6
    1776:	2680      	movs	r6, #128	; 0x80
    1778:	4337      	orrs	r7, r6
    177a:	50ef      	str	r7, [r5, r3]
    177c:	6511      	str	r1, [r2, #80]	; 0x50
    177e:	58ee      	ldr	r6, [r5, r3]
    1780:	0037      	movs	r7, r6
    1782:	2680      	movs	r6, #128	; 0x80
    1784:	0076      	lsls	r6, r6, #1
    1786:	4337      	orrs	r7, r6
    1788:	50ef      	str	r7, [r5, r3]
    178a:	6611      	str	r1, [r2, #96]	; 0x60
    178c:	58ee      	ldr	r6, [r5, r3]
    178e:	0037      	movs	r7, r6
    1790:	4666      	mov	r6, ip
    1792:	4337      	orrs	r7, r6
    1794:	50ef      	str	r7, [r5, r3]
    1796:	6651      	str	r1, [r2, #100]	; 0x64
    1798:	58ee      	ldr	r6, [r5, r3]
    179a:	0037      	movs	r7, r6
    179c:	464e      	mov	r6, r9
    179e:	4337      	orrs	r7, r6
    17a0:	2601      	movs	r6, #1
    17a2:	50ef      	str	r7, [r5, r3]
    17a4:	6696      	str	r6, [r2, #104]	; 0x68
    17a6:	58ee      	ldr	r6, [r5, r3]
    17a8:	0037      	movs	r7, r6
    17aa:	4646      	mov	r6, r8
    17ac:	4337      	orrs	r7, r6
    17ae:	50ef      	str	r7, [r5, r3]
    17b0:	2501      	movs	r5, #1
    17b2:	2601      	movs	r6, #1
    17b4:	6755      	str	r5, [r2, #116]	; 0x74
    17b6:	58e5      	ldr	r5, [r4, r3]
    17b8:	2701      	movs	r7, #1
    17ba:	4335      	orrs	r5, r6
    17bc:	50e5      	str	r5, [r4, r3]
    17be:	2509      	movs	r5, #9
    17c0:	46aa      	mov	sl, r5
    17c2:	6795      	str	r5, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    17c4:	6061      	str	r1, [r4, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    17c6:	58e5      	ldr	r5, [r4, r3]
    17c8:	3607      	adds	r6, #7
    17ca:	4335      	orrs	r5, r6
    17cc:	50e5      	str	r5, [r4, r3]
    17ce:	4656      	mov	r6, sl
    17d0:	2590      	movs	r5, #144	; 0x90
    17d2:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    17d4:	6221      	str	r1, [r4, #32]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    17d6:	58e5      	ldr	r5, [r4, r3]
    17d8:	3607      	adds	r6, #7
    17da:	4335      	orrs	r5, r6
    17dc:	50e5      	str	r5, [r4, r3]
    17de:	2594      	movs	r5, #148	; 0x94
    17e0:	3e08      	subs	r6, #8
    17e2:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    17e4:	6421      	str	r1, [r4, #64]	; 0x40
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    17e6:	58e5      	ldr	r5, [r4, r3]
    17e8:	3618      	adds	r6, #24
    17ea:	4335      	orrs	r5, r6
    17ec:	50e5      	str	r5, [r4, r3]
    17ee:	25a0      	movs	r5, #160	; 0xa0
    17f0:	3e18      	subs	r6, #24
    17f2:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    17f4:	3d20      	subs	r5, #32
    17f6:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    17f8:	58e5      	ldr	r5, [r4, r3]
    17fa:	36f8      	adds	r6, #248	; 0xf8
    17fc:	4335      	orrs	r5, r6
    17fe:	50e5      	str	r5, [r4, r3]
    1800:	2508      	movs	r5, #8
    1802:	6155      	str	r5, [r2, #20]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1804:	464d      	mov	r5, r9
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1806:	4666      	mov	r6, ip
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1808:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    180a:	58e5      	ldr	r5, [r4, r3]
    180c:	4335      	orrs	r5, r6
    180e:	50e5      	str	r5, [r4, r3]
    1810:	2508      	movs	r5, #8
    1812:	6395      	str	r5, [r2, #56]	; 0x38
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1814:	4645      	mov	r5, r8
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1816:	464e      	mov	r6, r9
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1818:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    181a:	58e5      	ldr	r5, [r4, r3]
    181c:	4335      	orrs	r5, r6
    181e:	50e5      	str	r5, [r4, r3]
    1820:	2508      	movs	r5, #8
    1822:	66d5      	str	r5, [r2, #108]	; 0x6c
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1824:	2580      	movs	r5, #128	; 0x80
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1826:	4646      	mov	r6, r8
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1828:	016d      	lsls	r5, r5, #5
    182a:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    182c:	58e5      	ldr	r5, [r4, r3]
    182e:	4335      	orrs	r5, r6
    1830:	50e5      	str	r5, [r4, r3]
    1832:	2608      	movs	r6, #8
    1834:	2598      	movs	r5, #152	; 0x98
    1836:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1838:	2580      	movs	r5, #128	; 0x80
    183a:	01ad      	lsls	r5, r5, #6
    183c:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    183e:	2501      	movs	r5, #1
    1840:	58c4      	ldr	r4, [r0, r3]
    1842:	432c      	orrs	r4, r5
    1844:	50c4      	str	r4, [r0, r3]
    1846:	2408      	movs	r4, #8
    1848:	6094      	str	r4, [r2, #8]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    184a:	6041      	str	r1, [r0, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    184c:	58c4      	ldr	r4, [r0, r3]
    184e:	3501      	adds	r5, #1
    1850:	432c      	orrs	r4, r5
    1852:	50c4      	str	r4, [r0, r3]
    1854:	2408      	movs	r4, #8
    1856:	6294      	str	r4, [r2, #40]	; 0x28
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1858:	6081      	str	r1, [r0, #8]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    185a:	58c4      	ldr	r4, [r0, r3]
    185c:	3502      	adds	r5, #2
    185e:	432c      	orrs	r4, r5
    1860:	50c4      	str	r4, [r0, r3]
    1862:	2408      	movs	r4, #8
    1864:	65d4      	str	r4, [r2, #92]	; 0x5c
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1866:	6101      	str	r1, [r0, #16]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1868:	58c4      	ldr	r4, [r0, r3]
    186a:	3504      	adds	r5, #4
    186c:	432c      	orrs	r4, r5
    186e:	50c4      	str	r4, [r0, r3]
    1870:	248c      	movs	r4, #140	; 0x8c
    1872:	5115      	str	r5, [r2, r4]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1874:	6201      	str	r1, [r0, #32]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1876:	58c4      	ldr	r4, [r0, r3]
    1878:	3578      	adds	r5, #120	; 0x78
    187a:	432c      	orrs	r4, r5
    187c:	50c4      	str	r4, [r0, r3]
    187e:	2408      	movs	r4, #8
    1880:	6214      	str	r4, [r2, #32]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1882:	4664      	mov	r4, ip
    1884:	5101      	str	r1, [r0, r4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1886:	4815      	ldr	r0, [pc, #84]	; (18dc <Board_GPIO_Init+0x230>)
    1888:	3d78      	subs	r5, #120	; 0x78
    188a:	58c4      	ldr	r4, [r0, r3]
    188c:	4327      	orrs	r7, r4
    188e:	2484      	movs	r4, #132	; 0x84
    1890:	50c7      	str	r7, [r0, r3]
    1892:	5115      	str	r5, [r2, r4]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1894:	6041      	str	r1, [r0, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1896:	58c4      	ldr	r4, [r0, r3]
    1898:	3d06      	subs	r5, #6
    189a:	432c      	orrs	r4, r5
    189c:	50c4      	str	r4, [r0, r3]
    189e:	2408      	movs	r4, #8
    18a0:	6794      	str	r4, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    18a2:	6081      	str	r1, [r0, #8]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    18a4:	58c4      	ldr	r4, [r0, r3]
    18a6:	3502      	adds	r5, #2
    18a8:	432c      	orrs	r4, r5
    18aa:	50c4      	str	r4, [r0, r3]
    18ac:	2408      	movs	r4, #8
    18ae:	6794      	str	r4, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    18b0:	6101      	str	r1, [r0, #16]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    18b2:	58c4      	ldr	r4, [r0, r3]
    18b4:	3504      	adds	r5, #4
    18b6:	432c      	orrs	r4, r5
    18b8:	50c4      	str	r4, [r0, r3]
    18ba:	23ac      	movs	r3, #172	; 0xac
    18bc:	2408      	movs	r4, #8
    18be:	50d4      	str	r4, [r2, r3]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    18c0:	6201      	str	r1, [r0, #32]

  Chip_GPIO_SetPinDIROutput(LPC_GPIO, PIN_48);
  Chip_IOCON_PinMuxSet(LPC_IOCON, PIN_48_IOCON,
      (PIN_48_PIO_FUNC | IOCON_MODE_PULLDOWN) );
  Chip_GPIO_SetPinState(LPC_GPIO, PIN_48, false);
}
    18c2:	bc3c      	pop	{r2, r3, r4, r5}
    18c4:	4690      	mov	r8, r2
    18c6:	4699      	mov	r9, r3
    18c8:	46a2      	mov	sl, r4
    18ca:	46ab      	mov	fp, r5
    18cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	50010000 	.word	0x50010000
    18d4:	40044000 	.word	0x40044000
    18d8:	50020000 	.word	0x50020000
    18dc:	50030000 	.word	0x50030000

000018e0 <Low_Side_Contactor_Pin_Get>:
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (pGPIO[port].DATA[1 << pin]) != 0;
    18e0:	4b02      	ldr	r3, [pc, #8]	; (18ec <Low_Side_Contactor_Pin_Get+0xc>)
    18e2:	6918      	ldr	r0, [r3, #16]

bool Low_Side_Contactor_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, CTR_LOW_SWTCH);
    18e4:	1e43      	subs	r3, r0, #1
    18e6:	4198      	sbcs	r0, r3
    18e8:	b2c0      	uxtb	r0, r0
}
    18ea:	4770      	bx	lr
    18ec:	50010000 	.word	0x50010000

000018f0 <High_Side_Contactor_Pin_Set>:
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    18f0:	4b01      	ldr	r3, [pc, #4]	; (18f8 <High_Side_Contactor_Pin_Set+0x8>)
    18f2:	0040      	lsls	r0, r0, #1
    18f4:	6098      	str	r0, [r3, #8]
  return Chip_GPIO_GetPinState(LPC_GPIO, CTR_HIGH_SWTCH);
}

void High_Side_Contactor_Pin_Set(bool state) {
  Chip_GPIO_SetPinState(LPC_GPIO, CTR_HIGH_SWTCH, state);
}
    18f6:	4770      	bx	lr
    18f8:	50010000 	.word	0x50010000

000018fc <IMD_Pin_Get>:
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (pGPIO[port].DATA[1 << pin]) != 0;
    18fc:	4b02      	ldr	r3, [pc, #8]	; (1908 <IMD_Pin_Get+0xc>)
    18fe:	6c18      	ldr	r0, [r3, #64]	; 0x40

bool IMD_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, IMD_IN);
    1900:	1e43      	subs	r3, r0, #1
    1902:	4198      	sbcs	r0, r3
    1904:	b2c0      	uxtb	r0, r0
}
    1906:	4770      	bx	lr
    1908:	50020000 	.word	0x50020000

0000190c <BMS_Pin_Get>:
    190c:	2380      	movs	r3, #128	; 0x80
    190e:	4a03      	ldr	r2, [pc, #12]	; (191c <BMS_Pin_Get+0x10>)
    1910:	58d0      	ldr	r0, [r2, r3]

bool BMS_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, BMS_IN);
    1912:	1e43      	subs	r3, r0, #1
    1914:	4198      	sbcs	r0, r3
    1916:	b2c0      	uxtb	r0, r0
}
    1918:	4770      	bx	lr
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	50020000 	.word	0x50020000

00001920 <Interlock_Pin_Get>:
    1920:	2380      	movs	r3, #128	; 0x80
    1922:	4a03      	ldr	r2, [pc, #12]	; (1930 <Interlock_Pin_Get+0x10>)
    1924:	005b      	lsls	r3, r3, #1
    1926:	58d0      	ldr	r0, [r2, r3]

bool Interlock_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, INT_IN);
    1928:	1e43      	subs	r3, r0, #1
    192a:	4198      	sbcs	r0, r3
    192c:	b2c0      	uxtb	r0, r0
}
    192e:	4770      	bx	lr
    1930:	50020000 	.word	0x50020000

00001934 <SSM_Init>:

static uint32_t last_init_wait_start_time;

void SSM_Init(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output, PACK_CONFIG_T *pack_config) {
  // Initialize BMS state variables
  state->curr_mode = CSB_SSM_MODE_INIT;
    1934:	2200      	movs	r2, #0

volatile uint32_t msTicks;

static uint32_t last_init_wait_start_time;

void SSM_Init(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output, PACK_CONFIG_T *pack_config) {
    1936:	b510      	push	{r4, lr}
    1938:	0008      	movs	r0, r1
  // Initialize BMS state variables
  state->curr_mode = CSB_SSM_MODE_INIT;
    193a:	710a      	strb	r2, [r1, #4]
  state->init_state = CSB_INIT_OFF;
    193c:	714a      	strb	r2, [r1, #5]

  Charge_Init(state, pack_config);
    193e:	0019      	movs	r1, r3
    1940:	f7fe fdc6 	bl	4d0 <Charge_Init>
}
    1944:	bd10      	pop	{r4, pc}
    1946:	46c0      	nop			; (mov r8, r8)

00001948 <Init_Step>:

void Init_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
  switch(state->init_state) {
    1948:	794b      	ldrb	r3, [r1, #5]
  state->init_state = CSB_INIT_OFF;

  Charge_Init(state, pack_config);
}

void Init_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
    194a:	b530      	push	{r4, r5, lr}
  switch(state->init_state) {
    194c:	2b05      	cmp	r3, #5
    194e:	d80a      	bhi.n	1966 <Init_Step+0x1e>
    1950:	4c1e      	ldr	r4, [pc, #120]	; (19cc <Init_Step+0x84>)
    1952:	009b      	lsls	r3, r3, #2
    1954:	58e3      	ldr	r3, [r4, r3]
    1956:	469f      	mov	pc, r3
      case CSB_INIT_OFF:
          output->send_bms_config = false;
    1958:	2300      	movs	r3, #0
              output->send_bms_config = false;
              state->init_state = CSB_INIT_DONE;
              state->curr_baud_rate = CSB_CAN_BAUD;
              input->receive_bms_config = false;
          } else if ( (msTicks - last_init_wait_start_time) > INIT_WAIT_TIME_MAX) {
              output->send_bms_config = false;
    195a:	7213      	strb	r3, [r2, #8]
              state->init_state = CSB_INIT_SWITCH_500;
    195c:	2201      	movs	r2, #1
    195e:	714a      	strb	r2, [r1, #5]
              state->curr_baud_rate = BMS_CAN_BAUD;
    1960:	4a1b      	ldr	r2, [pc, #108]	; (19d0 <Init_Step+0x88>)
    1962:	608a      	str	r2, [r1, #8]
              input->receive_bms_config = false;
    1964:	7643      	strb	r3, [r0, #25]
          state->curr_mode = CSB_SSM_MODE_IDLE;
          state->init_state = CSB_INIT_OFF;
          state->curr_baud_rate = CSB_CAN_BAUD;
          break;
  }
}
    1966:	bd30      	pop	{r4, r5, pc}
          state->init_state = CSB_INIT_WAIT_250;
          state->curr_baud_rate = CSB_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_WAIT_250:
          if(input->receive_bms_config) {
    1968:	7e43      	ldrb	r3, [r0, #25]
    196a:	2b00      	cmp	r3, #0
    196c:	d125      	bne.n	19ba <Init_Step+0x72>
              output->send_bms_config = false;
              state->init_state = CSB_INIT_DONE;
              state->curr_baud_rate = CSB_CAN_BAUD;
              input->receive_bms_config = false;
          } else if ( (msTicks - last_init_wait_start_time) > INIT_WAIT_TIME_MAX) {
    196e:	4c19      	ldr	r4, [pc, #100]	; (19d4 <Init_Step+0x8c>)
    1970:	6825      	ldr	r5, [r4, #0]
    1972:	4c19      	ldr	r4, [pc, #100]	; (19d8 <Init_Step+0x90>)
    1974:	42a5      	cmp	r5, r4
    1976:	d9f6      	bls.n	1966 <Init_Step+0x1e>
    1978:	e7ef      	b.n	195a <Init_Step+0x12>
              state->curr_baud_rate = BMS_CAN_BAUD;
              input->receive_bms_config = false;
          }
          break;
      case(CSB_INIT_DONE):
          state->curr_mode = CSB_SSM_MODE_IDLE;
    197a:	2301      	movs	r3, #1
    197c:	710b      	strb	r3, [r1, #4]
          state->init_state = CSB_INIT_OFF;
    197e:	2300      	movs	r3, #0
    1980:	714b      	strb	r3, [r1, #5]
          state->curr_baud_rate = CSB_CAN_BAUD;
    1982:	4b16      	ldr	r3, [pc, #88]	; (19dc <Init_Step+0x94>)
    1984:	608b      	str	r3, [r1, #8]
          break;
  }
}
    1986:	e7ee      	b.n	1966 <Init_Step+0x1e>
          state->init_state = CSB_INIT_SEND_500;
          state->curr_baud_rate = BMS_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_SEND_500:
          output->send_bms_config = false;
    1988:	2300      	movs	r3, #0
    198a:	7213      	strb	r3, [r2, #8]
          state->init_state = CSB_INIT_SWITCH_250;
    198c:	2203      	movs	r2, #3
    198e:	714a      	strb	r2, [r1, #5]
          state->curr_baud_rate = CSB_CAN_BAUD;
    1990:	4a12      	ldr	r2, [pc, #72]	; (19dc <Init_Step+0x94>)
    1992:	608a      	str	r2, [r1, #8]
          input->receive_bms_config = false;
    1994:	7643      	strb	r3, [r0, #25]
          break;
    1996:	e7e6      	b.n	1966 <Init_Step+0x1e>
      case CSB_INIT_SWITCH_250:
          output->send_bms_config = false;
    1998:	2300      	movs	r3, #0
    199a:	7213      	strb	r3, [r2, #8]
          state->init_state = CSB_INIT_WAIT_250;
    199c:	2204      	movs	r2, #4
    199e:	714a      	strb	r2, [r1, #5]
          state->curr_baud_rate = CSB_CAN_BAUD;
    19a0:	4a0e      	ldr	r2, [pc, #56]	; (19dc <Init_Step+0x94>)
    19a2:	608a      	str	r2, [r1, #8]
          input->receive_bms_config = false;
    19a4:	7643      	strb	r3, [r0, #25]
          break;
    19a6:	e7de      	b.n	1966 <Init_Step+0x1e>
          state->init_state = CSB_INIT_SWITCH_500;
          state->curr_baud_rate = BMS_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_SWITCH_500:
          output->send_bms_config = true;
    19a8:	2301      	movs	r3, #1
    19aa:	7213      	strb	r3, [r2, #8]
          state->init_state = CSB_INIT_SEND_500;
    19ac:	3301      	adds	r3, #1
    19ae:	714b      	strb	r3, [r1, #5]
          state->curr_baud_rate = BMS_CAN_BAUD;
    19b0:	4b07      	ldr	r3, [pc, #28]	; (19d0 <Init_Step+0x88>)
    19b2:	608b      	str	r3, [r1, #8]
          input->receive_bms_config = false;
    19b4:	2300      	movs	r3, #0
    19b6:	7643      	strb	r3, [r0, #25]
          break;
    19b8:	e7d5      	b.n	1966 <Init_Step+0x1e>
          state->curr_baud_rate = CSB_CAN_BAUD;
          input->receive_bms_config = false;
          break;
      case CSB_INIT_WAIT_250:
          if(input->receive_bms_config) {
              output->send_bms_config = false;
    19ba:	2300      	movs	r3, #0
    19bc:	7213      	strb	r3, [r2, #8]
              state->init_state = CSB_INIT_DONE;
    19be:	2205      	movs	r2, #5
    19c0:	714a      	strb	r2, [r1, #5]
              state->curr_baud_rate = CSB_CAN_BAUD;
    19c2:	4a06      	ldr	r2, [pc, #24]	; (19dc <Init_Step+0x94>)
    19c4:	608a      	str	r2, [r1, #8]
              input->receive_bms_config = false;
    19c6:	7643      	strb	r3, [r0, #25]
    19c8:	e7cd      	b.n	1966 <Init_Step+0x1e>
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	000031fc 	.word	0x000031fc
    19d0:	0007a120 	.word	0x0007a120
    19d4:	10000724 	.word	0x10000724
    19d8:	00001388 	.word	0x00001388
    19dc:	0003d090 	.word	0x0003d090

000019e0 <Is_Valid_Jump>:
}

bool Is_Valid_Jump(CSB_SSM_MODE_T mode1, CSB_SSM_MODE_T mode2) {

    // idle switch
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
    19e0:	2801      	cmp	r0, #1
    19e2:	d010      	beq.n	1a06 <Is_Valid_Jump+0x26>
        return true;
    } else if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
    19e4:	2802      	cmp	r0, #2
    19e6:	d008      	beq.n	19fa <Is_Valid_Jump+0x1a>
        return true;
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_IDLE) {
    19e8:	2803      	cmp	r0, #3
    19ea:	d113      	bne.n	1a14 <Is_Valid_Jump+0x34>
    19ec:	2901      	cmp	r1, #1
    19ee:	d013      	beq.n	1a18 <Is_Valid_Jump+0x38>
        return true;

    // charge and balance switch
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_CHARGE) {
    19f0:	3902      	subs	r1, #2
    19f2:	4248      	negs	r0, r1
    19f4:	4148      	adcs	r0, r1
    19f6:	b2c0      	uxtb	r0, r0
    19f8:	e004      	b.n	1a04 <Is_Valid_Jump+0x24>
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
    19fa:	4381      	bics	r1, r0
    19fc:	3901      	subs	r1, #1
    19fe:	4248      	negs	r0, r1
    1a00:	4148      	adcs	r0, r1
    1a02:	b2c0      	uxtb	r0, r0
        return true;
    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;
    }
    return false;
}
    1a04:	4770      	bx	lr
}

bool Is_Valid_Jump(CSB_SSM_MODE_T mode1, CSB_SSM_MODE_T mode2) {

    // idle switch
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
    1a06:	2300      	movs	r3, #0
    1a08:	3902      	subs	r1, #2
    1a0a:	b2c9      	uxtb	r1, r1
    1a0c:	4288      	cmp	r0, r1
    1a0e:	415b      	adcs	r3, r3
    1a10:	b2d8      	uxtb	r0, r3
    1a12:	e7f7      	b.n	1a04 <Is_Valid_Jump+0x24>
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_CHARGE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;
    }
    return false;
    1a14:	2000      	movs	r0, #0
    1a16:	e7f5      	b.n	1a04 <Is_Valid_Jump+0x24>
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_IDLE) {
        return true;
    1a18:	2001      	movs	r0, #1
    1a1a:	e7f3      	b.n	1a04 <Is_Valid_Jump+0x24>

00001a1c <SSM_Step>:
            return true;
    }
    return false;
}

void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
    1a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1e:	4647      	mov	r7, r8
    1a20:	b480      	push	{r7}
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1a22:	790c      	ldrb	r4, [r1, #4]
    1a24:	7907      	ldrb	r7, [r0, #4]
            return true;
    }
    return false;
}

void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
    1a26:	0006      	movs	r6, r0
    1a28:	000d      	movs	r5, r1
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1a2a:	0020      	movs	r0, r4
    1a2c:	0039      	movs	r1, r7
            return true;
    }
    return false;
}

void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
    1a2e:	4690      	mov	r8, r2
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1a30:	f7ff ffd6 	bl	19e0 <Is_Valid_Jump>
    1a34:	2800      	cmp	r0, #0
    1a36:	d005      	beq.n	1a44 <SSM_Step+0x28>
    }
    return false;
}

bool Is_State_Done(CSB_STATE_T *state) {
    switch(state->curr_mode) {
    1a38:	2c01      	cmp	r4, #1
    1a3a:	d01a      	beq.n	1a72 <SSM_Step+0x56>
    1a3c:	2c00      	cmp	r4, #0
    1a3e:	d01b      	beq.n	1a78 <SSM_Step+0x5c>
    1a40:	2c03      	cmp	r4, #3
    1a42:	d913      	bls.n	1a6c <SSM_Step+0x50>

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
        state->curr_mode = input->mode_request;
    }

    switch(state->curr_mode) {
    1a44:	2c02      	cmp	r4, #2
    1a46:	d009      	beq.n	1a5c <SSM_Step+0x40>
    1a48:	2c03      	cmp	r4, #3
    1a4a:	d007      	beq.n	1a5c <SSM_Step+0x40>
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	d10a      	bne.n	1a66 <SSM_Step+0x4a>
        case CSB_SSM_MODE_IDLE:
            break;
        case CSB_SSM_MODE_INIT:
            Init_Step(input, state, output);
    1a50:	4642      	mov	r2, r8
    1a52:	0029      	movs	r1, r5
    1a54:	0030      	movs	r0, r6
    1a56:	f7ff ff77 	bl	1948 <Init_Step>
            break;
    1a5a:	e004      	b.n	1a66 <SSM_Step+0x4a>
        case CSB_SSM_MODE_CHARGE:
            Charge_Step(input, state, output);
            break;
        case CSB_SSM_MODE_BALANCE:
            Charge_Step(input, state, output);
    1a5c:	4642      	mov	r2, r8
    1a5e:	0029      	movs	r1, r5
    1a60:	0030      	movs	r0, r6
    1a62:	f7fe fd5f 	bl	524 <Charge_Step>
            break;
    }
}
    1a66:	bc04      	pop	{r2}
    1a68:	4690      	mov	r8, r2
    1a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1a6c:	79ab      	ldrb	r3, [r5, #6]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d1e8      	bne.n	1a44 <SSM_Step+0x28>
        state->curr_mode = input->mode_request;
    1a72:	712f      	strb	r7, [r5, #4]
    1a74:	003c      	movs	r4, r7
    1a76:	e7e5      	b.n	1a44 <SSM_Step+0x28>
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1a78:	796b      	ldrb	r3, [r5, #5]
    1a7a:	2b05      	cmp	r3, #5
    1a7c:	d1e8      	bne.n	1a50 <SSM_Step+0x34>
    1a7e:	e7f8      	b.n	1a72 <SSM_Step+0x56>

00001a80 <SystemInit>:
 * @brief  Setup the microcontroller system.
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
    1a80:	4a18      	ldr	r2, [pc, #96]	; (1ae4 <SystemInit+0x64>)
    1a82:	4b19      	ldr	r3, [pc, #100]	; (1ae8 <SystemInit+0x68>)
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
    1a84:	2001      	movs	r0, #1
 * @brief  Setup the microcontroller system.
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
    1a86:	601a      	str	r2, [r3, #0]
  TicksPerMS = __SYSTEM_CLOCK/1000;
    1a88:	4a18      	ldr	r2, [pc, #96]	; (1aec <SystemInit+0x6c>)
    1a8a:	4b19      	ldr	r3, [pc, #100]	; (1af0 <SystemInit+0x70>)

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
    1a8c:	4919      	ldr	r1, [pc, #100]	; (1af4 <SystemInit+0x74>)
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
  TicksPerMS = __SYSTEM_CLOCK/1000;
    1a8e:	601a      	str	r2, [r3, #0]

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
    1a90:	2200      	movs	r2, #0
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
    1a92:	2301      	movs	r3, #1

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
    1a94:	640a      	str	r2, [r1, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
    1a96:	644b      	str	r3, [r1, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
    1a98:	644a      	str	r2, [r1, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
    1a9a:	644b      	str	r3, [r1, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
    1a9c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1a9e:	4b15      	ldr	r3, [pc, #84]	; (1af4 <SystemInit+0x74>)
    1aa0:	4210      	tst	r0, r2
    1aa2:	d0fb      	beq.n	1a9c <SystemInit+0x1c>
#if (SYSPLL_SETUP)                              /* System PLL Setup      */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
    1aa4:	2223      	movs	r2, #35	; 0x23
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 7);        /* Power-up SYSPLL          */
    1aa6:	218e      	movs	r1, #142	; 0x8e
    1aa8:	2080      	movs	r0, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
#if (SYSPLL_SETUP)                              /* System PLL Setup      */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
    1aaa:	609a      	str	r2, [r3, #8]
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 7);        /* Power-up SYSPLL          */
    1aac:	0089      	lsls	r1, r1, #2
    1aae:	585a      	ldr	r2, [r3, r1]
    1ab0:	4382      	bics	r2, r0
    1ab2:	505a      	str	r2, [r3, r1]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));      /* Wait Until PLL Locked    */
    1ab4:	001a      	movs	r2, r3
    1ab6:	387f      	subs	r0, #127	; 0x7f
    1ab8:	68d1      	ldr	r1, [r2, #12]
    1aba:	4b0e      	ldr	r3, [pc, #56]	; (1af4 <SystemInit+0x74>)
    1abc:	4208      	tst	r0, r1
    1abe:	d0fb      	beq.n	1ab8 <SystemInit+0x38>
#endif
#if (WDTOSC_SETUP)                              /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 6);        /* Power-up WDT Clock    */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;    /* Select PLL Clock Output  */
    1ac0:	2203      	movs	r2, #3
    1ac2:	671a      	str	r2, [r3, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
    1ac4:	2200      	movs	r2, #0
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
    1ac6:	2001      	movs	r0, #1
#if (WDTOSC_SETUP)                              /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 6);        /* Power-up WDT Clock    */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;    /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
    1ac8:	675a      	str	r2, [r3, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
    1aca:	3201      	adds	r2, #1
    1acc:	675a      	str	r2, [r3, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
    1ace:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    1ad0:	4908      	ldr	r1, [pc, #32]	; (1af4 <SystemInit+0x74>)
    1ad2:	4210      	tst	r0, r2
    1ad4:	d0fb      	beq.n	1ace <SystemInit+0x4e>
#endif

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
    1ad6:	2301      	movs	r3, #1
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
    1ad8:	4a07      	ldr	r2, [pc, #28]	; (1af8 <SystemInit+0x78>)
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
#endif

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
    1ada:	678b      	str	r3, [r1, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
    1adc:	337f      	adds	r3, #127	; 0x7f
    1ade:	50ca      	str	r2, [r1, r3]
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)                 /* Memory Mapping Setup              */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
    1ae0:	4770      	bx	lr
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	02dc6c00 	.word	0x02dc6c00
    1ae8:	10000728 	.word	0x10000728
    1aec:	0000bb80 	.word	0x0000bb80
    1af0:	1000072c 	.word	0x1000072c
    1af4:	40048000 	.word	0x40048000
    1af8:	0001005f 	.word	0x0001005f

00001afc <Chip_Clock_GetMainClockRate>:
/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
    1afc:	2103      	movs	r1, #3

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
    1afe:	b500      	push	{lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
    1b00:	4a1b      	ldr	r2, [pc, #108]	; (1b70 <Chip_Clock_GetMainClockRate+0x74>)

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
    1b02:	b083      	sub	sp, #12
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
    1b04:	6f13      	ldr	r3, [r2, #112]	; 0x70
    1b06:	400b      	ands	r3, r1
    1b08:	2b02      	cmp	r3, #2
    1b0a:	d01c      	beq.n	1b46 <Chip_Clock_GetMainClockRate+0x4a>
    1b0c:	2b03      	cmp	r3, #3
    1b0e:	d00c      	beq.n	1b2a <Chip_Clock_GetMainClockRate+0x2e>
    1b10:	2b01      	cmp	r3, #1
    1b12:	d002      	beq.n	1b1a <Chip_Clock_GetMainClockRate+0x1e>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
    1b14:	4817      	ldr	r0, [pc, #92]	; (1b74 <Chip_Clock_GetMainClockRate+0x78>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
    1b16:	b003      	add	sp, #12
    1b18:	bd00      	pop	{pc}
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
    1b1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1b1c:	4019      	ands	r1, r3
    1b1e:	d0f9      	beq.n	1b14 <Chip_Clock_GetMainClockRate+0x18>
    1b20:	2901      	cmp	r1, #1
    1b22:	d123      	bne.n	1b6c <Chip_Clock_GetMainClockRate+0x70>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
    1b24:	4b14      	ldr	r3, [pc, #80]	; (1b78 <Chip_Clock_GetMainClockRate+0x7c>)
    1b26:	6818      	ldr	r0, [r3, #0]
    1b28:	e7f5      	b.n	1b16 <Chip_Clock_GetMainClockRate+0x1a>
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
    1b2a:	6891      	ldr	r1, [r2, #8]
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
    1b2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    1b2e:	4013      	ands	r3, r2
    1b30:	d016      	beq.n	1b60 <Chip_Clock_GetMainClockRate+0x64>
    1b32:	2b01      	cmp	r3, #1
    1b34:	d11a      	bne.n	1b6c <Chip_Clock_GetMainClockRate+0x70>
    1b36:	201f      	movs	r0, #31
    1b38:	4b0f      	ldr	r3, [pc, #60]	; (1b78 <Chip_Clock_GetMainClockRate+0x7c>)
    1b3a:	4008      	ands	r0, r1
    1b3c:	681b      	ldr	r3, [r3, #0]
    1b3e:	3001      	adds	r0, #1
    1b40:	9301      	str	r3, [sp, #4]
    1b42:	4358      	muls	r0, r3
    1b44:	e7e7      	b.n	1b16 <Chip_Clock_GetMainClockRate+0x1a>
	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
    1b46:	211f      	movs	r1, #31
#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
    1b48:	6a53      	ldr	r3, [r2, #36]	; 0x24
	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
    1b4a:	05da      	lsls	r2, r3, #23
    1b4c:	4019      	ands	r1, r3
    1b4e:	0f12      	lsrs	r2, r2, #28
    1b50:	4b0a      	ldr	r3, [pc, #40]	; (1b7c <Chip_Clock_GetMainClockRate+0x80>)
    1b52:	0092      	lsls	r2, r2, #2
    1b54:	3101      	adds	r1, #1
    1b56:	0049      	lsls	r1, r1, #1
    1b58:	58d0      	ldr	r0, [r2, r3]
    1b5a:	f000 fd53 	bl	2604 <__aeabi_uidiv>
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
		break;
    1b5e:	e7da      	b.n	1b16 <Chip_Clock_GetMainClockRate+0x1a>
    1b60:	201f      	movs	r0, #31
    1b62:	4b04      	ldr	r3, [pc, #16]	; (1b74 <Chip_Clock_GetMainClockRate+0x78>)
    1b64:	4008      	ands	r0, r1
    1b66:	3001      	adds	r0, #1
    1b68:	4358      	muls	r0, r3
    1b6a:	e7d4      	b.n	1b16 <Chip_Clock_GetMainClockRate+0x1a>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
    1b6c:	2000      	movs	r0, #0
    1b6e:	e7d2      	b.n	1b16 <Chip_Clock_GetMainClockRate+0x1a>
    1b70:	40048000 	.word	0x40048000
    1b74:	00b71b00 	.word	0x00b71b00
    1b78:	00002a40 	.word	0x00002a40
    1b7c:	00003214 	.word	0x00003214

00001b80 <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
    1b80:	2280      	movs	r2, #128	; 0x80
    1b82:	2340      	movs	r3, #64	; 0x40
    1b84:	4902      	ldr	r1, [pc, #8]	; (1b90 <Chip_GPIO_Init+0x10>)
    1b86:	5888      	ldr	r0, [r1, r2]
    1b88:	4303      	orrs	r3, r0
    1b8a:	508b      	str	r3, [r1, r2]
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
    1b8c:	4770      	bx	lr
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	40048000 	.word	0x40048000

00001b94 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
    1b94:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
    1b96:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
    1b98:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
    1b9a:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
    1b9c:	6103      	str	r3, [r0, #16]
    1b9e:	60c3      	str	r3, [r0, #12]

	return 1;
}
    1ba0:	2001      	movs	r0, #1
    1ba2:	4770      	bx	lr

00001ba4 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
    1ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ba6:	68c2      	ldr	r2, [r0, #12]
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    1ba8:	6903      	ldr	r3, [r0, #16]
	return 1;
}

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
    1baa:	000d      	movs	r5, r1
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
    1bac:	6841      	ldr	r1, [r0, #4]
    1bae:	0004      	movs	r4, r0
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    1bb0:	1ad3      	subs	r3, r2, r3
		return 0;
    1bb2:	2000      	movs	r0, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    1bb4:	428b      	cmp	r3, r1
    1bb6:	d20e      	bcs.n	1bd6 <RingBuffer_Insert+0x32>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
    1bb8:	0010      	movs	r0, r2
    1bba:	f000 fda9 	bl	2710 <__aeabi_uidivmod>

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
    1bbe:	68a6      	ldr	r6, [r4, #8]
}

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;
    1bc0:	6827      	ldr	r7, [r4, #0]
	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
    1bc2:	4371      	muls	r1, r6
    1bc4:	0032      	movs	r2, r6
    1bc6:	1878      	adds	r0, r7, r1
    1bc8:	0029      	movs	r1, r5
    1bca:	f000 fda7 	bl	271c <memcpy>
	RingBuff->head++;

	return 1;
    1bce:	2001      	movs	r0, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
    1bd0:	68e3      	ldr	r3, [r4, #12]
    1bd2:	3301      	adds	r3, #1
    1bd4:	60e3      	str	r3, [r4, #12]

	return 1;
}
    1bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001bd8 <RingBuffer_InsertMult>:

/* Insert multiple items into Ring Buffer */
uint32_t RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{
    1bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bda:	4647      	mov	r7, r8
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
    1bdc:	6903      	ldr	r3, [r0, #16]
    1bde:	b480      	push	{r7}
    1be0:	000e      	movs	r6, r1
    1be2:	0017      	movs	r7, r2
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
    1be4:	6841      	ldr	r1, [r0, #4]
    1be6:	68c2      	ldr	r2, [r0, #12]
    1be8:	0005      	movs	r5, r0
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
    1bea:	1ad3      	subs	r3, r2, r3
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
    1bec:	4688      	mov	r8, r1
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
    1bee:	2000      	movs	r0, #0

	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    1bf0:	428b      	cmp	r3, r1
    1bf2:	d230      	bcs.n	1c56 <RingBuffer_InsertMult+0x7e>
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
    1bf4:	0010      	movs	r0, r2
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of free items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetFree(RINGBUFF_T *RingBuff)
{
	return RingBuff->count - RingBuffer_GetCount(RingBuff);
    1bf6:	1acc      	subs	r4, r1, r3
    1bf8:	f000 fd8a 	bl	2710 <__aeabi_uidivmod>
    1bfc:	190b      	adds	r3, r1, r4
    1bfe:	2200      	movs	r2, #0
    1c00:	4543      	cmp	r3, r8
    1c02:	d303      	bcc.n	1c0c <RingBuffer_InsertMult+0x34>
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
    1c04:	4643      	mov	r3, r8
    1c06:	1a5b      	subs	r3, r3, r1
    1c08:	1ae2      	subs	r2, r4, r3
    1c0a:	001c      	movs	r4, r3

/* Insert multiple items into Ring Buffer */
uint32_t RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{

	uint8_t *ptr = RingBuff->data;
    1c0c:	6828      	ldr	r0, [r5, #0]
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    1c0e:	42bc      	cmp	r4, r7
    1c10:	dc26      	bgt.n	1c60 <RingBuffer_InsertMult+0x88>
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    1c12:	1b3f      	subs	r7, r7, r4
    1c14:	4297      	cmp	r7, r2
    1c16:	dc21      	bgt.n	1c5c <RingBuffer_InsertMult+0x84>
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
    1c18:	68aa      	ldr	r2, [r5, #8]
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
    1c1a:	4351      	muls	r1, r2
    1c1c:	4362      	muls	r2, r4
    1c1e:	1840      	adds	r0, r0, r1
    1c20:	0031      	movs	r1, r6
    1c22:	f000 fd7b 	bl	271c <memcpy>
	RingBuff->head += cnt1;
    1c26:	68eb      	ldr	r3, [r5, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
    1c28:	6869      	ldr	r1, [r5, #4]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
	RingBuff->head += cnt1;
    1c2a:	18e0      	adds	r0, r4, r3

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
    1c2c:	68ab      	ldr	r3, [r5, #8]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
	RingBuff->head += cnt1;
    1c2e:	60e8      	str	r0, [r5, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
    1c30:	4698      	mov	r8, r3
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
    1c32:	f000 fd6d 	bl	2710 <__aeabi_uidivmod>
    1c36:	4640      	mov	r0, r8
    1c38:	4348      	muls	r0, r1
    1c3a:	4641      	mov	r1, r8
    1c3c:	682b      	ldr	r3, [r5, #0]
    1c3e:	4642      	mov	r2, r8
    1c40:	469c      	mov	ip, r3
    1c42:	4361      	muls	r1, r4
    1c44:	4460      	add	r0, ip
    1c46:	437a      	muls	r2, r7
    1c48:	1871      	adds	r1, r6, r1
    1c4a:	f000 fd67 	bl	271c <memcpy>
	RingBuff->head += cnt2;
    1c4e:	68eb      	ldr	r3, [r5, #12]

	return cnt1 + cnt2;
    1c50:	19e0      	adds	r0, r4, r7

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
	RingBuff->head += cnt2;
    1c52:	19db      	adds	r3, r3, r7
    1c54:	60eb      	str	r3, [r5, #12]

	return cnt1 + cnt2;
}
    1c56:	bc04      	pop	{r2}
    1c58:	4690      	mov	r8, r2
    1c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    1c5c:	0017      	movs	r7, r2
    1c5e:	e7db      	b.n	1c18 <RingBuffer_InsertMult+0x40>
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    1c60:	003c      	movs	r4, r7
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    1c62:	1b3f      	subs	r7, r7, r4
    1c64:	4297      	cmp	r7, r2
    1c66:	ddd7      	ble.n	1c18 <RingBuffer_InsertMult+0x40>
    1c68:	e7f8      	b.n	1c5c <RingBuffer_InsertMult+0x84>
    1c6a:	46c0      	nop			; (mov r8, r8)

00001c6c <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
    1c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c6e:	0004      	movs	r4, r0
    1c70:	6903      	ldr	r3, [r0, #16]
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
    1c72:	68e2      	ldr	r2, [r4, #12]
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
    1c74:	000e      	movs	r6, r1
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
    1c76:	2000      	movs	r0, #0
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
    1c78:	429a      	cmp	r2, r3
    1c7a:	d00f      	beq.n	1c9c <RingBuffer_Pop+0x30>
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
    1c7c:	0018      	movs	r0, r3
    1c7e:	6861      	ldr	r1, [r4, #4]
    1c80:	f000 fd46 	bl	2710 <__aeabi_uidivmod>

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
    1c84:	68a5      	ldr	r5, [r4, #8]
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;
    1c86:	6827      	ldr	r7, [r4, #0]
	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
    1c88:	4369      	muls	r1, r5
    1c8a:	002a      	movs	r2, r5
    1c8c:	1879      	adds	r1, r7, r1
    1c8e:	0030      	movs	r0, r6
    1c90:	f000 fd44 	bl	271c <memcpy>
	RingBuff->tail++;
 
	return 1;
    1c94:	2001      	movs	r0, #1
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;
    1c96:	6923      	ldr	r3, [r4, #16]
    1c98:	3301      	adds	r3, #1
    1c9a:	6123      	str	r3, [r4, #16]
 
	return 1;
}
    1c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)

00001ca0 <RingBuffer_PopMult>:

/* Pop multiple items from Ring buffer */
uint32_t RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
    1ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ca2:	464f      	mov	r7, r9
    1ca4:	4646      	mov	r6, r8
    1ca6:	68c4      	ldr	r4, [r0, #12]
    1ca8:	b4c0      	push	{r6, r7}
    1caa:	0007      	movs	r7, r0
    1cac:	6900      	ldr	r0, [r0, #16]
    1cae:	4688      	mov	r8, r1
    1cb0:	0015      	movs	r5, r2
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
    1cb2:	4284      	cmp	r4, r0
    1cb4:	d03d      	beq.n	1d32 <RingBuffer_PopMult+0x92>
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
    1cb6:	687e      	ldr	r6, [r7, #4]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
    1cb8:	1a24      	subs	r4, r4, r0
    1cba:	0031      	movs	r1, r6
    1cbc:	f000 fd28 	bl	2710 <__aeabi_uidivmod>
    1cc0:	190b      	adds	r3, r1, r4
    1cc2:	2200      	movs	r2, #0
    1cc4:	429e      	cmp	r6, r3
    1cc6:	d802      	bhi.n	1cce <RingBuffer_PopMult+0x2e>
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
    1cc8:	1a76      	subs	r6, r6, r1
    1cca:	1ba2      	subs	r2, r4, r6
    1ccc:	0034      	movs	r4, r6
}

/* Pop multiple items from Ring buffer */
uint32_t RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
	uint8_t *ptr = RingBuff->data;
    1cce:	6838      	ldr	r0, [r7, #0]
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    1cd0:	42ac      	cmp	r4, r5
    1cd2:	dc29      	bgt.n	1d28 <RingBuffer_PopMult+0x88>
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    1cd4:	1b2d      	subs	r5, r5, r4
    1cd6:	4295      	cmp	r5, r2
    1cd8:	dc24      	bgt.n	1d24 <RingBuffer_PopMult+0x84>
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
    1cda:	0022      	movs	r2, r4

	cnt2 = MIN(cnt2, num);
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
    1cdc:	68bb      	ldr	r3, [r7, #8]
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
    1cde:	435a      	muls	r2, r3
    1ce0:	434b      	muls	r3, r1
    1ce2:	18c1      	adds	r1, r0, r3
    1ce4:	4640      	mov	r0, r8
    1ce6:	f000 fd19 	bl	271c <memcpy>
	RingBuff->tail += cnt1;
    1cea:	693b      	ldr	r3, [r7, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
    1cec:	68be      	ldr	r6, [r7, #8]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
	RingBuff->tail += cnt1;
    1cee:	18e0      	adds	r0, r4, r3

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
    1cf0:	0033      	movs	r3, r6
    1cf2:	4363      	muls	r3, r4
    1cf4:	4498      	add	r8, r3
    1cf6:	002b      	movs	r3, r5
    1cf8:	4373      	muls	r3, r6
    1cfa:	6879      	ldr	r1, [r7, #4]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
	RingBuff->tail += cnt1;
    1cfc:	6138      	str	r0, [r7, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
    1cfe:	4699      	mov	r9, r3
    1d00:	f000 fd06 	bl	2710 <__aeabi_uidivmod>
    1d04:	683b      	ldr	r3, [r7, #0]
    1d06:	4371      	muls	r1, r6
    1d08:	469c      	mov	ip, r3
    1d0a:	464a      	mov	r2, r9
    1d0c:	4461      	add	r1, ip
    1d0e:	4640      	mov	r0, r8
    1d10:	f000 fd04 	bl	271c <memcpy>
	RingBuff->tail += cnt2;
    1d14:	693b      	ldr	r3, [r7, #16]

	return cnt1 + cnt2;
    1d16:	1960      	adds	r0, r4, r5

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
	RingBuff->tail += cnt2;
    1d18:	195b      	adds	r3, r3, r5
    1d1a:	613b      	str	r3, [r7, #16]

	return cnt1 + cnt2;
}
    1d1c:	bc0c      	pop	{r2, r3}
    1d1e:	4690      	mov	r8, r2
    1d20:	4699      	mov	r9, r3
    1d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    1d24:	0015      	movs	r5, r2
    1d26:	e7d8      	b.n	1cda <RingBuffer_PopMult+0x3a>
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    1d28:	002c      	movs	r4, r5
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    1d2a:	1b2d      	subs	r5, r5, r4
    1d2c:	4295      	cmp	r5, r2
    1d2e:	ddd4      	ble.n	1cda <RingBuffer_PopMult+0x3a>
    1d30:	e7f8      	b.n	1d24 <RingBuffer_PopMult+0x84>
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
    1d32:	2000      	movs	r0, #0
    1d34:	e7f2      	b.n	1d1c <RingBuffer_PopMult+0x7c>
    1d36:	46c0      	nop			; (mov r8, r8)

00001d38 <Chip_UART_Init>:
    1d38:	2180      	movs	r1, #128	; 0x80
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
    1d3a:	b510      	push	{r4, lr}
    1d3c:	2480      	movs	r4, #128	; 0x80
    1d3e:	4b07      	ldr	r3, [pc, #28]	; (1d5c <Chip_UART_Init+0x24>)
    1d40:	0164      	lsls	r4, r4, #5
    1d42:	585a      	ldr	r2, [r3, r1]
    1d44:	4322      	orrs	r2, r4
    1d46:	505a      	str	r2, [r3, r1]
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
    1d48:	2298      	movs	r2, #152	; 0x98
    1d4a:	397f      	subs	r1, #127	; 0x7f
    1d4c:	5099      	str	r1, [r3, r2]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
    1d4e:	2307      	movs	r3, #7
    1d50:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
    1d52:	3b04      	subs	r3, #4
    1d54:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
    1d56:	330d      	adds	r3, #13
    1d58:	6283      	str	r3, [r0, #40]	; 0x28
}
    1d5a:	bd10      	pop	{r4, pc}
    1d5c:	40048000 	.word	0x40048000

00001d60 <Chip_UART_SendBlocking>:
	return sent;
}

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
    1d60:	b570      	push	{r4, r5, r6, lr}
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
    1d62:	2600      	movs	r6, #0
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
    1d64:	2520      	movs	r5, #32
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
    1d66:	2a00      	cmp	r2, #0
    1d68:	dd0d      	ble.n	1d86 <Chip_UART_SendBlocking+0x26>
    1d6a:	2300      	movs	r3, #0
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    1d6c:	6944      	ldr	r4, [r0, #20]
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
    1d6e:	4225      	tst	r5, r4
    1d70:	d004      	beq.n	1d7c <Chip_UART_SendBlocking+0x1c>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
    1d72:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
    1d74:	3301      	adds	r3, #1
    1d76:	6004      	str	r4, [r0, #0]
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
    1d78:	429a      	cmp	r2, r3
    1d7a:	dcf7      	bgt.n	1d6c <Chip_UART_SendBlocking+0xc>
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
		pass = Chip_UART_Send(pUART, p8, numBytes);
		numBytes -= pass;
    1d7c:	1ad2      	subs	r2, r2, r3
		sent += pass;
    1d7e:	18f6      	adds	r6, r6, r3
		p8 += pass;
    1d80:	18c9      	adds	r1, r1, r3
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
    1d82:	2a00      	cmp	r2, #0
    1d84:	dcf1      	bgt.n	1d6a <Chip_UART_SendBlocking+0xa>
		sent += pass;
		p8 += pass;
	}

	return sent;
}
    1d86:	0030      	movs	r0, r6
    1d88:	bd70      	pop	{r4, r5, r6, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)

00001d8c <Chip_UART_TXIntHandlerRB>:
	}
}

/* UART transmit-only interrupt handler for ring buffers */
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
    1d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8e:	b083      	sub	sp, #12
    1d90:	466a      	mov	r2, sp
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    1d92:	6943      	ldr	r3, [r0, #20]
    1d94:	0004      	movs	r4, r0
    1d96:	000e      	movs	r6, r1
    1d98:	1dd5      	adds	r5, r2, #7
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
    1d9a:	2720      	movs	r7, #32
    1d9c:	069b      	lsls	r3, r3, #26
    1d9e:	d405      	bmi.n	1dac <Chip_UART_TXIntHandlerRB+0x20>
    1da0:	e00a      	b.n	1db8 <Chip_UART_TXIntHandlerRB+0x2c>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
    1da2:	782b      	ldrb	r3, [r5, #0]
    1da4:	6023      	str	r3, [r4, #0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    1da6:	6963      	ldr	r3, [r4, #20]
    1da8:	421f      	tst	r7, r3
    1daa:	d005      	beq.n	1db8 <Chip_UART_TXIntHandlerRB+0x2c>
		   RingBuffer_Pop(pRB, &ch)) {
    1dac:	0029      	movs	r1, r5
    1dae:	0030      	movs	r0, r6
    1db0:	f7ff ff5c 	bl	1c6c <RingBuffer_Pop>
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
    1db4:	2800      	cmp	r0, #0
    1db6:	d1f4      	bne.n	1da2 <Chip_UART_TXIntHandlerRB+0x16>
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
	}
}
    1db8:	b003      	add	sp, #12
    1dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001dbc <Chip_UART_SendRB>:

/* Populate a transmit ring buffer and start UART transmit */
uint32_t Chip_UART_SendRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, const void *data, int bytes)
{
    1dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dbe:	464f      	mov	r7, r9
    1dc0:	4646      	mov	r6, r8
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
    1dc2:	2502      	movs	r5, #2
    1dc4:	b4c0      	push	{r6, r7}
    1dc6:	4689      	mov	r9, r1
    1dc8:	0016      	movs	r6, r2
    1dca:	001f      	movs	r7, r3
    1dcc:	6843      	ldr	r3, [r0, #4]
    1dce:	0004      	movs	r4, r0
    1dd0:	43ab      	bics	r3, r5

	/* Don't let UART transmit ring buffer change in the UART IRQ handler */
	Chip_UART_IntDisable(pUART, UART_IER_THREINT);

	/* Move as much data as possible into transmit ring buffer */
	ret = RingBuffer_InsertMult(pRB, p8, bytes);
    1dd2:	003a      	movs	r2, r7
    1dd4:	6043      	str	r3, [r0, #4]
    1dd6:	0031      	movs	r1, r6
    1dd8:	4648      	mov	r0, r9
    1dda:	f7ff fefd 	bl	1bd8 <RingBuffer_InsertMult>
    1dde:	4680      	mov	r8, r0
	Chip_UART_TXIntHandlerRB(pUART, pRB);
    1de0:	4649      	mov	r1, r9
    1de2:	0020      	movs	r0, r4
    1de4:	f7ff ffd2 	bl	1d8c <Chip_UART_TXIntHandlerRB>

	/* Add additional data to transmit ring buffer if possible */
	ret += RingBuffer_InsertMult(pRB, (p8 + ret), (bytes - ret));
    1de8:	4643      	mov	r3, r8
    1dea:	0031      	movs	r1, r6
    1dec:	1afa      	subs	r2, r7, r3
    1dee:	4441      	add	r1, r8
    1df0:	4648      	mov	r0, r9
    1df2:	f7ff fef1 	bl	1bd8 <RingBuffer_InsertMult>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
    1df6:	6863      	ldr	r3, [r4, #4]

	/* Enable UART transmit interrupt */
	Chip_UART_IntEnable(pUART, UART_IER_THREINT);

	return ret;
    1df8:	4440      	add	r0, r8
    1dfa:	431d      	orrs	r5, r3
    1dfc:	6065      	str	r5, [r4, #4]
}
    1dfe:	bc0c      	pop	{r2, r3}
    1e00:	4690      	mov	r8, r2
    1e02:	4699      	mov	r9, r3
    1e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e06:	46c0      	nop			; (mov r8, r8)

00001e08 <Chip_UART_ReadRB>:

/* Copy data from a receive ring buffer */
int Chip_UART_ReadRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, void *data, int bytes)
{
    1e08:	b510      	push	{r4, lr}
    1e0a:	0008      	movs	r0, r1
    1e0c:	0011      	movs	r1, r2
	(void) pUART;

	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
    1e0e:	001a      	movs	r2, r3
    1e10:	f7ff ff46 	bl	1ca0 <RingBuffer_PopMult>
}
    1e14:	bd10      	pop	{r4, pc}
    1e16:	46c0      	nop			; (mov r8, r8)

00001e18 <Chip_UART_IRQRBHandler>:

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
    1e18:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
    1e1a:	2502      	movs	r5, #2
    1e1c:	6843      	ldr	r3, [r0, #4]
	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
}

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
    1e1e:	b083      	sub	sp, #12
    1e20:	0004      	movs	r4, r0
    1e22:	000f      	movs	r7, r1
    1e24:	0016      	movs	r6, r2
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
    1e26:	421d      	tst	r5, r3
    1e28:	d110      	bne.n	1e4c <Chip_UART_IRQRBHandler+0x34>
    1e2a:	466a      	mov	r2, sp
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    1e2c:	6963      	ldr	r3, [r4, #20]
    1e2e:	1dd5      	adds	r5, r2, #7

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
    1e30:	2601      	movs	r6, #1
    1e32:	07db      	lsls	r3, r3, #31
    1e34:	d508      	bpl.n	1e48 <Chip_UART_IRQRBHandler+0x30>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
    1e36:	6823      	ldr	r3, [r4, #0]
		uint8_t ch = Chip_UART_ReadByte(pUART);
		RingBuffer_Insert(pRB, &ch);
    1e38:	0029      	movs	r1, r5
    1e3a:	0038      	movs	r0, r7
/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
		uint8_t ch = Chip_UART_ReadByte(pUART);
    1e3c:	702b      	strb	r3, [r5, #0]
		RingBuffer_Insert(pRB, &ch);
    1e3e:	f7ff feb1 	bl	1ba4 <RingBuffer_Insert>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    1e42:	6963      	ldr	r3, [r4, #20]

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
    1e44:	421e      	tst	r6, r3
    1e46:	d1f6      	bne.n	1e36 <Chip_UART_IRQRBHandler+0x1e>
		}
	}

	/* Handle receive interrupt */
	Chip_UART_RXIntHandlerRB(pUART, pRXRB);
}
    1e48:	b003      	add	sp, #12
    1e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
		Chip_UART_TXIntHandlerRB(pUART, pTXRB);
    1e4c:	0011      	movs	r1, r2
    1e4e:	f7ff ff9d 	bl	1d8c <Chip_UART_TXIntHandlerRB>

		/* Disable transmit interrupt if the ring buffer is empty */
		if (RingBuffer_IsEmpty(pTXRB)) {
    1e52:	68f2      	ldr	r2, [r6, #12]
    1e54:	6933      	ldr	r3, [r6, #16]
    1e56:	429a      	cmp	r2, r3
    1e58:	d1e7      	bne.n	1e2a <Chip_UART_IRQRBHandler+0x12>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
    1e5a:	6863      	ldr	r3, [r4, #4]
    1e5c:	43ab      	bics	r3, r5
    1e5e:	6063      	str	r3, [r4, #4]
    1e60:	e7e3      	b.n	1e2a <Chip_UART_IRQRBHandler+0x12>
    1e62:	46c0      	nop			; (mov r8, r8)

00001e64 <Chip_UART_SetBaudFDR>:
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baudrate)

{
    1e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e66:	464f      	mov	r7, r9
    1e68:	4646      	mov	r6, r8
    1e6a:	b4c0      	push	{r6, r7}
	uint32_t uClk;
    uint32_t dval;
    uint32_t mval = 0;
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
    1e6c:	010d      	lsls	r5, r1, #4
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baudrate)

{
    1e6e:	0004      	movs	r4, r0
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
	uint32_t actualRate = 0;

	/* Get Clock rate */
	uClk = Chip_Clock_GetMainClockRate();
    1e70:	f7ff fe44 	bl	1afc <Chip_Clock_GetMainClockRate>

    /* The fractional is calculated as (PCLK  % (16 * Baudrate)) / (16 * Baudrate)
     * Let's make it to be the ratio DivVal / MulVal
     */
	dval = uClk % rate16;
    1e74:	0029      	movs	r1, r5
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
	uint32_t actualRate = 0;

	/* Get Clock rate */
	uClk = Chip_Clock_GetMainClockRate();
    1e76:	0007      	movs	r7, r0

    /* The fractional is calculated as (PCLK  % (16 * Baudrate)) / (16 * Baudrate)
     * Let's make it to be the ratio DivVal / MulVal
     */
	dval = uClk % rate16;
    1e78:	f000 fc4a 	bl	2710 <__aeabi_uidivmod>
    * now mormalize the ratio
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
    1e7c:	2900      	cmp	r1, #0
    1e7e:	d036      	beq.n	1eee <Chip_UART_SetBaudFDR+0x8a>
        mval = rate16 / dval;
    1e80:	0028      	movs	r0, r5
    1e82:	f000 fbbf 	bl	2604 <__aeabi_uidiv>
        dval = 1;
    1e86:	220c      	movs	r2, #12
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
        mval = rate16 / dval;
    1e88:	0003      	movs	r3, r0
        dval = 1;
    1e8a:	2000      	movs	r0, #0
    1e8c:	429a      	cmp	r2, r3
    1e8e:	4140      	adcs	r0, r0
    1e90:	260f      	movs	r6, #15
    1e92:	0002      	movs	r2, r0
    1e94:	401e      	ands	r6, r3
    1e96:	0133      	lsls	r3, r6, #4
    1e98:	431a      	orrs	r2, r3
    1e9a:	4681      	mov	r9, r0
    1e9c:	0031      	movs	r1, r6
    1e9e:	4368      	muls	r0, r5
    1ea0:	4690      	mov	r8, r2
    1ea2:	f000 fbaf 	bl	2604 <__aeabi_uidiv>
    1ea6:	1941      	adds	r1, r0, r5
    1ea8:	0038      	movs	r0, r7
    1eaa:	f000 fbab 	bl	2604 <__aeabi_uidiv>
    1eae:	464b      	mov	r3, r9
    1eb0:	0005      	movs	r5, r0
    1eb2:	0118      	lsls	r0, r3, #4
    1eb4:	4368      	muls	r0, r5
    1eb6:	0031      	movs	r1, r6
    1eb8:	f000 fba4 	bl	2604 <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
    1ebc:	2280      	movs	r2, #128	; 0x80
    1ebe:	21ff      	movs	r1, #255	; 0xff
    1ec0:	68e3      	ldr	r3, [r4, #12]
    1ec2:	4313      	orrs	r3, r2
    1ec4:	60e3      	str	r3, [r4, #12]
    1ec6:	000b      	movs	r3, r1
    1ec8:	402b      	ands	r3, r5
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
    1eca:	6023      	str	r3, [r4, #0]
    1ecc:	0a2b      	lsrs	r3, r5, #8
    1ece:	400b      	ands	r3, r1
	pUART->DLM = (uint32_t) dlm;
    1ed0:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
    1ed2:	68e3      	ldr	r3, [r4, #12]
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
    1ed4:	0129      	lsls	r1, r5, #4
    1ed6:	4393      	bics	r3, r2
    1ed8:	60e3      	str	r3, [r4, #12]
    Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(dl), UART_LOAD_DLM(dl));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));
    1eda:	4643      	mov	r3, r8

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
    1edc:	1809      	adds	r1, r1, r0
    Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(dl), UART_LOAD_DLM(dl));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));
    1ede:	62a3      	str	r3, [r4, #40]	; 0x28

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
    1ee0:	0038      	movs	r0, r7
    1ee2:	f000 fb8f 	bl	2604 <__aeabi_uidiv>
}
    1ee6:	bc0c      	pop	{r2, r3}
    1ee8:	4690      	mov	r8, r2
    1eea:	4699      	mov	r9, r3
    1eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eee:	0029      	movs	r1, r5
    1ef0:	0038      	movs	r0, r7
    1ef2:	f000 fb87 	bl	2604 <__aeabi_uidiv>
    * now mormalize the ratio
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
    1ef6:	2300      	movs	r3, #0
    1ef8:	0005      	movs	r5, r0
    1efa:	4698      	mov	r8, r3
    1efc:	2000      	movs	r0, #0
    1efe:	e7dd      	b.n	1ebc <Chip_UART_SetBaudFDR+0x58>

00001f00 <CAN_error>:
}

/*	CAN error callback */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
    1f00:	2201      	movs	r2, #1
	}
}

/*	CAN error callback */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
    1f02:	4b02      	ldr	r3, [pc, #8]	; (1f0c <CAN_error+0xc>)
    1f04:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
    1f06:	4b02      	ldr	r3, [pc, #8]	; (1f10 <CAN_error+0x10>)
    1f08:	701a      	strb	r2, [r3, #0]
}
    1f0a:	4770      	bx	lr
    1f0c:	1000070c 	.word	0x1000070c
    1f10:	10000713 	.word	0x10000713

00001f14 <CAN_rx>:
/*************************************************
 *                  CALLBACKS
 * ************************************************/

/*	CAN receive callback */
void CAN_rx(uint8_t msg_obj_num) {
    1f14:	b510      	push	{r4, lr}
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
    1f16:	4c0b      	ldr	r4, [pc, #44]	; (1f44 <CAN_rx+0x30>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
    1f18:	4b0b      	ldr	r3, [pc, #44]	; (1f48 <CAN_rx+0x34>)
 * ************************************************/

/*	CAN receive callback */
void CAN_rx(uint8_t msg_obj_num) {
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
    1f1a:	7460      	strb	r0, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
    1f1c:	681b      	ldr	r3, [r3, #0]
    1f1e:	0020      	movs	r0, r4
    1f20:	689b      	ldr	r3, [r3, #8]
    1f22:	68db      	ldr	r3, [r3, #12]
    1f24:	4798      	blx	r3
	if (!RingBuffer_Insert(&rx_buffer, &msg_obj)) {
    1f26:	0021      	movs	r1, r4
    1f28:	4808      	ldr	r0, [pc, #32]	; (1f4c <CAN_rx+0x38>)
    1f2a:	f7ff fe3b 	bl	1ba4 <RingBuffer_Insert>
    1f2e:	2800      	cmp	r0, #0
    1f30:	d106      	bne.n	1f40 <CAN_rx+0x2c>
		can_error_flag = true;
    1f32:	2201      	movs	r2, #1
    1f34:	4b06      	ldr	r3, [pc, #24]	; (1f50 <CAN_rx+0x3c>)
    1f36:	701a      	strb	r2, [r3, #0]
		can_error_info = 0x800;
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	4b06      	ldr	r3, [pc, #24]	; (1f54 <CAN_rx+0x40>)
    1f3c:	0112      	lsls	r2, r2, #4
    1f3e:	601a      	str	r2, [r3, #0]
	}
}
    1f40:	bd10      	pop	{r4, pc}
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	10000a60 	.word	0x10000a60
    1f48:	1fff1ff8 	.word	0x1fff1ff8
    1f4c:	100006f8 	.word	0x100006f8
    1f50:	10000713 	.word	0x10000713
    1f54:	1000070c 	.word	0x1000070c

00001f58 <CAN_tx>:

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
    1f58:	b570      	push	{r4, r5, r6, lr}
    1f5a:	0004      	movs	r4, r0
	if (msg_obj_num <= NUM_MSG_OBJS) {
    1f5c:	2802      	cmp	r0, #2
    1f5e:	d907      	bls.n	1f70 <CAN_tx+0x18>
			tmp_msg_obj_2.msgobj = msg_obj_num;
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
			msg_obj_stat[msg_obj_num] = true;
		}
	} else {
		can_error_flag = true;
    1f60:	2201      	movs	r2, #1
    1f62:	4b0d      	ldr	r3, [pc, #52]	; (1f98 <CAN_tx+0x40>)
    1f64:	701a      	strb	r2, [r3, #0]
		can_error_info = 0x400;
    1f66:	2280      	movs	r2, #128	; 0x80
    1f68:	4b0c      	ldr	r3, [pc, #48]	; (1f9c <CAN_tx+0x44>)
    1f6a:	00d2      	lsls	r2, r2, #3
    1f6c:	601a      	str	r2, [r3, #0]
	}
}
    1f6e:	bd70      	pop	{r4, r5, r6, pc}
}

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;
    1f70:	2300      	movs	r3, #0
    1f72:	4e0b      	ldr	r6, [pc, #44]	; (1fa0 <CAN_tx+0x48>)

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
    1f74:	4d0b      	ldr	r5, [pc, #44]	; (1fa4 <CAN_tx+0x4c>)
}

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;
    1f76:	5433      	strb	r3, [r6, r0]

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
    1f78:	0029      	movs	r1, r5
    1f7a:	480b      	ldr	r0, [pc, #44]	; (1fa8 <CAN_tx+0x50>)
    1f7c:	f7ff fe76 	bl	1c6c <RingBuffer_Pop>
    1f80:	2800      	cmp	r0, #0
    1f82:	d0f4      	beq.n	1f6e <CAN_tx+0x16>
			tmp_msg_obj_2.msgobj = msg_obj_num;
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
    1f84:	4b09      	ldr	r3, [pc, #36]	; (1fac <CAN_tx+0x54>)
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
			tmp_msg_obj_2.msgobj = msg_obj_num;
    1f86:	746c      	strb	r4, [r5, #17]
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
    1f88:	681b      	ldr	r3, [r3, #0]
    1f8a:	0028      	movs	r0, r5
    1f8c:	689b      	ldr	r3, [r3, #8]
    1f8e:	691b      	ldr	r3, [r3, #16]
    1f90:	4798      	blx	r3
			msg_obj_stat[msg_obj_num] = true;
    1f92:	2301      	movs	r3, #1
    1f94:	5533      	strb	r3, [r6, r4]
    1f96:	e7ea      	b.n	1f6e <CAN_tx+0x16>
    1f98:	10000713 	.word	0x10000713
    1f9c:	1000070c 	.word	0x1000070c
    1fa0:	10000710 	.word	0x10000710
    1fa4:	10000a48 	.word	0x10000a48
    1fa8:	100006e4 	.word	0x100006e4
    1fac:	1fff1ff8 	.word	0x1fff1ff8

00001fb0 <Baudrate_Calculate>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
    1fb0:	2280      	movs	r2, #128	; 0x80
/*************************************************
 *                  HELPERS
 * ************************************************/

// TODO EXPLAIN WHAT THIS DOES AND SIMPLIFY
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
    1fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb4:	0005      	movs	r5, r0
    1fb6:	2080      	movs	r0, #128	; 0x80
    1fb8:	4647      	mov	r7, r8
    1fba:	000c      	movs	r4, r1
    1fbc:	4920      	ldr	r1, [pc, #128]	; (2040 <Baudrate_Calculate+0x90>)
    1fbe:	0280      	lsls	r0, r0, #10
    1fc0:	588b      	ldr	r3, [r1, r2]
    1fc2:	b480      	push	{r7}
    1fc4:	4303      	orrs	r3, r0
    1fc6:	508b      	str	r3, [r1, r2]
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
    1fc8:	f7ff fd98 	bl	1afc <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baud_rate;
    1fcc:	0029      	movs	r1, r5
    1fce:	f000 fb19 	bl	2604 <__aeabi_uidiv>

	for (div = 0; div <= 15; div++) {
    1fd2:	2300      	movs	r3, #0
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;
    1fd4:	2703      	movs	r7, #3

	for (div = 0; div <= 15; div++) {
    1fd6:	4698      	mov	r8, r3
    1fd8:	2301      	movs	r3, #1
    1fda:	4443      	add	r3, r8
    1fdc:	469c      	mov	ip, r3
/*************************************************
 *                  HELPERS
 * ************************************************/

// TODO EXPLAIN WHAT THIS DOES AND SIMPLIFY
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
    1fde:	003e      	movs	r6, r7
    1fe0:	0019      	movs	r1, r3
    1fe2:	2501      	movs	r5, #1
    1fe4:	0032      	movs	r2, r6
    1fe6:	2303      	movs	r3, #3
	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
    1fe8:	4290      	cmp	r0, r2
    1fea:	d00e      	beq.n	200a <Baudrate_Calculate+0x5a>

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
    1fec:	3301      	adds	r3, #1
    1fee:	1852      	adds	r2, r2, r1
    1ff0:	2b12      	cmp	r3, #18
    1ff2:	d1f9      	bne.n	1fe8 <Baudrate_Calculate+0x38>
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
    1ff4:	3501      	adds	r5, #1
    1ff6:	4461      	add	r1, ip
    1ff8:	19f6      	adds	r6, r6, r7
    1ffa:	2d21      	cmp	r5, #33	; 0x21
    1ffc:	d1f2      	bne.n	1fe4 <Baudrate_Calculate+0x34>
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
    1ffe:	4663      	mov	r3, ip
    2000:	3703      	adds	r7, #3
    2002:	2b10      	cmp	r3, #16
    2004:	d017      	beq.n	2036 <Baudrate_Calculate+0x86>
    2006:	46e0      	mov	r8, ip
    2008:	e7e6      	b.n	1fd8 <Baudrate_Calculate+0x28>
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
    200a:	4642      	mov	r2, r8

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
    200c:	3b03      	subs	r3, #3
					seg1 = segs / 2;
    200e:	0858      	lsrs	r0, r3, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
    2010:	6022      	str	r2, [r4, #0]
					can_api_timing_cfg[1] =
    2012:	0002      	movs	r2, r0
    2014:	2803      	cmp	r0, #3
    2016:	d811      	bhi.n	203c <Baudrate_Calculate+0x8c>
    2018:	21f0      	movs	r1, #240	; 0xf0
    201a:	0196      	lsls	r6, r2, #6
    201c:	0109      	lsls	r1, r1, #4
    201e:	0202      	lsls	r2, r0, #8
    2020:	400a      	ands	r2, r1
    2022:	4332      	orrs	r2, r6
    2024:	3d01      	subs	r5, #1
    2026:	4315      	orrs	r5, r2
    2028:	22e0      	movs	r2, #224	; 0xe0
    202a:	1a1b      	subs	r3, r3, r0
    202c:	031b      	lsls	r3, r3, #12
    202e:	01d2      	lsls	r2, r2, #7
    2030:	4013      	ands	r3, r2
    2032:	431d      	orrs	r5, r3
    2034:	6065      	str	r5, [r4, #4]
					return;
				}
			}
		}
	}
}
    2036:	bc04      	pop	{r2}
    2038:	4690      	mov	r8, r2
    203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
    203c:	2203      	movs	r2, #3
    203e:	e7eb      	b.n	2018 <Baudrate_Calculate+0x68>
    2040:	40048000 	.word	0x40048000

00002044 <CAN_ResetPeripheral>:
}

// TODO SAVE CURRENT IN FLIGHT MESSAGE SO THAT ON RESET ANY IN FLIGHT MESSAGES CAN BE RE-SENT

bool CAN_ResetPeripheral(void) {
	if(LPC_CCAN->CANSTAT>>7&0x01) {
    2044:	4b07      	ldr	r3, [pc, #28]	; (2064 <CAN_ResetPeripheral+0x20>)
    	Chip_SYSCTL_PeriphReset(RESET_CAN0);
    	return true;
    }
   return false;
    2046:	2000      	movs	r0, #0
}

// TODO SAVE CURRENT IN FLIGHT MESSAGE SO THAT ON RESET ANY IN FLIGHT MESSAGES CAN BE RE-SENT

bool CAN_ResetPeripheral(void) {
	if(LPC_CCAN->CANSTAT>>7&0x01) {
    2048:	685b      	ldr	r3, [r3, #4]
    204a:	061b      	lsls	r3, r3, #24
    204c:	d508      	bpl.n	2060 <CAN_ResetPeripheral+0x1c>
 * @note	The peripheral will stay in reset until reset is de-asserted. Call
 * Chip_SYSCTL_DeassertPeriphReset() to de-assert the reset.
 */
STATIC INLINE void Chip_SYSCTL_AssertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL &= ~(1 << (uint32_t) periph);
    204e:	2208      	movs	r2, #8
    2050:	4b05      	ldr	r3, [pc, #20]	; (2068 <CAN_ResetPeripheral+0x24>)
    	Chip_SYSCTL_PeriphReset(RESET_CAN0);
    	return true;
    2052:	3001      	adds	r0, #1
    2054:	6859      	ldr	r1, [r3, #4]
    2056:	4391      	bics	r1, r2
    2058:	6059      	str	r1, [r3, #4]
 * @param	periph	: Peripheral to de-assert reset for
 * @return	Nothing
 */
STATIC INLINE void Chip_SYSCTL_DeassertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL |= (1 << (uint32_t) periph);
    205a:	6859      	ldr	r1, [r3, #4]
    205c:	430a      	orrs	r2, r1
    205e:	605a      	str	r2, [r3, #4]
    }
   return false;
}
    2060:	4770      	bx	lr
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	40050000 	.word	0x40050000
    2068:	40048000 	.word	0x40048000

0000206c <Convert_To_CAN_Error>:

CAN_ERROR_T Convert_To_CAN_Error(uint32_t can_error) {
    206c:	0002      	movs	r2, r0
	if (!can_error) return NO_CAN_ERROR;
    206e:	2000      	movs	r0, #0
    2070:	2a00      	cmp	r2, #0
    2072:	d00f      	beq.n	2094 <Convert_To_CAN_Error+0x28>
    switch(can_error & 0x6) {
    2074:	2306      	movs	r3, #6
    2076:	490f      	ldr	r1, [pc, #60]	; (20b4 <Convert_To_CAN_Error+0x48>)
    2078:	4013      	ands	r3, r2
    207a:	009b      	lsls	r3, r3, #2
    207c:	58cb      	ldr	r3, [r1, r3]
    207e:	469f      	mov	pc, r3
       case 0x4: return BIT1_CAN_ERROR;
       case 0x5: return BIT0_CAN_ERROR;
       case 0x6: return CRC_CAN_ERROR;
       case 0x7: return UNUSED_CAN_ERROR;
    }
    if (can_error == 0x400) return UNRECOGNIZED_MSGOBJ_CAN_ERROR;
    2080:	2380      	movs	r3, #128	; 0x80
    2082:	200c      	movs	r0, #12
    2084:	00db      	lsls	r3, r3, #3
    2086:	429a      	cmp	r2, r3
    2088:	d004      	beq.n	2094 <Convert_To_CAN_Error+0x28>
    if (can_error == 0x800) return RX_BUFFER_FULL_CAN_ERROR;
    208a:	2380      	movs	r3, #128	; 0x80
    208c:	011b      	lsls	r3, r3, #4
    208e:	429a      	cmp	r2, r3
    2090:	d00d      	beq.n	20ae <Convert_To_CAN_Error+0x42>
    return UNRECOGNIZED_ERROR_CODE;
    2092:	3001      	adds	r0, #1
}
    2094:	4770      	bx	lr
}

CAN_ERROR_T Convert_To_CAN_Error(uint32_t can_error) {
	if (!can_error) return NO_CAN_ERROR;
    switch(can_error & 0x6) {
       case 0x1: return STUF_CAN_ERROR;
    2096:	2005      	movs	r0, #5
    2098:	e7fc      	b.n	2094 <Convert_To_CAN_Error+0x28>
       case 0x2: return FORM_CAN_ERROR;
    209a:	2006      	movs	r0, #6
    209c:	e7fa      	b.n	2094 <Convert_To_CAN_Error+0x28>
       case 0x3: return ACK_CAN_ERROR;
    209e:	2007      	movs	r0, #7
    20a0:	e7f8      	b.n	2094 <Convert_To_CAN_Error+0x28>
       case 0x4: return BIT1_CAN_ERROR;
    20a2:	2008      	movs	r0, #8
    20a4:	e7f6      	b.n	2094 <Convert_To_CAN_Error+0x28>
       case 0x5: return BIT0_CAN_ERROR;
    20a6:	2009      	movs	r0, #9
    20a8:	e7f4      	b.n	2094 <Convert_To_CAN_Error+0x28>
       case 0x6: return CRC_CAN_ERROR;
    20aa:	200a      	movs	r0, #10
    20ac:	e7f2      	b.n	2094 <Convert_To_CAN_Error+0x28>
       case 0x7: return UNUSED_CAN_ERROR;
    }
    if (can_error == 0x400) return UNRECOGNIZED_MSGOBJ_CAN_ERROR;
    if (can_error == 0x800) return RX_BUFFER_FULL_CAN_ERROR;
    20ae:	200f      	movs	r0, #15
    20b0:	e7f0      	b.n	2094 <Convert_To_CAN_Error+0x28>
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	00003254 	.word	0x00003254

000020b8 <CAN_IRQHandler>:
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
    20b8:	4b03      	ldr	r3, [pc, #12]	; (20c8 <CAN_IRQHandler+0x10>)
 * @brief	CCAN Interrupt Handler
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
    20ba:	b510      	push	{r4, lr}
	LPC_CCAN_API->isr();
    20bc:	681b      	ldr	r3, [r3, #0]
    20be:	689b      	ldr	r3, [r3, #8]
    20c0:	685b      	ldr	r3, [r3, #4]
    20c2:	4798      	blx	r3
}
    20c4:	bd10      	pop	{r4, pc}
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	1fff1ff8 	.word	0x1fff1ff8

000020cc <CAN_SetMask1>:
	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
    20cc:	231b      	movs	r3, #27

	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
    20ce:	b570      	push	{r4, r5, r6, lr}
	msg_obj.msgobj = 27;
    20d0:	4c0c      	ldr	r4, [pc, #48]	; (2104 <CAN_SetMask1+0x38>)
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    20d2:	4d0d      	ldr	r5, [pc, #52]	; (2108 <CAN_SetMask1+0x3c>)
	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
    20d4:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    20d6:	682b      	ldr	r3, [r5, #0]
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
	msg_obj.mode_id = mode_id;
    20d8:	6021      	str	r1, [r4, #0]
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    20da:	689b      	ldr	r3, [r3, #8]

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
    20dc:	6060      	str	r0, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    20de:	689b      	ldr	r3, [r3, #8]
    20e0:	0020      	movs	r0, r4
    20e2:	4798      	blx	r3
	msg_obj.msgobj = 28;
    20e4:	231c      	movs	r3, #28
    20e6:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    20e8:	682b      	ldr	r3, [r5, #0]
    20ea:	0020      	movs	r0, r4
    20ec:	689b      	ldr	r3, [r3, #8]
    20ee:	689b      	ldr	r3, [r3, #8]
    20f0:	4798      	blx	r3
	msg_obj.msgobj = 29;
    20f2:	231d      	movs	r3, #29
    20f4:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    20f6:	682b      	ldr	r3, [r5, #0]
    20f8:	0020      	movs	r0, r4
    20fa:	689b      	ldr	r3, [r3, #8]
    20fc:	689b      	ldr	r3, [r3, #8]
    20fe:	4798      	blx	r3
}
    2100:	bd70      	pop	{r4, r5, r6, pc}
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	10000a60 	.word	0x10000a60
    2108:	1fff1ff8 	.word	0x1fff1ff8

0000210c <CAN_SetMask2>:

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
    210c:	231e      	movs	r3, #30
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
	msg_obj.msgobj = 29;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
    210e:	b570      	push	{r4, r5, r6, lr}
	msg_obj.msgobj = 30;
    2110:	4c08      	ldr	r4, [pc, #32]	; (2134 <CAN_SetMask2+0x28>)
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    2112:	4d09      	ldr	r5, [pc, #36]	; (2138 <CAN_SetMask2+0x2c>)
	msg_obj.msgobj = 29;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
    2114:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    2116:	682b      	ldr	r3, [r5, #0]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
	msg_obj.mode_id = mode_id;
    2118:	6021      	str	r1, [r4, #0]
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    211a:	689b      	ldr	r3, [r3, #8]
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
    211c:	6060      	str	r0, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    211e:	689b      	ldr	r3, [r3, #8]
    2120:	0020      	movs	r0, r4
    2122:	4798      	blx	r3
	msg_obj.msgobj = 31;
    2124:	231f      	movs	r3, #31
    2126:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    2128:	682b      	ldr	r3, [r5, #0]
    212a:	0020      	movs	r0, r4
    212c:	689b      	ldr	r3, [r3, #8]
    212e:	689b      	ldr	r3, [r3, #8]
    2130:	4798      	blx	r3
}
    2132:	bd70      	pop	{r4, r5, r6, pc}
    2134:	10000a60 	.word	0x10000a60
    2138:	1fff1ff8 	.word	0x1fff1ff8

0000213c <CAN_Init>:
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
}

void CAN_Init(uint32_t baud_rate) {
    213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
    213e:	2400      	movs	r4, #0

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
    2140:	4d20      	ldr	r5, [pc, #128]	; (21c4 <CAN_Init+0x88>)
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
}

void CAN_Init(uint32_t baud_rate) {
    2142:	b08b      	sub	sp, #44	; 0x2c
    2144:	0006      	movs	r6, r0

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
    2146:	2310      	movs	r3, #16
    2148:	2218      	movs	r2, #24
    214a:	491f      	ldr	r1, [pc, #124]	; (21c8 <CAN_Init+0x8c>)
    214c:	0028      	movs	r0, r5
    214e:	f7ff fd21 	bl	1b94 <RingBuffer_Init>
    2152:	612c      	str	r4, [r5, #16]
    2154:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&rx_buffer);

	RingBuffer_Init(&tx_buffer, _tx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
    2156:	4d1d      	ldr	r5, [pc, #116]	; (21cc <CAN_Init+0x90>)
    2158:	491d      	ldr	r1, [pc, #116]	; (21d0 <CAN_Init+0x94>)
    215a:	2310      	movs	r3, #16
    215c:	2218      	movs	r2, #24
    215e:	0028      	movs	r0, r5
    2160:	f7ff fd18 	bl	1b94 <RingBuffer_Init>
    2164:	612c      	str	r4, [r5, #16]
    2166:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&tx_buffer);

	uint32_t CanApiClkInitTable[2];
	CCAN_CALLBACKS_T callbacks = {
    2168:	ad02      	add	r5, sp, #8
    216a:	002a      	movs	r2, r5
    216c:	4b19      	ldr	r3, [pc, #100]	; (21d4 <CAN_Init+0x98>)
    216e:	cb83      	ldmia	r3!, {r0, r1, r7}
    2170:	c283      	stmia	r2!, {r0, r1, r7}
    2172:	cb83      	ldmia	r3!, {r0, r1, r7}
    2174:	c283      	stmia	r2!, {r0, r1, r7}
    2176:	cb03      	ldmia	r3!, {r0, r1}
    2178:	c203      	stmia	r2!, {r0, r1}
		NULL,
		NULL,
		NULL,
		NULL,
	};
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
    217a:	0030      	movs	r0, r6

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
    217c:	4e16      	ldr	r6, [pc, #88]	; (21d8 <CAN_Init+0x9c>)
		NULL,
		NULL,
		NULL,
		NULL,
	};
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
    217e:	4669      	mov	r1, sp
    2180:	f7ff ff16 	bl	1fb0 <Baudrate_Calculate>

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
    2184:	6833      	ldr	r3, [r6, #0]
    2186:	2101      	movs	r1, #1
    2188:	689b      	ldr	r3, [r3, #8]
    218a:	4668      	mov	r0, sp
    218c:	681b      	ldr	r3, [r3, #0]
    218e:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
    2190:	6833      	ldr	r3, [r6, #0]
    2192:	0028      	movs	r0, r5
    2194:	689b      	ldr	r3, [r3, #8]
    2196:	69db      	ldr	r3, [r3, #28]
    2198:	4798      	blx	r3
    219a:	2280      	movs	r2, #128	; 0x80
    219c:	4b0f      	ldr	r3, [pc, #60]	; (21dc <CAN_Init+0xa0>)
    219e:	0192      	lsls	r2, r2, #6
    21a0:	601a      	str	r2, [r3, #0]
	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);

	/* Configure message objects to accept all messages */
	CAN_SetMask1(0, 0);
    21a2:	2100      	movs	r1, #0
    21a4:	2000      	movs	r0, #0
    21a6:	f7ff ff91 	bl	20cc <CAN_SetMask1>
	CAN_SetMask2(0, 0);
    21aa:	2100      	movs	r1, #0
    21ac:	2000      	movs	r0, #0
    21ae:	f7ff ffad 	bl	210c <CAN_SetMask2>

	can_error_flag = false;
    21b2:	4b0b      	ldr	r3, [pc, #44]	; (21e0 <CAN_Init+0xa4>)
    21b4:	701c      	strb	r4, [r3, #0]
	can_error_info = 0;
    21b6:	4b0b      	ldr	r3, [pc, #44]	; (21e4 <CAN_Init+0xa8>)
    21b8:	601c      	str	r4, [r3, #0]

	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
    21ba:	4b0b      	ldr	r3, [pc, #44]	; (21e8 <CAN_Init+0xac>)
    21bc:	801c      	strh	r4, [r3, #0]
}
    21be:	b00b      	add	sp, #44	; 0x2c
    21c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	100006f8 	.word	0x100006f8
    21c8:	100008c8 	.word	0x100008c8
    21cc:	100006e4 	.word	0x100006e4
    21d0:	10000748 	.word	0x10000748
    21d4:	00003270 	.word	0x00003270
    21d8:	1fff1ff8 	.word	0x1fff1ff8
    21dc:	e000e100 	.word	0xe000e100
    21e0:	10000713 	.word	0x10000713
    21e4:	1000070c 	.word	0x1000070c
    21e8:	10000710 	.word	0x10000710

000021ec <CAN_Receive>:
	msg_obj.msgobj = 31;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
    21ec:	4b09      	ldr	r3, [pc, #36]	; (2214 <CAN_Receive+0x28>)
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
	msg_obj.msgobj = 31;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
    21ee:	b510      	push	{r4, lr}
	if (can_error_flag) {
    21f0:	781a      	ldrb	r2, [r3, #0]
    21f2:	2a00      	cmp	r2, #0
    21f4:	d006      	beq.n	2204 <CAN_Receive+0x18>
		can_error_flag = false;
    21f6:	2200      	movs	r2, #0
    21f8:	701a      	strb	r2, [r3, #0]
		return Convert_To_CAN_Error(can_error_info);
    21fa:	4b07      	ldr	r3, [pc, #28]	; (2218 <CAN_Receive+0x2c>)
    21fc:	6818      	ldr	r0, [r3, #0]
    21fe:	f7ff ff35 	bl	206c <Convert_To_CAN_Error>
	} else if (RingBuffer_Pop(&rx_buffer, user_buffer)) {
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}
    2202:	bd10      	pop	{r4, pc}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
	} else if (RingBuffer_Pop(&rx_buffer, user_buffer)) {
    2204:	0001      	movs	r1, r0
    2206:	4805      	ldr	r0, [pc, #20]	; (221c <CAN_Receive+0x30>)
    2208:	f7ff fd30 	bl	1c6c <RingBuffer_Pop>
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
    220c:	4243      	negs	r3, r0
    220e:	4158      	adcs	r0, r3
    2210:	b2c0      	uxtb	r0, r0
    2212:	e7f6      	b.n	2202 <CAN_Receive+0x16>
    2214:	10000713 	.word	0x10000713
    2218:	1000070c 	.word	0x1000070c
    221c:	100006f8 	.word	0x100006f8

00002220 <CAN_TransmitMsgObj>:
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
	if (can_error_flag) {
    2220:	4b16      	ldr	r3, [pc, #88]	; (227c <CAN_TransmitMsgObj+0x5c>)
		tmp_msg_obj.data[i] = data[i];
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
    2222:	b570      	push	{r4, r5, r6, lr}
	if (can_error_flag) {
    2224:	781a      	ldrb	r2, [r3, #0]
    2226:	2a00      	cmp	r2, #0
    2228:	d111      	bne.n	224e <CAN_TransmitMsgObj+0x2e>
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    222a:	4c15      	ldr	r4, [pc, #84]	; (2280 <CAN_TransmitMsgObj+0x60>)
    222c:	7863      	ldrb	r3, [r4, #1]
    222e:	2b00      	cmp	r3, #0
    2230:	d014      	beq.n	225c <CAN_TransmitMsgObj+0x3c>
    2232:	78a3      	ldrb	r3, [r4, #2]
    2234:	2b00      	cmp	r3, #0
    2236:	d01d      	beq.n	2274 <CAN_TransmitMsgObj+0x54>
				break;
			}
		}

		if (!sent) { // Everything is busy, so put in ring buffer
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
    2238:	0001      	movs	r1, r0
    223a:	4812      	ldr	r0, [pc, #72]	; (2284 <CAN_TransmitMsgObj+0x64>)
    223c:	f7ff fcb2 	bl	1ba4 <RingBuffer_Insert>
    2240:	0003      	movs	r3, r0
				return TX_BUFFER_FULL_CAN_ERROR;
			}
		}

	    return NO_CAN_ERROR;
    2242:	425a      	negs	r2, r3
    2244:	4153      	adcs	r3, r2
			}
		}

		if (!sent) { // Everything is busy, so put in ring buffer
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
				return TX_BUFFER_FULL_CAN_ERROR;
    2246:	200e      	movs	r0, #14
			}
		}

	    return NO_CAN_ERROR;
    2248:	425b      	negs	r3, r3
    224a:	4018      	ands	r0, r3
	}
}
    224c:	bd70      	pop	{r4, r5, r6, pc}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
	if (can_error_flag) {
		can_error_flag = false;
    224e:	2200      	movs	r2, #0
    2250:	701a      	strb	r2, [r3, #0]
		return Convert_To_CAN_Error(can_error_info);
    2252:	4b0d      	ldr	r3, [pc, #52]	; (2288 <CAN_TransmitMsgObj+0x68>)
    2254:	6818      	ldr	r0, [r3, #0]
    2256:	f7ff ff09 	bl	206c <Convert_To_CAN_Error>
    225a:	e7f7      	b.n	224c <CAN_TransmitMsgObj+0x2c>
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    225c:	2501      	movs	r5, #1
    225e:	2301      	movs	r3, #1
				// Send with this message object
				msg_obj->msgobj = i;
    2260:	7443      	strb	r3, [r0, #17]
				LPC_CCAN_API->can_transmit(msg_obj);
    2262:	4b0a      	ldr	r3, [pc, #40]	; (228c <CAN_TransmitMsgObj+0x6c>)
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	689b      	ldr	r3, [r3, #8]
    2268:	691b      	ldr	r3, [r3, #16]
    226a:	4798      	blx	r3
				msg_obj_stat[i] = true;
    226c:	2301      	movs	r3, #1
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
				return TX_BUFFER_FULL_CAN_ERROR;
			}
		}

	    return NO_CAN_ERROR;
    226e:	2000      	movs	r0, #0
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
				// Send with this message object
				msg_obj->msgobj = i;
				LPC_CCAN_API->can_transmit(msg_obj);
				msg_obj_stat[i] = true;
    2270:	5563      	strb	r3, [r4, r5]
    2272:	e7eb      	b.n	224c <CAN_TransmitMsgObj+0x2c>
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    2274:	2502      	movs	r5, #2
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
    2276:	3302      	adds	r3, #2
    2278:	e7f2      	b.n	2260 <CAN_TransmitMsgObj+0x40>
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	10000713 	.word	0x10000713
    2280:	10000710 	.word	0x10000710
    2284:	100006e4 	.word	0x100006e4
    2288:	1000070c 	.word	0x1000070c
    228c:	1fff1ff8 	.word	0x1fff1ff8

00002290 <CAN_Transmit>:
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
    2290:	0003      	movs	r3, r0
	tmp_msg_obj.mode_id = msg_id;
    2292:	4808      	ldr	r0, [pc, #32]	; (22b4 <CAN_Transmit+0x24>)
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
    2294:	b570      	push	{r4, r5, r6, lr}
	tmp_msg_obj.mode_id = msg_id;
    2296:	6003      	str	r3, [r0, #0]
	tmp_msg_obj.dlc = data_len;
    2298:	7402      	strb	r2, [r0, #16]
	uint8_t i;
	for (i = 0; i < tmp_msg_obj.dlc; i++) {	
    229a:	2300      	movs	r3, #0
    229c:	2a00      	cmp	r2, #0
    229e:	d006      	beq.n	22ae <CAN_Transmit+0x1e>
		tmp_msg_obj.data[i] = data[i];
    22a0:	5ccd      	ldrb	r5, [r1, r3]
    22a2:	18c4      	adds	r4, r0, r3
    22a4:	3301      	adds	r3, #1
    22a6:	7225      	strb	r5, [r4, #8]

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
	tmp_msg_obj.mode_id = msg_id;
	tmp_msg_obj.dlc = data_len;
	uint8_t i;
	for (i = 0; i < tmp_msg_obj.dlc; i++) {	
    22a8:	b2dc      	uxtb	r4, r3
    22aa:	42a2      	cmp	r2, r4
    22ac:	d8f8      	bhi.n	22a0 <CAN_Transmit+0x10>
		tmp_msg_obj.data[i] = data[i];
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
    22ae:	f7ff ffb7 	bl	2220 <CAN_TransmitMsgObj>
}
    22b2:	bd70      	pop	{r4, r5, r6, pc}
    22b4:	10000730 	.word	0x10000730

000022b8 <Can_RawRead>:
  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err =  (Can_ErrorID_T) CAN_Transmit(can_out_id, frame->data, can_out_bytes);
  return err;
}

Can_ErrorID_T Can_RawRead(Frame *frame) {
    22b8:	b510      	push	{r4, lr}
    22ba:	b086      	sub	sp, #24
    22bc:	0004      	movs	r4, r0
  CCAN_MSG_OBJ_T rx_msg;

  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err = (Can_ErrorID_T) CAN_Receive(&rx_msg);
    22be:	4668      	mov	r0, sp
    22c0:	f7ff ff94 	bl	21ec <CAN_Receive>

  if (err == Can_Error_NONE) {
    22c4:	2800      	cmp	r0, #0
    22c6:	d111      	bne.n	22ec <Can_RawRead+0x34>
    frame->id = rx_msg.mode_id;
    22c8:	9b00      	ldr	r3, [sp, #0]
    22ca:	6023      	str	r3, [r4, #0]
    frame->len = rx_msg.dlc;
    22cc:	466b      	mov	r3, sp
    22ce:	7c19      	ldrb	r1, [r3, #16]
    22d0:	7121      	strb	r1, [r4, #4]

    uint8_t i;
    for (i = 0; i < frame->len; i++) {
    22d2:	2900      	cmp	r1, #0
    22d4:	d00a      	beq.n	22ec <Can_RawRead+0x34>
    22d6:	3901      	subs	r1, #1
    22d8:	b2c9      	uxtb	r1, r1
    22da:	3101      	adds	r1, #1
    22dc:	1d62      	adds	r2, r4, #5
    22de:	1859      	adds	r1, r3, r1
      frame->data[i] = rx_msg.data[i];
    22e0:	7a1c      	ldrb	r4, [r3, #8]
    22e2:	3301      	adds	r3, #1
    22e4:	7014      	strb	r4, [r2, #0]
    22e6:	3201      	adds	r2, #1
  if (err == Can_Error_NONE) {
    frame->id = rx_msg.mode_id;
    frame->len = rx_msg.dlc;

    uint8_t i;
    for (i = 0; i < frame->len; i++) {
    22e8:	428b      	cmp	r3, r1
    22ea:	d1f9      	bne.n	22e0 <Can_RawRead+0x28>
      frame->data[i] = rx_msg.data[i];
    }
  }
  return err;
}
    22ec:	b006      	add	sp, #24
    22ee:	bd10      	pop	{r4, pc}

000022f0 <Can_Unknown_Read>:
  // Define nothing so that there is a linker error!
#endif

// TODO this is a bit of a hack...unknown reads should follow same as regular reads
// and use of Can_RawRead must be banned.
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
    22f0:	b530      	push	{r4, r5, lr}
  if (lastError == Can_Error_NONE) {
    22f2:	4d0b      	ldr	r5, [pc, #44]	; (2320 <Can_Unknown_Read+0x30>)
  // Define nothing so that there is a linker error!
#endif

// TODO this is a bit of a hack...unknown reads should follow same as regular reads
// and use of Can_RawRead must be banned.
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
    22f4:	0004      	movs	r4, r0
  if (lastError == Can_Error_NONE) {
    22f6:	7828      	ldrb	r0, [r5, #0]
    22f8:	2800      	cmp	r0, #0
    22fa:	d10f      	bne.n	231c <Can_Unknown_Read+0x2c>
    frame->id = lastMessage.id;
    22fc:	4a09      	ldr	r2, [pc, #36]	; (2324 <Can_Unknown_Read+0x34>)
    22fe:	6813      	ldr	r3, [r2, #0]
    2300:	6023      	str	r3, [r4, #0]
    frame->len = lastMessage.len;
    2302:	7913      	ldrb	r3, [r2, #4]
    2304:	3205      	adds	r2, #5
    2306:	7123      	strb	r3, [r4, #4]
    2308:	1d63      	adds	r3, r4, #5
    230a:	340d      	adds	r4, #13
    uint8_t i;
    for (i = 0; i < 8; i++) {
      frame->data[i] = lastMessage.data[i];
    230c:	7811      	ldrb	r1, [r2, #0]
    230e:	3201      	adds	r2, #1
    2310:	7019      	strb	r1, [r3, #0]
    2312:	3301      	adds	r3, #1
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
  if (lastError == Can_Error_NONE) {
    frame->id = lastMessage.id;
    frame->len = lastMessage.len;
    uint8_t i;
    for (i = 0; i < 8; i++) {
    2314:	42a3      	cmp	r3, r4
    2316:	d1f9      	bne.n	230c <Can_Unknown_Read+0x1c>
      frame->data[i] = lastMessage.data[i];
    }
    lastError = Can_Error_NO_RX;
    2318:	2301      	movs	r3, #1
    231a:	702b      	strb	r3, [r5, #0]
    return Can_Error_NONE;
  } else {
    return lastError;
  }
}
    231c:	bd30      	pop	{r4, r5, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	10000100 	.word	0x10000100
    2324:	10000714 	.word	0x10000714

00002328 <Can_Error_Read>:

Can_ErrorID_T Can_Error_Read(void) {
  Can_ErrorID_T cachedError = lastError;
  lastError = Can_Error_NO_RX;
    2328:	2201      	movs	r2, #1
    return lastError;
  }
}

Can_ErrorID_T Can_Error_Read(void) {
  Can_ErrorID_T cachedError = lastError;
    232a:	4b02      	ldr	r3, [pc, #8]	; (2334 <Can_Error_Read+0xc>)
    232c:	7818      	ldrb	r0, [r3, #0]
  lastError = Can_Error_NO_RX;
    232e:	701a      	strb	r2, [r3, #0]
  return cachedError;
}
    2330:	4770      	bx	lr
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	10000100 	.word	0x10000100

00002338 <Can0_Csb_Init>:
void Can0_Bms_Init(uint32_t baudrate) {
  Can_Init(baudrate);
  Can_SetFilter(0b0, 0);
}

void Can0_Csb_Init(uint32_t baudrate) {
    2338:	b510      	push	{r4, lr}
void Can_Init(uint32_t baudrate) {
  CAN_Init(baudrate);
}

void Can_SetFilter(uint32_t mask, uint32_t match_id) {
  CAN_SetMask1(mask, match_id);
    233a:	4c06      	ldr	r4, [pc, #24]	; (2354 <Can0_Csb_Init+0x1c>)
#include "chip.h"
#include "can.h"
#include "ccand_11xx.h"

void Can_Init(uint32_t baudrate) {
  CAN_Init(baudrate);
    233c:	f7ff fefe 	bl	213c <CAN_Init>
}

void Can_SetFilter(uint32_t mask, uint32_t match_id) {
  CAN_SetMask1(mask, match_id);
    2340:	0020      	movs	r0, r4
    2342:	2100      	movs	r1, #0
    2344:	f7ff fec2 	bl	20cc <CAN_SetMask1>
  CAN_SetMask2(mask, match_id);
    2348:	2100      	movs	r1, #0
    234a:	0020      	movs	r0, r4
    234c:	f7ff fede 	bl	210c <CAN_SetMask2>
  Can_Init(baudrate);
  Can_SetFilter(0b11111111111111111100000000000, 0);
}
    2350:	bd10      	pop	{r4, pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	1ffff800 	.word	0x1ffff800

00002358 <Can_MsgType>:

Can_MsgID_T Can_MsgType(void) {
    2358:	b510      	push	{r4, lr}
  lastError = Can_RawRead(&lastMessage);
    235a:	4c31      	ldr	r4, [pc, #196]	; (2420 <Can_MsgType+0xc8>)
    235c:	0020      	movs	r0, r4
    235e:	f7ff ffab 	bl	22b8 <Can_RawRead>
    2362:	4a30      	ldr	r2, [pc, #192]	; (2424 <Can_MsgType+0xcc>)
    2364:	0003      	movs	r3, r0
    2366:	7010      	strb	r0, [r2, #0]
  if (lastError == Can_Error_NO_RX) {
    2368:	2801      	cmp	r0, #1
    236a:	d025      	beq.n	23b8 <Can_MsgType+0x60>
    return Can_No_Msg;
  } else if (lastError != Can_Error_NONE) {
    return Can_Error_Msg;
    236c:	2002      	movs	r0, #2

Can_MsgID_T Can_MsgType(void) {
  lastError = Can_RawRead(&lastMessage);
  if (lastError == Can_Error_NO_RX) {
    return Can_No_Msg;
  } else if (lastError != Can_Error_NONE) {
    236e:	2b00      	cmp	r3, #0
    2370:	d000      	beq.n	2374 <Can_MsgType+0x1c>
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    default:
      return Can_Unknown_Msg;
   }
}
    2372:	bd10      	pop	{r4, pc}
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2374:	6823      	ldr	r3, [r4, #0]
    2376:	2bf2      	cmp	r3, #242	; 0xf2
    2378:	d050      	beq.n	241c <Can_MsgType+0xc4>
    237a:	d910      	bls.n	239e <Can_MsgType+0x46>
    237c:	4a2a      	ldr	r2, [pc, #168]	; (2428 <Can_MsgType+0xd0>)
    237e:	4293      	cmp	r3, r2
    2380:	d044      	beq.n	240c <Can_MsgType+0xb4>
    2382:	d825      	bhi.n	23d0 <Can_MsgType+0x78>
    2384:	2bf4      	cmp	r3, #244	; 0xf4
    2386:	d032      	beq.n	23ee <Can_MsgType+0x96>
    2388:	d344      	bcc.n	2414 <Can_MsgType+0xbc>
    238a:	4a28      	ldr	r2, [pc, #160]	; (242c <Can_MsgType+0xd4>)
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    238c:	2004      	movs	r0, #4
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    238e:	4293      	cmp	r3, r2
    2390:	d0ef      	beq.n	2372 <Can_MsgType+0x1a>
    2392:	4a27      	ldr	r2, [pc, #156]	; (2430 <Can_MsgType+0xd8>)
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    2394:	3001      	adds	r0, #1
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2396:	4293      	cmp	r3, r2
    2398:	d0eb      	beq.n	2372 <Can_MsgType+0x1a>
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    default:
      return Can_Unknown_Msg;
    239a:	2001      	movs	r0, #1
    239c:	e7e9      	b.n	2372 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    239e:	2bd3      	cmp	r3, #211	; 0xd3
    23a0:	d03a      	beq.n	2418 <Can_MsgType+0xc0>
    23a2:	d80b      	bhi.n	23bc <Can_MsgType+0x64>
    23a4:	2bd0      	cmp	r3, #208	; 0xd0
    23a6:	d026      	beq.n	23f6 <Can_MsgType+0x9e>
    23a8:	d92c      	bls.n	2404 <Can_MsgType+0xac>
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    23aa:	2009      	movs	r0, #9
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23ac:	2bd1      	cmp	r3, #209	; 0xd1
    23ae:	d0e0      	beq.n	2372 <Can_MsgType+0x1a>
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    23b0:	3003      	adds	r0, #3
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23b2:	2bd2      	cmp	r3, #210	; 0xd2
    23b4:	d0dd      	beq.n	2372 <Can_MsgType+0x1a>
    23b6:	e7f0      	b.n	239a <Can_MsgType+0x42>
}

Can_MsgID_T Can_MsgType(void) {
  lastError = Can_RawRead(&lastMessage);
  if (lastError == Can_Error_NO_RX) {
    return Can_No_Msg;
    23b8:	2000      	movs	r0, #0
    23ba:	e7da      	b.n	2372 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23bc:	2bd5      	cmp	r3, #213	; 0xd5
    23be:	d018      	beq.n	23f2 <Can_MsgType+0x9a>
    23c0:	d326      	bcc.n	2410 <Can_MsgType+0xb8>
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    23c2:	200a      	movs	r0, #10
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23c4:	2bf0      	cmp	r3, #240	; 0xf0
    23c6:	d0d4      	beq.n	2372 <Can_MsgType+0x1a>
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    23c8:	3004      	adds	r0, #4
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23ca:	2bf1      	cmp	r3, #241	; 0xf1
    23cc:	d0d1      	beq.n	2372 <Can_MsgType+0x1a>
    23ce:	e7e4      	b.n	239a <Can_MsgType+0x42>
    23d0:	4a18      	ldr	r2, [pc, #96]	; (2434 <Can_MsgType+0xdc>)
    23d2:	4293      	cmp	r3, r2
    23d4:	d009      	beq.n	23ea <Can_MsgType+0x92>
    23d6:	d910      	bls.n	23fa <Can_MsgType+0xa2>
    23d8:	4a17      	ldr	r2, [pc, #92]	; (2438 <Can_MsgType+0xe0>)
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    23da:	2011      	movs	r0, #17
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23dc:	4293      	cmp	r3, r2
    23de:	d0c8      	beq.n	2372 <Can_MsgType+0x1a>
    23e0:	4a16      	ldr	r2, [pc, #88]	; (243c <Can_MsgType+0xe4>)
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    23e2:	380b      	subs	r0, #11
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23e4:	4293      	cmp	r3, r2
    23e6:	d0c4      	beq.n	2372 <Can_MsgType+0x1a>
    23e8:	e7d7      	b.n	239a <Can_MsgType+0x42>
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    23ea:	2008      	movs	r0, #8
    23ec:	e7c1      	b.n	2372 <Can_MsgType+0x1a>
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    23ee:	2014      	movs	r0, #20
    23f0:	e7bf      	b.n	2372 <Can_MsgType+0x1a>
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    23f2:	2012      	movs	r0, #18
    23f4:	e7bd      	b.n	2372 <Can_MsgType+0x1a>
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    23f6:	200d      	movs	r0, #13
    23f8:	e7bb      	b.n	2372 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23fa:	3a01      	subs	r2, #1
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    23fc:	2003      	movs	r0, #3
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    23fe:	4293      	cmp	r3, r2
    2400:	d0b7      	beq.n	2372 <Can_MsgType+0x1a>
    2402:	e7ca      	b.n	239a <Can_MsgType+0x42>
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    2404:	3009      	adds	r0, #9
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2406:	2bc0      	cmp	r3, #192	; 0xc0
    2408:	d0b3      	beq.n	2372 <Can_MsgType+0x1a>
    240a:	e7c6      	b.n	239a <Can_MsgType+0x42>
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    240c:	2007      	movs	r0, #7
    240e:	e7b0      	b.n	2372 <Can_MsgType+0x1a>
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    2410:	2013      	movs	r0, #19
    2412:	e7ae      	b.n	2372 <Can_MsgType+0x1a>
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    2414:	2010      	movs	r0, #16
    2416:	e7ac      	b.n	2372 <Can_MsgType+0x1a>
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    2418:	2015      	movs	r0, #21
    241a:	e7aa      	b.n	2372 <Can_MsgType+0x1a>
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    241c:	200f      	movs	r0, #15
    241e:	e7a8      	b.n	2372 <Can_MsgType+0x1a>
    2420:	10000714 	.word	0x10000714
    2424:	10000100 	.word	0x10000100
    2428:	00000526 	.word	0x00000526
    242c:	00000521 	.word	0x00000521
    2430:	00000522 	.word	0x00000522
    2434:	00000601 	.word	0x00000601
    2438:	1806e5f4 	.word	0x1806e5f4
    243c:	18ff50e5 	.word	0x18ff50e5

00002440 <Can_ElconHeartbeat_FromCan>:
  can_out->id = ELCONHEARTBEAT__id;
  can_out->len = 5;
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
    2440:	2200      	movs	r2, #0
    2442:	2300      	movs	r3, #0
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONHEARTBEAT__id;
  can_out->len = 5;
}

FROM_CAN(Can_ElconHeartbeat) {
    2444:	b530      	push	{r4, r5, lr}
    2446:	b083      	sub	sp, #12
  uint64_t bitstring = 0;
    2448:	9200      	str	r2, [sp, #0]
    244a:	9301      	str	r3, [sp, #4]
    244c:	466a      	mov	r2, sp
    244e:	1d43      	adds	r3, r0, #5
    2450:	3207      	adds	r2, #7
    2452:	300d      	adds	r0, #13
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2454:	781c      	ldrb	r4, [r3, #0]
    2456:	3301      	adds	r3, #1
    2458:	7014      	strb	r4, [r2, #0]
    245a:	3a01      	subs	r2, #1
  uint64_t bitstring;
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    245c:	4283      	cmp	r3, r0
    245e:	d1f9      	bne.n	2454 <Can_ElconHeartbeat_FromCan+0x14>
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
    2460:	9a01      	ldr	r2, [sp, #4]
    2462:	9b00      	ldr	r3, [sp, #0]
    2464:	0110      	lsls	r0, r2, #4
    2466:	0f1c      	lsrs	r4, r3, #28
    2468:	4304      	orrs	r4, r0
    246a:	2001      	movs	r0, #1
    246c:	4004      	ands	r4, r0
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
    246e:	0095      	lsls	r5, r2, #2
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
    2470:	700c      	strb	r4, [r1, #0]
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
    2472:	0f9c      	lsrs	r4, r3, #30
    2474:	432c      	orrs	r4, r5
    2476:	4004      	ands	r4, r0
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    2478:	00d5      	lsls	r5, r2, #3

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
    247a:	704c      	strb	r4, [r1, #1]
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    247c:	0f5c      	lsrs	r4, r3, #29
    247e:	432c      	orrs	r4, r5
    2480:	4004      	ands	r4, r0
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
    2482:	0155      	lsls	r5, r2, #5
FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    2484:	708c      	strb	r4, [r1, #2]
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
    2486:	0edc      	lsrs	r4, r3, #27
    2488:	432c      	orrs	r4, r5
    248a:	4004      	ands	r4, r0
    248c:	70cc      	strb	r4, [r1, #3]
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
  type_out->output_current = EXTRACT(bitstring, 16, 16);
    248e:	80ca      	strh	r2, [r1, #6]
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
    2490:	0c14      	lsrs	r4, r2, #16
  type_out->output_current = EXTRACT(bitstring, 16, 16);
  type_out->has_hardware_failure = EXTRACT(bitstring, 32, 1);
    2492:	0fdb      	lsrs	r3, r3, #31
    2494:	0052      	lsls	r2, r2, #1
    2496:	4313      	orrs	r3, r2
    2498:	4003      	ands	r3, r0
  to_bitstring(can_in->data, &bitstring);
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
    249a:	808c      	strh	r4, [r1, #4]
  type_out->output_current = EXTRACT(bitstring, 16, 16);
  type_out->has_hardware_failure = EXTRACT(bitstring, 32, 1);
    249c:	720b      	strb	r3, [r1, #8]
}
    249e:	b003      	add	sp, #12
    24a0:	bd30      	pop	{r4, r5, pc}
    24a2:	46c0      	nop			; (mov r8, r8)

000024a4 <Can_BmsPackStatus_FromCan>:
  can_out->id = BMSPACKSTATUS__id;
  can_out->len = 7;
}

FROM_CAN(Can_BmsPackStatus) {
  uint64_t bitstring = 0;
    24a4:	2200      	movs	r2, #0
    24a6:	2300      	movs	r3, #0
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMSPACKSTATUS__id;
  can_out->len = 7;
}

FROM_CAN(Can_BmsPackStatus) {
    24a8:	b510      	push	{r4, lr}
    24aa:	b082      	sub	sp, #8
  uint64_t bitstring = 0;
    24ac:	9200      	str	r2, [sp, #0]
    24ae:	9301      	str	r3, [sp, #4]
    24b0:	466a      	mov	r2, sp
    24b2:	1d43      	adds	r3, r0, #5
    24b4:	3207      	adds	r2, #7
    24b6:	300d      	adds	r0, #13
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    24b8:	781c      	ldrb	r4, [r3, #0]
    24ba:	3301      	adds	r3, #1
    24bc:	7014      	strb	r4, [r2, #0]
    24be:	3a01      	subs	r2, #1
  uint64_t bitstring;
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    24c0:	4283      	cmp	r3, r0
    24c2:	d1f9      	bne.n	24b8 <Can_BmsPackStatus_FromCan+0x14>
}

FROM_CAN(Can_BmsPackStatus) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
    24c4:	207f      	movs	r0, #127	; 0x7f
    24c6:	0004      	movs	r4, r0
    24c8:	9b00      	ldr	r3, [sp, #0]
    24ca:	9a01      	ldr	r2, [sp, #4]
    24cc:	401c      	ands	r4, r3
    24ce:	700c      	strb	r4, [r1, #0]
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
    24d0:	0dd4      	lsrs	r4, r2, #23
    24d2:	804c      	strh	r4, [r1, #2]
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
    24d4:	0c5c      	lsrs	r4, r3, #17
    24d6:	4020      	ands	r0, r4
    24d8:	7108      	strb	r0, [r1, #4]
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
    24da:	03d8      	lsls	r0, r3, #15
    24dc:	0d80      	lsrs	r0, r0, #22
    24de:	80c8      	strh	r0, [r1, #6]
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
    24e0:	0250      	lsls	r0, r2, #9
    24e2:	1540      	asrs	r0, r0, #21
    24e4:	8108      	strh	r0, [r1, #8]
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    24e6:	0e1b      	lsrs	r3, r3, #24
    24e8:	0210      	lsls	r0, r2, #8
    24ea:	4303      	orrs	r3, r0
    24ec:	059b      	lsls	r3, r3, #22
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
    24ee:	0512      	lsls	r2, r2, #20
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    24f0:	0d9b      	lsrs	r3, r3, #22
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
    24f2:	0fd2      	lsrs	r2, r2, #31
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    24f4:	814b      	strh	r3, [r1, #10]
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
    24f6:	730a      	strb	r2, [r1, #12]
}
    24f8:	b002      	add	sp, #8
    24fa:	bd10      	pop	{r4, pc}

000024fc <Can_BMS_CSB_Switch_Write>:
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->state = EXTRACT(bitstring, 0, 1);
}

DEFINE(Can_BMS_CSB_Switch)
    24fc:	b500      	push	{lr}
    24fe:	b085      	sub	sp, #20
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    2500:	2200      	movs	r2, #0
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2502:	4669      	mov	r1, sp
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    2504:	7803      	ldrb	r3, [r0, #0]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2506:	4668      	mov	r0, sp
    2508:	730a      	strb	r2, [r1, #12]
    250a:	72ca      	strb	r2, [r1, #11]
    250c:	728a      	strb	r2, [r1, #10]
    250e:	2100      	movs	r1, #0
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    2510:	07db      	lsls	r3, r3, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2512:	7203      	strb	r3, [r0, #8]
    2514:	0e1b      	lsrs	r3, r3, #24
    2516:	7241      	strb	r1, [r0, #9]
    2518:	71c2      	strb	r2, [r0, #7]
    251a:	4669      	mov	r1, sp
    251c:	7182      	strb	r2, [r0, #6]
    251e:	7143      	strb	r3, [r0, #5]
TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
  can_out->len = 1;
    2520:	2301      	movs	r3, #1

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
    2522:	20c0      	movs	r0, #192	; 0xc0
  can_out->len = 1;
    2524:	710b      	strb	r3, [r1, #4]

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
    2526:	00c0      	lsls	r0, r0, #3
Can_ErrorID_T Can_RawWrite(Frame *frame) {
  const uint32_t can_out_id = (uint32_t) (frame->id);
  const uint8_t can_out_bytes = frame->len;

  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err =  (Can_ErrorID_T) CAN_Transmit(can_out_id, frame->data, can_out_bytes);
    2528:	2201      	movs	r2, #1
    252a:	3105      	adds	r1, #5
    252c:	9000      	str	r0, [sp, #0]
    252e:	f7ff feaf 	bl	2290 <CAN_Transmit>
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->state = EXTRACT(bitstring, 0, 1);
}

DEFINE(Can_BMS_CSB_Switch)
    2532:	b005      	add	sp, #20
    2534:	bd00      	pop	{pc}
    2536:	46c0      	nop			; (mov r8, r8)

00002538 <Can_ElconHeartbeat_Read>:
DEFINE(Can_CurrentSensor_Current)
DEFINE(Can_CurrentSensor_Voltage)
DEFINE(Can_ElconHeartbeat)
    2538:	b570      	push	{r4, r5, r6, lr}
    253a:	4d06      	ldr	r5, [pc, #24]	; (2554 <Can_ElconHeartbeat_Read+0x1c>)
    253c:	782c      	ldrb	r4, [r5, #0]
    253e:	2c00      	cmp	r4, #0
    2540:	d105      	bne.n	254e <Can_ElconHeartbeat_Read+0x16>
    2542:	0001      	movs	r1, r0
    2544:	4804      	ldr	r0, [pc, #16]	; (2558 <Can_ElconHeartbeat_Read+0x20>)
    2546:	f7ff ff7b 	bl	2440 <Can_ElconHeartbeat_FromCan>
    254a:	2301      	movs	r3, #1
    254c:	702b      	strb	r3, [r5, #0]
    254e:	0020      	movs	r0, r4
    2550:	bd70      	pop	{r4, r5, r6, pc}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	10000100 	.word	0x10000100
    2558:	10000714 	.word	0x10000714

0000255c <Can_BMS_Mode_Write>:
DEFINE(Can_CurrentSensor_Power)
DEFINE(Can_BMS_Mode)
    255c:	b500      	push	{lr}
    255e:	b085      	sub	sp, #20
  type_out->power = EXTRACT(bitstring, 16, 32);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    2560:	2200      	movs	r2, #0
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2562:	4669      	mov	r1, sp
  type_out->power = EXTRACT(bitstring, 16, 32);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    2564:	7803      	ldrb	r3, [r0, #0]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2566:	4668      	mov	r0, sp
    2568:	730a      	strb	r2, [r1, #12]
    256a:	72ca      	strb	r2, [r1, #11]
    256c:	728a      	strb	r2, [r1, #10]
    256e:	2100      	movs	r1, #0
  type_out->power = EXTRACT(bitstring, 16, 32);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    2570:	07db      	lsls	r3, r3, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2572:	7203      	strb	r3, [r0, #8]
    2574:	0e1b      	lsrs	r3, r3, #24
    2576:	7241      	strb	r1, [r0, #9]
    2578:	7143      	strb	r3, [r0, #5]
    257a:	4669      	mov	r1, sp
TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
  can_out->len = 1;
    257c:	2301      	movs	r3, #1
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    257e:	71c2      	strb	r2, [r0, #7]
    2580:	7182      	strb	r2, [r0, #6]

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
    2582:	4804      	ldr	r0, [pc, #16]	; (2594 <Can_BMS_Mode_Write+0x38>)
  can_out->len = 1;
    2584:	710b      	strb	r3, [r1, #4]
    2586:	2201      	movs	r2, #1
    2588:	3105      	adds	r1, #5

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
    258a:	9000      	str	r0, [sp, #0]
    258c:	f7ff fe80 	bl	2290 <CAN_Transmit>
DEFINE(Can_BMS_CSB_Switch)
DEFINE(Can_CurrentSensor_Current)
DEFINE(Can_CurrentSensor_Voltage)
DEFINE(Can_ElconHeartbeat)
DEFINE(Can_CurrentSensor_Power)
DEFINE(Can_BMS_Mode)
    2590:	b005      	add	sp, #20
    2592:	bd00      	pop	{pc}
    2594:	00000601 	.word	0x00000601

00002598 <Can_BmsPackStatus_Read>:
DEFINE(Can_FrontCanNodeWheelSpeed)
DEFINE(Can_MC_Command)
DEFINE(Can_Dash_Request)
DEFINE(Can_FrontCanNodeOutput)
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
    2598:	b570      	push	{r4, r5, r6, lr}
    259a:	4d06      	ldr	r5, [pc, #24]	; (25b4 <Can_BmsPackStatus_Read+0x1c>)
    259c:	782c      	ldrb	r4, [r5, #0]
    259e:	2c00      	cmp	r4, #0
    25a0:	d105      	bne.n	25ae <Can_BmsPackStatus_Read+0x16>
    25a2:	0001      	movs	r1, r0
    25a4:	4804      	ldr	r0, [pc, #16]	; (25b8 <Can_BmsPackStatus_Read+0x20>)
    25a6:	f7ff ff7d 	bl	24a4 <Can_BmsPackStatus_FromCan>
    25aa:	2301      	movs	r3, #1
    25ac:	702b      	strb	r3, [r5, #0]
    25ae:	0020      	movs	r0, r4
    25b0:	bd70      	pop	{r4, r5, r6, pc}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	10000100 	.word	0x10000100
    25b8:	10000714 	.word	0x10000714

000025bc <Can_ElconCommand_Write>:
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconCommand)
    25bc:	b500      	push	{lr}

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    25be:	8883      	ldrh	r3, [r0, #4]
    25c0:	8802      	ldrh	r2, [r0, #0]
DEFINE(Can_Dash_Request)
DEFINE(Can_FrontCanNodeOutput)
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconCommand)
    25c2:	b085      	sub	sp, #20

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    25c4:	041b      	lsls	r3, r3, #16
    25c6:	4313      	orrs	r3, r2
    25c8:	7882      	ldrb	r2, [r0, #2]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    25ca:	4668      	mov	r0, sp

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    25cc:	2100      	movs	r1, #0
    25ce:	07d2      	lsls	r2, r2, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    25d0:	7302      	strb	r2, [r0, #12]
    25d2:	0e12      	lsrs	r2, r2, #24
    25d4:	7242      	strb	r2, [r0, #9]
    25d6:	0a1a      	lsrs	r2, r3, #8
    25d8:	7203      	strb	r3, [r0, #8]
    25da:	71c2      	strb	r2, [r0, #7]
    25dc:	0c1a      	lsrs	r2, r3, #16
    25de:	0e1b      	lsrs	r3, r3, #24
    25e0:	72c1      	strb	r1, [r0, #11]
    25e2:	7281      	strb	r1, [r0, #10]
    25e4:	7143      	strb	r3, [r0, #5]
    25e6:	4669      	mov	r1, sp
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
  can_out->len = 5;
    25e8:	2305      	movs	r3, #5
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    25ea:	7182      	strb	r2, [r0, #6]
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
    25ec:	4804      	ldr	r0, [pc, #16]	; (2600 <Can_ElconCommand_Write+0x44>)
  can_out->len = 5;
    25ee:	710b      	strb	r3, [r1, #4]
    25f0:	2205      	movs	r2, #5
    25f2:	3105      	adds	r1, #5
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
    25f4:	9000      	str	r0, [sp, #0]
    25f6:	f7ff fe4b 	bl	2290 <CAN_Transmit>
DEFINE(Can_Dash_Request)
DEFINE(Can_FrontCanNodeOutput)
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconCommand)
    25fa:	b005      	add	sp, #20
    25fc:	bd00      	pop	{pc}
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	1806e5f4 	.word	0x1806e5f4

00002604 <__aeabi_uidiv>:
    2604:	2200      	movs	r2, #0
    2606:	0843      	lsrs	r3, r0, #1
    2608:	428b      	cmp	r3, r1
    260a:	d374      	bcc.n	26f6 <__aeabi_uidiv+0xf2>
    260c:	0903      	lsrs	r3, r0, #4
    260e:	428b      	cmp	r3, r1
    2610:	d35f      	bcc.n	26d2 <__aeabi_uidiv+0xce>
    2612:	0a03      	lsrs	r3, r0, #8
    2614:	428b      	cmp	r3, r1
    2616:	d344      	bcc.n	26a2 <__aeabi_uidiv+0x9e>
    2618:	0b03      	lsrs	r3, r0, #12
    261a:	428b      	cmp	r3, r1
    261c:	d328      	bcc.n	2670 <__aeabi_uidiv+0x6c>
    261e:	0c03      	lsrs	r3, r0, #16
    2620:	428b      	cmp	r3, r1
    2622:	d30d      	bcc.n	2640 <__aeabi_uidiv+0x3c>
    2624:	22ff      	movs	r2, #255	; 0xff
    2626:	0209      	lsls	r1, r1, #8
    2628:	ba12      	rev	r2, r2
    262a:	0c03      	lsrs	r3, r0, #16
    262c:	428b      	cmp	r3, r1
    262e:	d302      	bcc.n	2636 <__aeabi_uidiv+0x32>
    2630:	1212      	asrs	r2, r2, #8
    2632:	0209      	lsls	r1, r1, #8
    2634:	d065      	beq.n	2702 <__aeabi_uidiv+0xfe>
    2636:	0b03      	lsrs	r3, r0, #12
    2638:	428b      	cmp	r3, r1
    263a:	d319      	bcc.n	2670 <__aeabi_uidiv+0x6c>
    263c:	e000      	b.n	2640 <__aeabi_uidiv+0x3c>
    263e:	0a09      	lsrs	r1, r1, #8
    2640:	0bc3      	lsrs	r3, r0, #15
    2642:	428b      	cmp	r3, r1
    2644:	d301      	bcc.n	264a <__aeabi_uidiv+0x46>
    2646:	03cb      	lsls	r3, r1, #15
    2648:	1ac0      	subs	r0, r0, r3
    264a:	4152      	adcs	r2, r2
    264c:	0b83      	lsrs	r3, r0, #14
    264e:	428b      	cmp	r3, r1
    2650:	d301      	bcc.n	2656 <__aeabi_uidiv+0x52>
    2652:	038b      	lsls	r3, r1, #14
    2654:	1ac0      	subs	r0, r0, r3
    2656:	4152      	adcs	r2, r2
    2658:	0b43      	lsrs	r3, r0, #13
    265a:	428b      	cmp	r3, r1
    265c:	d301      	bcc.n	2662 <__aeabi_uidiv+0x5e>
    265e:	034b      	lsls	r3, r1, #13
    2660:	1ac0      	subs	r0, r0, r3
    2662:	4152      	adcs	r2, r2
    2664:	0b03      	lsrs	r3, r0, #12
    2666:	428b      	cmp	r3, r1
    2668:	d301      	bcc.n	266e <__aeabi_uidiv+0x6a>
    266a:	030b      	lsls	r3, r1, #12
    266c:	1ac0      	subs	r0, r0, r3
    266e:	4152      	adcs	r2, r2
    2670:	0ac3      	lsrs	r3, r0, #11
    2672:	428b      	cmp	r3, r1
    2674:	d301      	bcc.n	267a <__aeabi_uidiv+0x76>
    2676:	02cb      	lsls	r3, r1, #11
    2678:	1ac0      	subs	r0, r0, r3
    267a:	4152      	adcs	r2, r2
    267c:	0a83      	lsrs	r3, r0, #10
    267e:	428b      	cmp	r3, r1
    2680:	d301      	bcc.n	2686 <__aeabi_uidiv+0x82>
    2682:	028b      	lsls	r3, r1, #10
    2684:	1ac0      	subs	r0, r0, r3
    2686:	4152      	adcs	r2, r2
    2688:	0a43      	lsrs	r3, r0, #9
    268a:	428b      	cmp	r3, r1
    268c:	d301      	bcc.n	2692 <__aeabi_uidiv+0x8e>
    268e:	024b      	lsls	r3, r1, #9
    2690:	1ac0      	subs	r0, r0, r3
    2692:	4152      	adcs	r2, r2
    2694:	0a03      	lsrs	r3, r0, #8
    2696:	428b      	cmp	r3, r1
    2698:	d301      	bcc.n	269e <__aeabi_uidiv+0x9a>
    269a:	020b      	lsls	r3, r1, #8
    269c:	1ac0      	subs	r0, r0, r3
    269e:	4152      	adcs	r2, r2
    26a0:	d2cd      	bcs.n	263e <__aeabi_uidiv+0x3a>
    26a2:	09c3      	lsrs	r3, r0, #7
    26a4:	428b      	cmp	r3, r1
    26a6:	d301      	bcc.n	26ac <__aeabi_uidiv+0xa8>
    26a8:	01cb      	lsls	r3, r1, #7
    26aa:	1ac0      	subs	r0, r0, r3
    26ac:	4152      	adcs	r2, r2
    26ae:	0983      	lsrs	r3, r0, #6
    26b0:	428b      	cmp	r3, r1
    26b2:	d301      	bcc.n	26b8 <__aeabi_uidiv+0xb4>
    26b4:	018b      	lsls	r3, r1, #6
    26b6:	1ac0      	subs	r0, r0, r3
    26b8:	4152      	adcs	r2, r2
    26ba:	0943      	lsrs	r3, r0, #5
    26bc:	428b      	cmp	r3, r1
    26be:	d301      	bcc.n	26c4 <__aeabi_uidiv+0xc0>
    26c0:	014b      	lsls	r3, r1, #5
    26c2:	1ac0      	subs	r0, r0, r3
    26c4:	4152      	adcs	r2, r2
    26c6:	0903      	lsrs	r3, r0, #4
    26c8:	428b      	cmp	r3, r1
    26ca:	d301      	bcc.n	26d0 <__aeabi_uidiv+0xcc>
    26cc:	010b      	lsls	r3, r1, #4
    26ce:	1ac0      	subs	r0, r0, r3
    26d0:	4152      	adcs	r2, r2
    26d2:	08c3      	lsrs	r3, r0, #3
    26d4:	428b      	cmp	r3, r1
    26d6:	d301      	bcc.n	26dc <__aeabi_uidiv+0xd8>
    26d8:	00cb      	lsls	r3, r1, #3
    26da:	1ac0      	subs	r0, r0, r3
    26dc:	4152      	adcs	r2, r2
    26de:	0883      	lsrs	r3, r0, #2
    26e0:	428b      	cmp	r3, r1
    26e2:	d301      	bcc.n	26e8 <__aeabi_uidiv+0xe4>
    26e4:	008b      	lsls	r3, r1, #2
    26e6:	1ac0      	subs	r0, r0, r3
    26e8:	4152      	adcs	r2, r2
    26ea:	0843      	lsrs	r3, r0, #1
    26ec:	428b      	cmp	r3, r1
    26ee:	d301      	bcc.n	26f4 <__aeabi_uidiv+0xf0>
    26f0:	004b      	lsls	r3, r1, #1
    26f2:	1ac0      	subs	r0, r0, r3
    26f4:	4152      	adcs	r2, r2
    26f6:	1a41      	subs	r1, r0, r1
    26f8:	d200      	bcs.n	26fc <__aeabi_uidiv+0xf8>
    26fa:	4601      	mov	r1, r0
    26fc:	4152      	adcs	r2, r2
    26fe:	4610      	mov	r0, r2
    2700:	4770      	bx	lr
    2702:	e7ff      	b.n	2704 <__aeabi_uidiv+0x100>
    2704:	b501      	push	{r0, lr}
    2706:	2000      	movs	r0, #0
    2708:	f000 f806 	bl	2718 <__aeabi_idiv0>
    270c:	bd02      	pop	{r1, pc}
    270e:	46c0      	nop			; (mov r8, r8)

00002710 <__aeabi_uidivmod>:
    2710:	2900      	cmp	r1, #0
    2712:	d0f7      	beq.n	2704 <__aeabi_uidiv+0x100>
    2714:	e776      	b.n	2604 <__aeabi_uidiv>
    2716:	4770      	bx	lr

00002718 <__aeabi_idiv0>:
    2718:	4770      	bx	lr
    271a:	46c0      	nop			; (mov r8, r8)

0000271c <memcpy>:
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	2a0f      	cmp	r2, #15
    2720:	d932      	bls.n	2788 <memcpy+0x6c>
    2722:	000c      	movs	r4, r1
    2724:	4304      	orrs	r4, r0
    2726:	000b      	movs	r3, r1
    2728:	07a4      	lsls	r4, r4, #30
    272a:	d131      	bne.n	2790 <memcpy+0x74>
    272c:	0015      	movs	r5, r2
    272e:	0004      	movs	r4, r0
    2730:	3d10      	subs	r5, #16
    2732:	092d      	lsrs	r5, r5, #4
    2734:	3501      	adds	r5, #1
    2736:	012d      	lsls	r5, r5, #4
    2738:	1949      	adds	r1, r1, r5
    273a:	681e      	ldr	r6, [r3, #0]
    273c:	6026      	str	r6, [r4, #0]
    273e:	685e      	ldr	r6, [r3, #4]
    2740:	6066      	str	r6, [r4, #4]
    2742:	689e      	ldr	r6, [r3, #8]
    2744:	60a6      	str	r6, [r4, #8]
    2746:	68de      	ldr	r6, [r3, #12]
    2748:	3310      	adds	r3, #16
    274a:	60e6      	str	r6, [r4, #12]
    274c:	3410      	adds	r4, #16
    274e:	4299      	cmp	r1, r3
    2750:	d1f3      	bne.n	273a <memcpy+0x1e>
    2752:	230f      	movs	r3, #15
    2754:	1945      	adds	r5, r0, r5
    2756:	4013      	ands	r3, r2
    2758:	2b03      	cmp	r3, #3
    275a:	d91b      	bls.n	2794 <memcpy+0x78>
    275c:	1f1c      	subs	r4, r3, #4
    275e:	2300      	movs	r3, #0
    2760:	08a4      	lsrs	r4, r4, #2
    2762:	3401      	adds	r4, #1
    2764:	00a4      	lsls	r4, r4, #2
    2766:	58ce      	ldr	r6, [r1, r3]
    2768:	50ee      	str	r6, [r5, r3]
    276a:	3304      	adds	r3, #4
    276c:	429c      	cmp	r4, r3
    276e:	d1fa      	bne.n	2766 <memcpy+0x4a>
    2770:	2303      	movs	r3, #3
    2772:	192d      	adds	r5, r5, r4
    2774:	1909      	adds	r1, r1, r4
    2776:	401a      	ands	r2, r3
    2778:	d005      	beq.n	2786 <memcpy+0x6a>
    277a:	2300      	movs	r3, #0
    277c:	5ccc      	ldrb	r4, [r1, r3]
    277e:	54ec      	strb	r4, [r5, r3]
    2780:	3301      	adds	r3, #1
    2782:	429a      	cmp	r2, r3
    2784:	d1fa      	bne.n	277c <memcpy+0x60>
    2786:	bd70      	pop	{r4, r5, r6, pc}
    2788:	0005      	movs	r5, r0
    278a:	2a00      	cmp	r2, #0
    278c:	d1f5      	bne.n	277a <memcpy+0x5e>
    278e:	e7fa      	b.n	2786 <memcpy+0x6a>
    2790:	0005      	movs	r5, r0
    2792:	e7f2      	b.n	277a <memcpy+0x5e>
    2794:	001a      	movs	r2, r3
    2796:	e7f8      	b.n	278a <memcpy+0x6e>

00002798 <memmove>:
    2798:	b570      	push	{r4, r5, r6, lr}
    279a:	4288      	cmp	r0, r1
    279c:	d90b      	bls.n	27b6 <memmove+0x1e>
    279e:	188b      	adds	r3, r1, r2
    27a0:	4298      	cmp	r0, r3
    27a2:	d208      	bcs.n	27b6 <memmove+0x1e>
    27a4:	1a99      	subs	r1, r3, r2
    27a6:	1e53      	subs	r3, r2, #1
    27a8:	2a00      	cmp	r2, #0
    27aa:	d003      	beq.n	27b4 <memmove+0x1c>
    27ac:	5cca      	ldrb	r2, [r1, r3]
    27ae:	54c2      	strb	r2, [r0, r3]
    27b0:	3b01      	subs	r3, #1
    27b2:	d2fb      	bcs.n	27ac <memmove+0x14>
    27b4:	bd70      	pop	{r4, r5, r6, pc}
    27b6:	2a0f      	cmp	r2, #15
    27b8:	d809      	bhi.n	27ce <memmove+0x36>
    27ba:	0005      	movs	r5, r0
    27bc:	2a00      	cmp	r2, #0
    27be:	d0f9      	beq.n	27b4 <memmove+0x1c>
    27c0:	2300      	movs	r3, #0
    27c2:	5ccc      	ldrb	r4, [r1, r3]
    27c4:	54ec      	strb	r4, [r5, r3]
    27c6:	3301      	adds	r3, #1
    27c8:	429a      	cmp	r2, r3
    27ca:	d1fa      	bne.n	27c2 <memmove+0x2a>
    27cc:	e7f2      	b.n	27b4 <memmove+0x1c>
    27ce:	000c      	movs	r4, r1
    27d0:	4304      	orrs	r4, r0
    27d2:	000b      	movs	r3, r1
    27d4:	07a4      	lsls	r4, r4, #30
    27d6:	d126      	bne.n	2826 <memmove+0x8e>
    27d8:	0015      	movs	r5, r2
    27da:	0004      	movs	r4, r0
    27dc:	3d10      	subs	r5, #16
    27de:	092d      	lsrs	r5, r5, #4
    27e0:	3501      	adds	r5, #1
    27e2:	012d      	lsls	r5, r5, #4
    27e4:	1949      	adds	r1, r1, r5
    27e6:	681e      	ldr	r6, [r3, #0]
    27e8:	6026      	str	r6, [r4, #0]
    27ea:	685e      	ldr	r6, [r3, #4]
    27ec:	6066      	str	r6, [r4, #4]
    27ee:	689e      	ldr	r6, [r3, #8]
    27f0:	60a6      	str	r6, [r4, #8]
    27f2:	68de      	ldr	r6, [r3, #12]
    27f4:	3310      	adds	r3, #16
    27f6:	60e6      	str	r6, [r4, #12]
    27f8:	3410      	adds	r4, #16
    27fa:	4299      	cmp	r1, r3
    27fc:	d1f3      	bne.n	27e6 <memmove+0x4e>
    27fe:	240f      	movs	r4, #15
    2800:	1945      	adds	r5, r0, r5
    2802:	4014      	ands	r4, r2
    2804:	2c03      	cmp	r4, #3
    2806:	d910      	bls.n	282a <memmove+0x92>
    2808:	2300      	movs	r3, #0
    280a:	3c04      	subs	r4, #4
    280c:	08a4      	lsrs	r4, r4, #2
    280e:	3401      	adds	r4, #1
    2810:	00a4      	lsls	r4, r4, #2
    2812:	58ce      	ldr	r6, [r1, r3]
    2814:	50ee      	str	r6, [r5, r3]
    2816:	3304      	adds	r3, #4
    2818:	429c      	cmp	r4, r3
    281a:	d1fa      	bne.n	2812 <memmove+0x7a>
    281c:	2303      	movs	r3, #3
    281e:	192d      	adds	r5, r5, r4
    2820:	1909      	adds	r1, r1, r4
    2822:	401a      	ands	r2, r3
    2824:	e7ca      	b.n	27bc <memmove+0x24>
    2826:	0005      	movs	r5, r0
    2828:	e7ca      	b.n	27c0 <memmove+0x28>
    282a:	0022      	movs	r2, r4
    282c:	e7c6      	b.n	27bc <memmove+0x24>
    282e:	46c0      	nop			; (mov r8, r8)

00002830 <memset>:
    2830:	b570      	push	{r4, r5, r6, lr}
    2832:	0783      	lsls	r3, r0, #30
    2834:	d03f      	beq.n	28b6 <memset+0x86>
    2836:	1e54      	subs	r4, r2, #1
    2838:	2a00      	cmp	r2, #0
    283a:	d03b      	beq.n	28b4 <memset+0x84>
    283c:	b2ce      	uxtb	r6, r1
    283e:	0003      	movs	r3, r0
    2840:	2503      	movs	r5, #3
    2842:	e003      	b.n	284c <memset+0x1c>
    2844:	1e62      	subs	r2, r4, #1
    2846:	2c00      	cmp	r4, #0
    2848:	d034      	beq.n	28b4 <memset+0x84>
    284a:	0014      	movs	r4, r2
    284c:	3301      	adds	r3, #1
    284e:	1e5a      	subs	r2, r3, #1
    2850:	7016      	strb	r6, [r2, #0]
    2852:	422b      	tst	r3, r5
    2854:	d1f6      	bne.n	2844 <memset+0x14>
    2856:	2c03      	cmp	r4, #3
    2858:	d924      	bls.n	28a4 <memset+0x74>
    285a:	25ff      	movs	r5, #255	; 0xff
    285c:	400d      	ands	r5, r1
    285e:	022a      	lsls	r2, r5, #8
    2860:	4315      	orrs	r5, r2
    2862:	042a      	lsls	r2, r5, #16
    2864:	4315      	orrs	r5, r2
    2866:	2c0f      	cmp	r4, #15
    2868:	d911      	bls.n	288e <memset+0x5e>
    286a:	0026      	movs	r6, r4
    286c:	3e10      	subs	r6, #16
    286e:	0936      	lsrs	r6, r6, #4
    2870:	3601      	adds	r6, #1
    2872:	0136      	lsls	r6, r6, #4
    2874:	001a      	movs	r2, r3
    2876:	199b      	adds	r3, r3, r6
    2878:	6015      	str	r5, [r2, #0]
    287a:	6055      	str	r5, [r2, #4]
    287c:	6095      	str	r5, [r2, #8]
    287e:	60d5      	str	r5, [r2, #12]
    2880:	3210      	adds	r2, #16
    2882:	4293      	cmp	r3, r2
    2884:	d1f8      	bne.n	2878 <memset+0x48>
    2886:	220f      	movs	r2, #15
    2888:	4014      	ands	r4, r2
    288a:	2c03      	cmp	r4, #3
    288c:	d90a      	bls.n	28a4 <memset+0x74>
    288e:	1f26      	subs	r6, r4, #4
    2890:	08b6      	lsrs	r6, r6, #2
    2892:	3601      	adds	r6, #1
    2894:	00b6      	lsls	r6, r6, #2
    2896:	001a      	movs	r2, r3
    2898:	199b      	adds	r3, r3, r6
    289a:	c220      	stmia	r2!, {r5}
    289c:	4293      	cmp	r3, r2
    289e:	d1fc      	bne.n	289a <memset+0x6a>
    28a0:	2203      	movs	r2, #3
    28a2:	4014      	ands	r4, r2
    28a4:	2c00      	cmp	r4, #0
    28a6:	d005      	beq.n	28b4 <memset+0x84>
    28a8:	b2c9      	uxtb	r1, r1
    28aa:	191c      	adds	r4, r3, r4
    28ac:	7019      	strb	r1, [r3, #0]
    28ae:	3301      	adds	r3, #1
    28b0:	429c      	cmp	r4, r3
    28b2:	d1fb      	bne.n	28ac <memset+0x7c>
    28b4:	bd70      	pop	{r4, r5, r6, pc}
    28b6:	0014      	movs	r4, r2
    28b8:	0003      	movs	r3, r0
    28ba:	e7cc      	b.n	2856 <memset+0x26>

000028bc <strcmp>:
    28bc:	4602      	mov	r2, r0
    28be:	b570      	push	{r4, r5, r6, lr}
    28c0:	430a      	orrs	r2, r1
    28c2:	0792      	lsls	r2, r2, #30
    28c4:	d12a      	bne.n	291c <strcmp+0x60>
    28c6:	4d1e      	ldr	r5, [pc, #120]	; (2940 <strcmp+0x84>)
    28c8:	01ee      	lsls	r6, r5, #7
    28ca:	c804      	ldmia	r0!, {r2}
    28cc:	c908      	ldmia	r1!, {r3}
    28ce:	1b54      	subs	r4, r2, r5
    28d0:	4394      	bics	r4, r2
    28d2:	4034      	ands	r4, r6
    28d4:	d017      	beq.n	2906 <strcmp+0x4a>
    28d6:	b2d0      	uxtb	r0, r2
    28d8:	b2d9      	uxtb	r1, r3
    28da:	1a40      	subs	r0, r0, r1
    28dc:	0621      	lsls	r1, r4, #24
    28de:	4301      	orrs	r1, r0
    28e0:	d110      	bne.n	2904 <strcmp+0x48>
    28e2:	b290      	uxth	r0, r2
    28e4:	b299      	uxth	r1, r3
    28e6:	1a40      	subs	r0, r0, r1
    28e8:	0421      	lsls	r1, r4, #16
    28ea:	4301      	orrs	r1, r0
    28ec:	d10a      	bne.n	2904 <strcmp+0x48>
    28ee:	0210      	lsls	r0, r2, #8
    28f0:	0219      	lsls	r1, r3, #8
    28f2:	0a00      	lsrs	r0, r0, #8
    28f4:	0a09      	lsrs	r1, r1, #8
    28f6:	1a40      	subs	r0, r0, r1
    28f8:	0221      	lsls	r1, r4, #8
    28fa:	4301      	orrs	r1, r0
    28fc:	d102      	bne.n	2904 <strcmp+0x48>
    28fe:	0e10      	lsrs	r0, r2, #24
    2900:	0e19      	lsrs	r1, r3, #24
    2902:	1a40      	subs	r0, r0, r1
    2904:	bd70      	pop	{r4, r5, r6, pc}
    2906:	429a      	cmp	r2, r3
    2908:	d0df      	beq.n	28ca <strcmp+0xe>
    290a:	ba10      	rev	r0, r2
    290c:	ba19      	rev	r1, r3
    290e:	4288      	cmp	r0, r1
    2910:	d901      	bls.n	2916 <strcmp+0x5a>
    2912:	2001      	movs	r0, #1
    2914:	bd70      	pop	{r4, r5, r6, pc}
    2916:	2000      	movs	r0, #0
    2918:	43c0      	mvns	r0, r0
    291a:	bd70      	pop	{r4, r5, r6, pc}
    291c:	7802      	ldrb	r2, [r0, #0]
    291e:	780b      	ldrb	r3, [r1, #0]
    2920:	3001      	adds	r0, #1
    2922:	3101      	adds	r1, #1
    2924:	2a00      	cmp	r2, #0
    2926:	d009      	beq.n	293c <strcmp+0x80>
    2928:	429a      	cmp	r2, r3
    292a:	d107      	bne.n	293c <strcmp+0x80>
    292c:	7802      	ldrb	r2, [r0, #0]
    292e:	780b      	ldrb	r3, [r1, #0]
    2930:	3001      	adds	r0, #1
    2932:	3101      	adds	r1, #1
    2934:	2a00      	cmp	r2, #0
    2936:	d001      	beq.n	293c <strcmp+0x80>
    2938:	429a      	cmp	r2, r3
    293a:	d0ef      	beq.n	291c <strcmp+0x60>
    293c:	1ad0      	subs	r0, r2, r3
    293e:	bd70      	pop	{r4, r5, r6, pc}
    2940:	01010101 	.word	0x01010101

00002944 <strlen>:
    2944:	b510      	push	{r4, lr}
    2946:	0783      	lsls	r3, r0, #30
    2948:	d027      	beq.n	299a <strlen+0x56>
    294a:	7803      	ldrb	r3, [r0, #0]
    294c:	2b00      	cmp	r3, #0
    294e:	d026      	beq.n	299e <strlen+0x5a>
    2950:	0003      	movs	r3, r0
    2952:	2103      	movs	r1, #3
    2954:	e002      	b.n	295c <strlen+0x18>
    2956:	781a      	ldrb	r2, [r3, #0]
    2958:	2a00      	cmp	r2, #0
    295a:	d01c      	beq.n	2996 <strlen+0x52>
    295c:	3301      	adds	r3, #1
    295e:	420b      	tst	r3, r1
    2960:	d1f9      	bne.n	2956 <strlen+0x12>
    2962:	6819      	ldr	r1, [r3, #0]
    2964:	4a0f      	ldr	r2, [pc, #60]	; (29a4 <strlen+0x60>)
    2966:	4c10      	ldr	r4, [pc, #64]	; (29a8 <strlen+0x64>)
    2968:	188a      	adds	r2, r1, r2
    296a:	438a      	bics	r2, r1
    296c:	4222      	tst	r2, r4
    296e:	d10f      	bne.n	2990 <strlen+0x4c>
    2970:	3304      	adds	r3, #4
    2972:	6819      	ldr	r1, [r3, #0]
    2974:	4a0b      	ldr	r2, [pc, #44]	; (29a4 <strlen+0x60>)
    2976:	188a      	adds	r2, r1, r2
    2978:	438a      	bics	r2, r1
    297a:	4222      	tst	r2, r4
    297c:	d108      	bne.n	2990 <strlen+0x4c>
    297e:	3304      	adds	r3, #4
    2980:	6819      	ldr	r1, [r3, #0]
    2982:	4a08      	ldr	r2, [pc, #32]	; (29a4 <strlen+0x60>)
    2984:	188a      	adds	r2, r1, r2
    2986:	438a      	bics	r2, r1
    2988:	4222      	tst	r2, r4
    298a:	d0f1      	beq.n	2970 <strlen+0x2c>
    298c:	e000      	b.n	2990 <strlen+0x4c>
    298e:	3301      	adds	r3, #1
    2990:	781a      	ldrb	r2, [r3, #0]
    2992:	2a00      	cmp	r2, #0
    2994:	d1fb      	bne.n	298e <strlen+0x4a>
    2996:	1a18      	subs	r0, r3, r0
    2998:	bd10      	pop	{r4, pc}
    299a:	0003      	movs	r3, r0
    299c:	e7e1      	b.n	2962 <strlen+0x1e>
    299e:	2000      	movs	r0, #0
    29a0:	e7fa      	b.n	2998 <strlen+0x54>
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	fefefeff 	.word	0xfefefeff
    29a8:	80808080 	.word	0x80808080

000029ac <__utoa>:
    29ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ae:	4657      	mov	r7, sl
    29b0:	4645      	mov	r5, r8
    29b2:	464e      	mov	r6, r9
    29b4:	b4e0      	push	{r5, r6, r7}
    29b6:	b08a      	sub	sp, #40	; 0x28
    29b8:	4690      	mov	r8, r2
    29ba:	466a      	mov	r2, sp
    29bc:	4b1d      	ldr	r3, [pc, #116]	; (2a34 <__utoa+0x88>)
    29be:	000d      	movs	r5, r1
    29c0:	0006      	movs	r6, r0
    29c2:	cb13      	ldmia	r3!, {r0, r1, r4}
    29c4:	c213      	stmia	r2!, {r0, r1, r4}
    29c6:	cb13      	ldmia	r3!, {r0, r1, r4}
    29c8:	c213      	stmia	r2!, {r0, r1, r4}
    29ca:	cb13      	ldmia	r3!, {r0, r1, r4}
    29cc:	c213      	stmia	r2!, {r0, r1, r4}
    29ce:	781b      	ldrb	r3, [r3, #0]
    29d0:	46ea      	mov	sl, sp
    29d2:	7013      	strb	r3, [r2, #0]
    29d4:	4643      	mov	r3, r8
    29d6:	3b02      	subs	r3, #2
    29d8:	002f      	movs	r7, r5
    29da:	2400      	movs	r4, #0
    29dc:	2b22      	cmp	r3, #34	; 0x22
    29de:	d901      	bls.n	29e4 <__utoa+0x38>
    29e0:	e024      	b.n	2a2c <__utoa+0x80>
    29e2:	464c      	mov	r4, r9
    29e4:	1c63      	adds	r3, r4, #1
    29e6:	0030      	movs	r0, r6
    29e8:	4641      	mov	r1, r8
    29ea:	4699      	mov	r9, r3
    29ec:	f7ff fe90 	bl	2710 <__aeabi_uidivmod>
    29f0:	4653      	mov	r3, sl
    29f2:	5c5b      	ldrb	r3, [r3, r1]
    29f4:	0030      	movs	r0, r6
    29f6:	703b      	strb	r3, [r7, #0]
    29f8:	4641      	mov	r1, r8
    29fa:	f7ff fe03 	bl	2604 <__aeabi_uidiv>
    29fe:	3701      	adds	r7, #1
    2a00:	1e06      	subs	r6, r0, #0
    2a02:	d1ee      	bne.n	29e2 <__utoa+0x36>
    2a04:	464b      	mov	r3, r9
    2a06:	54e8      	strb	r0, [r5, r3]
    2a08:	2300      	movs	r3, #0
    2a0a:	2c00      	cmp	r4, #0
    2a0c:	d007      	beq.n	2a1e <__utoa+0x72>
    2a0e:	5cea      	ldrb	r2, [r5, r3]
    2a10:	5d29      	ldrb	r1, [r5, r4]
    2a12:	54e9      	strb	r1, [r5, r3]
    2a14:	552a      	strb	r2, [r5, r4]
    2a16:	3301      	adds	r3, #1
    2a18:	3c01      	subs	r4, #1
    2a1a:	42a3      	cmp	r3, r4
    2a1c:	dbf7      	blt.n	2a0e <__utoa+0x62>
    2a1e:	0028      	movs	r0, r5
    2a20:	b00a      	add	sp, #40	; 0x28
    2a22:	bc1c      	pop	{r2, r3, r4}
    2a24:	4690      	mov	r8, r2
    2a26:	4699      	mov	r9, r3
    2a28:	46a2      	mov	sl, r4
    2a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a2c:	702c      	strb	r4, [r5, #0]
    2a2e:	2000      	movs	r0, #0
    2a30:	e7f6      	b.n	2a20 <__utoa+0x74>
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	00003290 	.word	0x00003290

00002a38 <utoa>:
    2a38:	b510      	push	{r4, lr}
    2a3a:	f7ff ffb7 	bl	29ac <__utoa>
    2a3e:	bd10      	pop	{r4, pc}

00002a40 <OscRateIn>:
    2a40:	0000 0000 0a0d 0000 059a 0000 0568 0000     ............h...
    2a50:	0616 0000 05ca 0000 0630 0000 0602 0000     ........0.......
    2a60:	05aa 0000 087c 0000 08ac 0000 08dc 0000     ....|...........
    2a70:	090c 0000 099c 0000 09ca 0000 093c 0000     ............<...
    2a80:	096c 0000 09f8 0000 0a26 0000 084c 0000     l.......&...L...
    2a90:	0a54 0000 0ba2 0000 0bac 0000 0bb6 0000     T...............
    2aa0:	0bc0 0000 0bca 0000 0bd4 0000 0bde 0000     ................
    2ab0:	0be8 0000 0bf2 0000 0bfc 0000 0c06 0000     ................
    2ac0:	0c10 0000                                   ....

00002ac4 <locstring>:
    2ac4:	2bb4 0000 2d3c 0000 2d48 0000 2d5c 0000     .+..<-..H-..\-..
    2ad4:	2d68 0000 2d7c 0000 2d94 0000 2da8 0000     h-..|-...-...-..
    2ae4:	2dbc 0000 2dcc 0000 2de0 0000 2df4 0000     .-...-...-...-..
    2af4:	2bc0 0000 2ca8 0000 2cbc 0000 2ccc 0000     .+...,...,...,..
    2b04:	2cdc 0000                                   .,..

00002b08 <CSB_SSM_MODE_NAMES>:
    2b08:	2f18 0000 2f2c 0000 2f44 0000 2f58 0000     ./..,/..D/..X/..

00002b18 <handlers>:
    2b18:	0ad9 0000 07d1 0000 0ced 0000 0c95 0000     ................
    2b28:	0da1 0000 0c45 0000 06ed 0000 654d 7361     ....E.......Meas
    2b38:	7275 2065 6e4f 0021 654d 7361 7275 2065     ure On!.Measure 
    2b48:	664f 2166 0000 0000 7270 6e69 5f74 6c66     Off!....print_fl
    2b58:	6761 0073 6150 6b63 4320 7275 6572 746e     ags.Pack Current
    2b68:	203a 6e4f 0000 0000 6150 6b63 4320 7275     : On....Pack Cur
    2b78:	6572 746e 203a 664f 0066 0000 6170 6b63     rent: Off...pack
    2b88:	7563 7272 6e65 0074 6170 6b63 6f76 746c     current.packvolt
    2b98:	6761 0065 6e55 6572 6f63 6e67 7a69 6465     age.Unrecognized
    2ba8:	6320 6d6f 616d 646e 0021 0000 6563 6c6c      command!...cell
    2bb8:	6d5f 6e69 6d5f 0056 7473 7461 0065 0000     _min_mV.state...
    2bc8:	6553 2074 6166 6c69 6465 2820 6f6e 2074     Set failed (not 
    2bd8:	6e69 7320 6174 646e 7962 6d20 646f 2965     in standby mode)
    2be8:	0021 0000 6f44 656e 0021 0000 6874 7369     !...Done!...this
    2bf8:	6c20 636f 7461 6f69 206e 7369 7220 6165      location is rea
    2c08:	2064 6e6f 796c 0000 6e69 6176 696c 2064     d only..invalid 
    2c18:	6f6c 6163 6974 6e6f 0000 0000 6e69 6176     location....inva
    2c28:	696c 2064 6567 2074 6f6c 6163 6974 6e6f     lid get location
    2c38:	0000 0000 6863 6772 6f20 6666 0000 0000     ....chrg off....
    2c48:	6863 6772 6f20 006e 754d 7473 6220 2065     chrg on.Must be 
    2c58:	6e69 7320 6174 646e 7962 0000 594d 3831     in standby..MY18
    2c68:	0000 0000 594d 3631 0000 0000 6567 0074     ....MY16....get.
    2c78:	2d2d 2d2d 2d2d 2f72 2077 6e65 7274 6569     ------r/w entrie
    2c88:	2d73 2d2d 2d2d 002d 2d2d 2d2d 2d2d 2f72     s------.------r/
    2c98:	206f 6e65 7274 6569 2d73 2d2d 2d2d 002d     o entries------.
    2ca8:	6170 6b63 635f 6c65 5f6c 616d 5f78 566d     pack_cell_max_mV
    2cb8:	0000 0000 6170 6b63 635f 7275 6572 746e     ....pack_current
    2cc8:	6d5f 0041 6170 6b63 765f 6c6f 6174 6567     _mA.pack_voltage
    2cd8:	6d5f 0056 6166 6c75 0074 0000 6162 206c     _mV.fault...bal 
    2ce8:	666f 0066 6162 206c 6e6f 0000 6e69 6f63     off.bal on..inco
    2cf8:	7272 6365 2074 756e 626d 7265 6f20 2066     rrect number of 
    2d08:	7261 7367 0000 0000 6e55 6572 6f63 6e67     args....Unrecogn
    2d18:	7a69 6465 6320 6d6f 616d 646e 0000 0000     ized command....
    2d28:	702c 7563 7272 002c 000a 0000 702c 6f76     ,pcurr,.....,pvo
    2d38:	746c 002c 6563 6c6c 6d5f 7861 6d5f 0056     lt,.cell_max_mV.
    2d48:	6563 6c6c 635f 7061 6361 7469 5f79 4163     cell_capacity_cA
    2d58:	0068 0000 756e 5f6d 6f6d 7564 656c 0073     h...num_modules.
    2d68:	6f6d 7564 656c 635f 6c65 5f6c 6f63 6e75     module_cell_coun
    2d78:	0074 0000 6563 6c6c 635f 6168 6772 5f65     t...cell_charge_
    2d88:	5f63 6172 6974 676e 635f 0043 6162 5f6c     c_rating_cC.bal_
    2d98:	6e6f 745f 7268 7365 5f68 566d 0000 0000     on_thresh_mV....
    2da8:	6162 5f6c 666f 5f66 6874 6572 6873 6d5f     bal_off_thresh_m
    2db8:	0056 0000 6170 6b63 635f 6c65 736c 705f     V...pack_cells_p
    2dc8:	0000 0000 7663 6d5f 6e69 635f 7275 6572     ....cv_min_curre
    2dd8:	746e 6d5f 0041 0000 7663 6d5f 6e69 635f     nt_mA...cv_min_c
    2de8:	7275 6572 746e 6d5f 0073 0000 6363 635f     urrent_ms...cc_c
    2df8:	6c65 5f6c 6f76 746c 6761 5f65 566d 0000     ell_voltage_mV..
    2e08:	6573 0074 6568 706c 0000 0000 6f63 666e     set.help....conf
    2e18:	6769 645f 6665 0000 6162 006c 6863 6772     ig_def..bal.chrg
    2e28:	0000 0000 656d 7361 7275 0065 5343 5f42     ....measure.CSB_
    2e38:	4e49 5449 4f5f 4646 0000 0000 5343 5f42     INIT_OFF....CSB_
    2e48:	4e49 5449 535f 4957 4354 5f48 3035 0030     INIT_SWITCH_500.
    2e58:	5343 5f42 4e49 5449 535f 4e45 5f44 3035     CSB_INIT_SEND_50
    2e68:	0030 0000 5343 5f42 4e49 5449 535f 4957     0...CSB_INIT_SWI
    2e78:	4354 5f48 3532 0030 5343 5f42 4e49 5449     TCH_250.CSB_INIT
    2e88:	575f 4941 5f54 3532 0030 0000 5343 5f42     _WAIT_250...CSB_
    2e98:	4e49 5449 445f 4e4f 0045 0000 5343 5f42     INIT_DONE...CSB_
    2ea8:	4843 5241 4547 4f5f 4646 0000 5343 5f42     CHARGE_OFF..CSB_
    2eb8:	4843 5241 4547 495f 494e 0054 5343 5f42     CHARGE_INIT.CSB_
    2ec8:	4843 5241 4547 435f 0043 0000 5343 5f42     CHARGE_CC...CSB_
    2ed8:	4843 5241 4547 435f 0056 0000 5343 5f42     CHARGE_CV...CSB_
    2ee8:	4843 5241 4547 425f 4c41 0000 5343 5f42     CHARGE_BAL..CSB_
    2ef8:	4843 5241 4547 465f 5541 544c 0000 0000     CHARGE_FAULT....
    2f08:	5343 5f42 4843 5241 4547 445f 4e4f 0045     CSB_CHARGE_DONE.
    2f18:	5343 5f42 5353 5f4d 4f4d 4544 495f 494e     CSB_SSM_MODE_INI
    2f28:	0054 0000 5343 5f42 5353 5f4d 4f4d 4544     T...CSB_SSM_MODE
    2f38:	535f 4154 444e 5942 0000 0000 5343 5f42     _STANDBY....CSB_
    2f48:	5353 5f4d 4f4d 4544 435f 4148 4752 0045     SSM_MODE_CHARGE.
    2f58:	5343 5f42 5353 5f4d 4f4d 4544 425f 4c41     CSB_SSM_MODE_BAL
    2f68:	4e41 4543 0000 0000                         ANCE....

00002f70 <commands>:
    2f70:	2c74 0000 2e08 0000 2e0c 0000 2e14 0000     t,..............
    2f80:	2e20 0000 2e24 0000 2e2c 0000                ...$...,...

00002f8c <nargs>:
    2f8c:	0201 0101 0001 0001                         ........

00002f94 <CSB_INIT_MODE_NAMES>:
    2f94:	2e34 0000 2e44 0000 2e58 0000 2e6c 0000     4...D...X...l...
    2fa4:	2e80 0000 2e94 0000                         ........

00002fac <CSB_CHARGE_MODE_NAMES>:
    2fac:	2ea4 0000 2eb4 0000 2ec4 0000 2ed4 0000     ................
    2fbc:	2ee4 0000 2ef4 0000 2f08 0000 1534 0000     ........./..4...
    2fcc:	15ac 0000 15ba 0000 1534 0000 1534 0000     ........4...4...
    2fdc:	15d4 0000 15ea 0000 1534 0000 1606 0000     ........4.......
    2fec:	1534 0000 161e 0000 1624 0000 1534 0000     4.......$...4...
    2ffc:	1588 0000 1636 0000 1534 0000 163e 0000     ....6...4...>...
    300c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    301c:	158c 0000 1534 0000 1534 0000 1534 0000     ....4...4...4...
    302c:	1534 0000 1534 0000 1588 0000 1534 0000     4...4.......4...
    303c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    304c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    305c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    306c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    307c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    308c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    309c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    30ac:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    30bc:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    30cc:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    30dc:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    30ec:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    30fc:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    310c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    311c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    312c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    313c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    314c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    315c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    316c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    317c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    318c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    319c:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    31ac:	1534 0000 1534 0000 1534 0000 1534 0000     4...4...4...4...
    31bc:	1534 0000 1534 0000 1606 0000 5b1b 0000     4...4........[..
    31cc:	0044 0000 5b1b 004b 5b1b 2044 5b1b 0044     D....[K..[D .[D.
    31dc:	3e20 0020 5245 4f52 3a52 6f74 206f 616d      > .ERROR:too ma
    31ec:	796e 7420 6b6f 6e65 0073 0000 203e 0000     ny tokens...> ..
    31fc:	1958 0000 19a8 0000 1988 0000 1998 0000     X...............
    320c:	1968 0000 197a 0000                         h...z...

00003214 <wdtOSCRate>:
    3214:	0000 0000 27c0 0009 0590 0010 5cc0 0015     .....'.......\..
    3224:	b3f0 001a 0b20 0020 9f00 0024 32e0 0029     .... . ...$..2).
    3234:	c6c0 002d 9750 0031 67e0 0035 3870 0039     ..-.P.1..g5.p89.
    3244:	0900 003d 1640 0040 2380 0043 30c0 0046     ..=.@.@..#C..0F.
    3254:	2080 0000 2096 0000 209a 0000 209e 0000     . ... ... ... ..
    3264:	20a2 0000 20a6 0000 20aa 0000 1f15 0000     . ... ... ......
    3274:	1f59 0000 1f01 0000 0000 0000 0000 0000     Y...............
	...
    3290:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    32a0:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
    32b0:	7877 7a79 0000 0000                         wxyz....
