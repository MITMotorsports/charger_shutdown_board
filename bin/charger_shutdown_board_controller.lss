
bin/charger_shutdown_board_controller.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	10002000 	.word	0x10002000
       4:	000000c1 	.word	0x000000c1
       8:	000000e1 	.word	0x000000e1
       c:	000000e3 	.word	0x000000e3
	...
      2c:	000000e5 	.word	0x000000e5
	...
      38:	000000e7 	.word	0x000000e7
      3c:	00000109 	.word	0x00000109
      40:	000000eb 	.word	0x000000eb
      44:	000000eb 	.word	0x000000eb
      48:	000000eb 	.word	0x000000eb
      4c:	000000eb 	.word	0x000000eb
      50:	000000eb 	.word	0x000000eb
      54:	000000eb 	.word	0x000000eb
      58:	000000eb 	.word	0x000000eb
      5c:	000000eb 	.word	0x000000eb
      60:	000000eb 	.word	0x000000eb
      64:	000000eb 	.word	0x000000eb
      68:	000000eb 	.word	0x000000eb
      6c:	000000eb 	.word	0x000000eb
      70:	000000eb 	.word	0x000000eb
      74:	0000252d 	.word	0x0000252d
      78:	000000eb 	.word	0x000000eb
      7c:	000000eb 	.word	0x000000eb
      80:	000000eb 	.word	0x000000eb
      84:	000000eb 	.word	0x000000eb
      88:	000000eb 	.word	0x000000eb
      8c:	000000eb 	.word	0x000000eb
      90:	000000eb 	.word	0x000000eb
      94:	000000ed 	.word	0x000000ed
	...
      a0:	000000eb 	.word	0x000000eb
      a4:	000000eb 	.word	0x000000eb
      a8:	000000eb 	.word	0x000000eb
      ac:	00000000 	.word	0x00000000
      b0:	000000eb 	.word	0x000000eb
      b4:	000000eb 	.word	0x000000eb
      b8:	000000eb 	.word	0x000000eb
      bc:	000000eb 	.word	0x000000eb

000000c0 <Reset_Handler>:
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
      c0:	4905      	ldr	r1, [pc, #20]	; (d8 <Reset_Handler+0x18>)
    ldr r2, =__bss_end__
      c2:	4a06      	ldr	r2, [pc, #24]	; (dc <Reset_Handler+0x1c>)

    movs    r0, #0
      c4:	2000      	movs	r0, #0

    sub    r2, r1
      c6:	1a52      	subs	r2, r2, r1
    ble .L_loop3_done
      c8:	dd02      	ble.n	d0 <Reset_Handler+0x10>

.L_loop3:
    sub    r2, #4
      ca:	3a04      	subs	r2, #4
    str r0, [r1, r2]
      cc:	5088      	str	r0, [r1, r2]
    bgt .L_loop3
      ce:	dcfc      	bgt.n	ca <Reset_Handler+0xa>
.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */


#ifndef __NO_SYSTEM_INIT
    bl  SystemInit
      d0:	f001 ff10 	bl	1ef4 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
    bl  __START
      d4:	f001 fa12 	bl	14fc <main>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
      d8:	10000108 	.word	0x10000108
    ldr r2, =__bss_end__
      dc:	10000a90 	.word	0x10000a90

000000e0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
      e0:	e7fe      	b.n	e0 <NMI_Handler>

000000e2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
      e2:	e7fe      	b.n	e2 <HardFault_Handler>

000000e4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
      e4:	e7fe      	b.n	e4 <SVC_Handler>

000000e6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
      e6:	e7fe      	b.n	e6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
      e8:	e7fe      	b.n	e8 <PendSV_Handler+0x2>

000000ea <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
      ea:	e7fe      	b.n	ea <Default_Handler>

000000ec <UART_IRQHandler>:
void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate);
void Send_Elcon_Command(CSB_OUTPUT_T *csb_output);
void Send_Bms_Switch(void);
void Send_Bms_Mode(CSB_STATE_T *csb_state);

void UART_IRQHandler(void) {
      ec:	b510      	push	{r4, lr}
  Chip_UART_IRQRBHandler(LPC_USART, &uart_rx_ring, &uart_tx_ring);
      ee:	4a03      	ldr	r2, [pc, #12]	; (fc <UART_IRQHandler+0x10>)
      f0:	4903      	ldr	r1, [pc, #12]	; (100 <UART_IRQHandler+0x14>)
      f2:	4804      	ldr	r0, [pc, #16]	; (104 <UART_IRQHandler+0x18>)
      f4:	f002 f8ca 	bl	228c <Chip_UART_IRQRBHandler>
}
      f8:	bd10      	pop	{r4, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	10000174 	.word	0x10000174
     100:	100001f4 	.word	0x100001f4
     104:	40008000 	.word	0x40008000

00000108 <SysTick_Handler>:

void SysTick_Handler(void) {
  msTicks++;
     108:	4a02      	ldr	r2, [pc, #8]	; (114 <SysTick_Handler+0xc>)
     10a:	6813      	ldr	r3, [r2, #0]
     10c:	3301      	adds	r3, #1
     10e:	6013      	str	r3, [r2, #0]
}
     110:	4770      	bx	lr
     112:	46c0      	nop			; (mov r8, r8)
     114:	10000738 	.word	0x10000738

00000118 <Board_Chip_Init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     118:	21fa      	movs	r1, #250	; 0xfa

void Board_Chip_Init(void) {
  SysTick_Config(Hertz2Ticks(1000));
     11a:	4b0b      	ldr	r3, [pc, #44]	; (148 <Board_Chip_Init+0x30>)

void SysTick_Handler(void) {
  msTicks++;
}

void Board_Chip_Init(void) {
     11c:	b510      	push	{r4, lr}
     11e:	6818      	ldr	r0, [r3, #0]
     120:	0089      	lsls	r1, r1, #2
     122:	f002 fcc7 	bl	2ab4 <__aeabi_uidiv>
     126:	4a09      	ldr	r2, [pc, #36]	; (14c <Board_Chip_Init+0x34>)
     128:	3801      	subs	r0, #1
     12a:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     12c:	20c0      	movs	r0, #192	; 0xc0
     12e:	4908      	ldr	r1, [pc, #32]	; (150 <Board_Chip_Init+0x38>)
     130:	0600      	lsls	r0, r0, #24
     132:	6a0b      	ldr	r3, [r1, #32]
     134:	021b      	lsls	r3, r3, #8
     136:	0a1b      	lsrs	r3, r3, #8
     138:	4303      	orrs	r3, r0
     13a:	620b      	str	r3, [r1, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     13c:	2300      	movs	r3, #0
     13e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     140:	3307      	adds	r3, #7
     142:	6013      	str	r3, [r2, #0]
  SysTick_Config(Hertz2Ticks(1000));
}
     144:	bd10      	pop	{r4, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	1000073c 	.word	0x1000073c
     14c:	e000e010 	.word	0xe000e010
     150:	e000ed00 	.word	0xe000ed00

00000154 <Board_Print>:

uint32_t Board_Print(const char *str) {
     154:	b510      	push	{r4, lr}
     156:	0004      	movs	r4, r0
  return Chip_UART_SendRB(LPC_USART, &uart_tx_ring, str, strlen(str));
     158:	f002 fe4c 	bl	2df4 <strlen>
     15c:	0022      	movs	r2, r4
     15e:	0003      	movs	r3, r0
     160:	4902      	ldr	r1, [pc, #8]	; (16c <Board_Print+0x18>)
     162:	4803      	ldr	r0, [pc, #12]	; (170 <Board_Print+0x1c>)
     164:	f002 f864 	bl	2230 <Chip_UART_SendRB>
}
     168:	bd10      	pop	{r4, pc}
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	10000174 	.word	0x10000174
     170:	40008000 	.word	0x40008000

00000174 <Board_Println>:
void Board_BlockingDelay(uint32_t dlyTicks) {
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
}

uint32_t Board_Println(const char *str) {
     174:	b510      	push	{r4, lr}
  uint32_t count = Board_Print(str);
     176:	f7ff ffed 	bl	154 <Board_Print>
     17a:	0004      	movs	r4, r0
  return count + Board_Print("\r\n");
     17c:	4802      	ldr	r0, [pc, #8]	; (188 <Board_Println+0x14>)
     17e:	f7ff ffe9 	bl	154 <Board_Print>
     182:	1820      	adds	r0, r4, r0
}
     184:	bd10      	pop	{r4, pc}
     186:	46c0      	nop			; (mov r8, r8)
     188:	00002f34 	.word	0x00002f34

0000018c <Board_Read>:

uint32_t Board_Write(const char *str, uint32_t count) {
  return Chip_UART_SendRB(LPC_USART, &uart_tx_ring, str, count);
}

uint32_t Board_Read(char *charBuffer, uint32_t length) {
     18c:	b510      	push	{r4, lr}
     18e:	0002      	movs	r2, r0
     190:	000b      	movs	r3, r1
  return Chip_UART_ReadRB(LPC_USART, &uart_rx_ring, charBuffer, length);
     192:	4802      	ldr	r0, [pc, #8]	; (19c <Board_Read+0x10>)
     194:	4902      	ldr	r1, [pc, #8]	; (1a0 <Board_Read+0x14>)
     196:	f002 f871 	bl	227c <Chip_UART_ReadRB>
}
     19a:	bd10      	pop	{r4, pc}
     19c:	40008000 	.word	0x40008000
     1a0:	100001f4 	.word	0x100001f4

000001a4 <Board_Print_BLOCKING>:

// USE THESE SPARINGLY. ONLY WHEN A PRINT WOULD RESULT IN A BUFFER OVERFLOW
uint32_t Board_Print_BLOCKING(const char *str) {
     1a4:	b510      	push	{r4, lr}
     1a6:	0004      	movs	r4, r0
  return Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
     1a8:	f002 fe24 	bl	2df4 <strlen>
     1ac:	0021      	movs	r1, r4
     1ae:	0002      	movs	r2, r0
     1b0:	4801      	ldr	r0, [pc, #4]	; (1b8 <Board_Print_BLOCKING+0x14>)
     1b2:	f002 f80f 	bl	21d4 <Chip_UART_SendBlocking>
}
     1b6:	bd10      	pop	{r4, pc}
     1b8:	40008000 	.word	0x40008000

000001bc <Board_Println_BLOCKING>:

uint32_t Board_Println_BLOCKING(const char *str) {
     1bc:	b510      	push	{r4, lr}
  uint32_t count = Board_Print_BLOCKING(str);
     1be:	f7ff fff1 	bl	1a4 <Board_Print_BLOCKING>
     1c2:	0004      	movs	r4, r0
  return count + Board_Print_BLOCKING("\r\n");
     1c4:	4802      	ldr	r0, [pc, #8]	; (1d0 <Board_Println_BLOCKING+0x14>)
     1c6:	f7ff ffed 	bl	1a4 <Board_Print_BLOCKING>
     1ca:	1820      	adds	r0, r4, r0
}
     1cc:	bd10      	pop	{r4, pc}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	00002f34 	.word	0x00002f34

000001d4 <Board_Can_Init>:

void Board_Can_Init(uint32_t baud_rate) {
     1d4:	b510      	push	{r4, lr}
  Can0_Csb_Init(baud_rate);
     1d6:	f002 fae9 	bl	27ac <Can0_Csb_Init>
}
     1da:	bd10      	pop	{r4, pc}

000001dc <Board_UART_Init>:

void Board_UART_Init(uint32_t baudRateHz) {
     1dc:	b570      	push	{r4, r5, r6, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
     1de:	2400      	movs	r4, #0
  // Initialize UART Buffers
  RingBuffer_Init(&uart_rx_ring, _uart_rx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     1e0:	4d18      	ldr	r5, [pc, #96]	; (244 <Stack_Size+0x44>)

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
}

void Board_UART_Init(uint32_t baudRateHz) {
     1e2:	0006      	movs	r6, r0
  // Initialize UART Buffers
  RingBuffer_Init(&uart_rx_ring, _uart_rx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     1e4:	2364      	movs	r3, #100	; 0x64
     1e6:	2201      	movs	r2, #1
     1e8:	4917      	ldr	r1, [pc, #92]	; (248 <Stack_Size+0x48>)
     1ea:	0028      	movs	r0, r5
     1ec:	f001 ff0c 	bl	2008 <RingBuffer_Init>
     1f0:	612c      	str	r4, [r5, #16]
     1f2:	60ec      	str	r4, [r5, #12]
  RingBuffer_Flush(&uart_rx_ring);
  RingBuffer_Init(&uart_tx_ring, _uart_tx_ring, sizeof(uint8_t), UART_BUFFER_SIZE);
     1f4:	4d15      	ldr	r5, [pc, #84]	; (24c <Stack_Size+0x4c>)
     1f6:	4916      	ldr	r1, [pc, #88]	; (250 <Stack_Size+0x50>)
     1f8:	2364      	movs	r3, #100	; 0x64
     1fa:	2201      	movs	r2, #1
     1fc:	0028      	movs	r0, r5
     1fe:	f001 ff03 	bl	2008 <RingBuffer_Init>
     202:	612c      	str	r4, [r5, #16]
     204:	60ec      	str	r4, [r5, #12]
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
     206:	22a4      	movs	r2, #164	; 0xa4
     208:	2501      	movs	r5, #1
     20a:	4b12      	ldr	r3, [pc, #72]	; (254 <Stack_Size+0x54>)
  RingBuffer_Flush(&uart_tx_ring);

  Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_6, (IOCON_FUNC1 | IOCON_MODE_INACT));/* RXD */
  Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_7, (IOCON_FUNC1 | IOCON_MODE_INACT));/* TXD */

  Chip_UART_Init(LPC_USART);
     20c:	4c12      	ldr	r4, [pc, #72]	; (258 <Stack_Size+0x58>)
     20e:	509d      	str	r5, [r3, r2]
     210:	3204      	adds	r2, #4
     212:	509d      	str	r5, [r3, r2]
     214:	0020      	movs	r0, r4
     216:	f001 ffc9 	bl	21ac <Chip_UART_Init>
  Chip_UART_SetBaudFDR(LPC_USART, baudRateHz);
     21a:	0031      	movs	r1, r6
     21c:	0020      	movs	r0, r4
     21e:	f002 f85b 	bl	22d8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
     222:	2303      	movs	r3, #3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     224:	2280      	movs	r2, #128	; 0x80
     226:	21c0      	movs	r1, #192	; 0xc0
     228:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
     22a:	337e      	adds	r3, #126	; 0x7e
     22c:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
     22e:	3b01      	subs	r3, #1
     230:	6323      	str	r3, [r4, #48]	; 0x30
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
     232:	6863      	ldr	r3, [r4, #4]
     234:	0392      	lsls	r2, r2, #14
     236:	431d      	orrs	r5, r3
     238:	4b08      	ldr	r3, [pc, #32]	; (25c <Stack_Size+0x5c>)
     23a:	0049      	lsls	r1, r1, #1
     23c:	6065      	str	r5, [r4, #4]
     23e:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     240:	601a      	str	r2, [r3, #0]
  Chip_UART_TXEnable(LPC_USART);

  Chip_UART_IntEnable(LPC_USART, UART_IER_RBRINT);
  NVIC_ClearPendingIRQ(UART0_IRQn);
  NVIC_EnableIRQ(UART0_IRQn);
}
     242:	bd70      	pop	{r4, r5, r6, pc}
     244:	100001f4 	.word	0x100001f4
     248:	10000108 	.word	0x10000108
     24c:	10000174 	.word	0x10000174
     250:	1000018c 	.word	0x1000018c
     254:	40044000 	.word	0x40044000
     258:	40008000 	.word	0x40008000
     25c:	e000e100 	.word	0xe000e100

00000260 <Board_Contactors_Closed>:
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
}

bool Board_Contactors_Closed(void) {
     260:	b510      	push	{r4, lr}
  return Low_Side_Contactor_Pin_Get();
     262:	f001 fdbf 	bl	1de4 <Low_Side_Contactor_Pin_Get>
}
     266:	bd10      	pop	{r4, pc}

00000268 <Board_GetModeRequest>:

void Board_GetModeRequest(const CONSOLE_OUTPUT_T *console_output, CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state) {
  CSB_SSM_MODE_T console_mode_request = CSB_SSM_MODE_IDLE;
  if (console_output->valid_mode_request) {
     268:	7802      	ldrb	r2, [r0, #0]
bool Board_Contactors_Closed(void) {
  return Low_Side_Contactor_Pin_Get();
}

void Board_GetModeRequest(const CONSOLE_OUTPUT_T *console_output, CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state) {
  CSB_SSM_MODE_T console_mode_request = CSB_SSM_MODE_IDLE;
     26a:	2301      	movs	r3, #1
  if (console_output->valid_mode_request) {
     26c:	2a00      	cmp	r2, #0
     26e:	d002      	beq.n	276 <Board_GetModeRequest+0xe>
      console_mode_request = console_output->mode_request;
      csb_input->balance_mV = console_output->balance_mV;
     270:	6842      	ldr	r2, [r0, #4]
}

void Board_GetModeRequest(const CONSOLE_OUTPUT_T *console_output, CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state) {
  CSB_SSM_MODE_T console_mode_request = CSB_SSM_MODE_IDLE;
  if (console_output->valid_mode_request) {
      console_mode_request = console_output->mode_request;
     272:	7883      	ldrb	r3, [r0, #2]
      csb_input->balance_mV = console_output->balance_mV;
     274:	60ca      	str	r2, [r1, #12]
  }
  csb_input->mode_request = console_mode_request;
     276:	720b      	strb	r3, [r1, #8]
}
     278:	4770      	bx	lr
     27a:	46c0      	nop			; (mov r8, r8)

0000027c <Board_Contactors_Set>:

void Board_Contactors_Set(bool close_contactors) {
     27c:	b510      	push	{r4, lr}
  High_Side_Contactor_Pin_Set(close_contactors);
     27e:	f001 fdb9 	bl	1df4 <High_Side_Contactor_Pin_Set>
}
     282:	bd10      	pop	{r4, pc}

00000284 <Board_Check_Faults>:

void Board_Check_Faults(CSB_INPUT_T *csb_input) {
     284:	b510      	push	{r4, lr}
     286:	0004      	movs	r4, r0
  csb_input->imd_fault = IMD_Pin_Get();
     288:	f001 fdba 	bl	1e00 <IMD_Pin_Get>
     28c:	75e0      	strb	r0, [r4, #23]
  csb_input->int_fault = Interlock_Pin_Get();
     28e:	f001 fdc9 	bl	1e24 <Interlock_Pin_Get>
     292:	7620      	strb	r0, [r4, #24]
  csb_input->bms_fault = BMS_Pin_Get();
     294:	f001 fdbc 	bl	1e10 <BMS_Pin_Get>
     298:	7660      	strb	r0, [r4, #25]
  csb_input->low_side_cntr_fault = Low_Side_Contactor_Pin_Get();
     29a:	f001 fda3 	bl	1de4 <Low_Side_Contactor_Pin_Get>
     29e:	76a0      	strb	r0, [r4, #26]
}
     2a0:	bd10      	pop	{r4, pc}
     2a2:	46c0      	nop			; (mov r8, r8)

000002a4 <handle_can_error>:

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
     2a4:	b570      	push	{r4, r5, r6, lr}
     2a6:	0004      	movs	r4, r0
     2a8:	000d      	movs	r5, r1
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
     2aa:	2801      	cmp	r0, #1
     2ac:	d949      	bls.n	342 <handle_can_error+0x9e>
        // Neither of these are real errors
        isResetting = false;
        return;
    }
    if (!isResetting) {
     2ae:	4b27      	ldr	r3, [pc, #156]	; (34c <handle_can_error+0xa8>)
     2b0:	781a      	ldrb	r2, [r3, #0]
     2b2:	2a00      	cmp	r2, #0
     2b4:	d009      	beq.n	2ca <handle_can_error+0x26>
        CAN_ResetPeripheral();
        Board_Can_Init(baud_rate);
        UNUSED(err);
    }

    switch(err) {
     2b6:	2c0f      	cmp	r4, #15
     2b8:	d806      	bhi.n	2c8 <handle_can_error+0x24>
     2ba:	4b25      	ldr	r3, [pc, #148]	; (350 <handle_can_error+0xac>)
     2bc:	00a4      	lsls	r4, r4, #2
     2be:	591b      	ldr	r3, [r3, r4]
     2c0:	469f      	mov	pc, r3
        break;
      case Can_Error_TX_BUFFER_FULL:
        Board_Println("Can_Error_TX_BUFFER_FULL");
        break;
      case Can_Error_RX_BUFFER_FULL:
        Board_Println("Can_Error_RX_BUFFER_FULL");
     2c2:	4824      	ldr	r0, [pc, #144]	; (354 <handle_can_error+0xb0>)
     2c4:	f7ff ff56 	bl	174 <Board_Println>
        break;
      case Can_Error_NONE:
      case Can_Error_NO_RX:
        break;
    }
}
     2c8:	bd70      	pop	{r4, r5, r6, pc}
        return;
    }
    if (!isResetting) {
        // We have an error, and should start a reset.
        // TODO change behavior depending on error type.
        isResetting = true;
     2ca:	3201      	adds	r2, #1
     2cc:	701a      	strb	r2, [r3, #0]
        CAN_ResetPeripheral();
     2ce:	f002 f8f3 	bl	24b8 <CAN_ResetPeripheral>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
     2d2:	0028      	movs	r0, r5
     2d4:	f002 fa6a 	bl	27ac <Can0_Csb_Init>
     2d8:	e7ed      	b.n	2b6 <handle_can_error+0x12>
        break;
      case Can_Error_UNRECOGNIZED_ERROR:
        Board_Println("Can_Error_UNRECOGNIZED_ERROR");
        break;
      case Can_Error_TX_BUFFER_FULL:
        Board_Println("Can_Error_TX_BUFFER_FULL");
     2da:	481f      	ldr	r0, [pc, #124]	; (358 <handle_can_error+0xb4>)
     2dc:	f7ff ff4a 	bl	174 <Board_Println>
        break;
     2e0:	e7f2      	b.n	2c8 <handle_can_error+0x24>
        UNUSED(err);
    }

    switch(err) {
      case Can_Error_EPASS:
        Board_Println("Can_Error_EPASS");
     2e2:	481e      	ldr	r0, [pc, #120]	; (35c <handle_can_error+0xb8>)
     2e4:	f7ff ff46 	bl	174 <Board_Println>
        break;
     2e8:	e7ee      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_CRC:
        Board_Println("Can_Error_CRC");
        break;
      case Can_Error_WARN:
        Board_Println("Can_Error_WARN");
     2ea:	481d      	ldr	r0, [pc, #116]	; (360 <handle_can_error+0xbc>)
     2ec:	f7ff ff42 	bl	174 <Board_Println>
        break;
     2f0:	e7ea      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_BOFF:
        Board_Println("Can_Error_BOFF");
     2f2:	481c      	ldr	r0, [pc, #112]	; (364 <handle_can_error+0xc0>)
     2f4:	f7ff ff3e 	bl	174 <Board_Println>
        break;
     2f8:	e7e6      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_STUF:
        Board_Println("Can_Error_STUF");
     2fa:	481b      	ldr	r0, [pc, #108]	; (368 <handle_can_error+0xc4>)
     2fc:	f7ff ff3a 	bl	174 <Board_Println>
        break;
     300:	e7e2      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_FORM:
        Board_Println("Can_Error_FORM");
     302:	481a      	ldr	r0, [pc, #104]	; (36c <handle_can_error+0xc8>)
     304:	f7ff ff36 	bl	174 <Board_Println>
        break;
     308:	e7de      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_ACK:
        Board_Println("Can_Error_ACK");
     30a:	4819      	ldr	r0, [pc, #100]	; (370 <handle_can_error+0xcc>)
     30c:	f7ff ff32 	bl	174 <Board_Println>
        break;
     310:	e7da      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_BIT1:
        Board_Println("Can_Error_BIT1");
     312:	4818      	ldr	r0, [pc, #96]	; (374 <handle_can_error+0xd0>)
     314:	f7ff ff2e 	bl	174 <Board_Println>
        break;
     318:	e7d6      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_BIT0:
        Board_Println("Can_Error_BIT0");
     31a:	4817      	ldr	r0, [pc, #92]	; (378 <handle_can_error+0xd4>)
     31c:	f7ff ff2a 	bl	174 <Board_Println>
        break;
     320:	e7d2      	b.n	2c8 <handle_can_error+0x24>
    switch(err) {
      case Can_Error_EPASS:
        Board_Println("Can_Error_EPASS");
        break;
      case Can_Error_CRC:
        Board_Println("Can_Error_CRC");
     322:	4816      	ldr	r0, [pc, #88]	; (37c <handle_can_error+0xd8>)
     324:	f7ff ff26 	bl	174 <Board_Println>
        break;
     328:	e7ce      	b.n	2c8 <handle_can_error+0x24>
        break;
      case Can_Error_BIT0:
        Board_Println("Can_Error_BIT0");
        break;
      case Can_Error_UNUSED:
        Board_Println("Can_Error_UNUSED");
     32a:	4815      	ldr	r0, [pc, #84]	; (380 <handle_can_error+0xdc>)
     32c:	f7ff ff22 	bl	174 <Board_Println>
        break;
     330:	e7ca      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_UNRECOGNIZED_MSGOBJ:
        Board_Println("Can_Error_UNRECOGNIZED_MSGOBJ");
     332:	4814      	ldr	r0, [pc, #80]	; (384 <handle_can_error+0xe0>)
     334:	f7ff ff1e 	bl	174 <Board_Println>
        break;
     338:	e7c6      	b.n	2c8 <handle_can_error+0x24>
      case Can_Error_UNRECOGNIZED_ERROR:
        Board_Println("Can_Error_UNRECOGNIZED_ERROR");
     33a:	4813      	ldr	r0, [pc, #76]	; (388 <handle_can_error+0xe4>)
     33c:	f7ff ff1a 	bl	174 <Board_Println>
        break;
     340:	e7c2      	b.n	2c8 <handle_can_error+0x24>
}

void handle_can_error(Can_ErrorID_T err, uint32_t baud_rate) {
    if (err == Can_Error_NONE || err == Can_Error_NO_RX) {
        // Neither of these are real errors
        isResetting = false;
     342:	2200      	movs	r2, #0
     344:	4b01      	ldr	r3, [pc, #4]	; (34c <handle_can_error+0xa8>)
     346:	701a      	strb	r2, [r3, #0]
        return;
     348:	e7be      	b.n	2c8 <handle_can_error+0x24>
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	100001f0 	.word	0x100001f0
     350:	00002ef0 	.word	0x00002ef0
     354:	00003038 	.word	0x00003038
     358:	0000301c 	.word	0x0000301c
     35c:	00002f38 	.word	0x00002f38
     360:	00002f58 	.word	0x00002f58
     364:	00002f68 	.word	0x00002f68
     368:	00002f78 	.word	0x00002f78
     36c:	00002f88 	.word	0x00002f88
     370:	00002f98 	.word	0x00002f98
     374:	00002fa8 	.word	0x00002fa8
     378:	00002fb8 	.word	0x00002fb8
     37c:	00002f48 	.word	0x00002f48
     380:	00002fc8 	.word	0x00002fc8
     384:	00002fdc 	.word	0x00002fdc
     388:	00002ffc 	.word	0x00002ffc

0000038c <Board_Can_ProcessInput>:
  Chip_UART_IntEnable(LPC_USART, UART_IER_RBRINT);
  NVIC_ClearPendingIRQ(UART0_IRQn);
  NVIC_EnableIRQ(UART0_IRQn);
}

void Board_Can_ProcessInput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state){
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	b084      	sub	sp, #16
     390:	0004      	movs	r4, r0
     392:	000d      	movs	r5, r1
  Can_MsgID_T msgType = Can_MsgType();
     394:	f002 fa1a 	bl	27cc <Can_MsgType>

  if (msgType == Can_No_Msg) {
     398:	2800      	cmp	r0, #0
     39a:	d00c      	beq.n	3b6 <Board_Can_ProcessInput+0x2a>
      // No message, so do nothing this round
      return;
  } else if (msgType == Can_Error_Msg) {
     39c:	2802      	cmp	r0, #2
     39e:	d03f      	beq.n	420 <Board_Can_ProcessInput+0x94>
      handle_can_error(err, csb_state->curr_baud_rate);
      return;
  }

  // We had a successful reception, so finish reset (if it's still happening)
  isResetting = false;
     3a0:	2200      	movs	r2, #0
     3a2:	4b30      	ldr	r3, [pc, #192]	; (464 <Board_Can_ProcessInput+0xd8>)
     3a4:	701a      	strb	r2, [r3, #0]

  if (msgType == Can_Unknown_Msg) {
     3a6:	2801      	cmp	r0, #1
     3a8:	d040      	beq.n	42c <Board_Can_ProcessInput+0xa0>
      Frame f;
      Can_Unknown_Read(&f);
  } else if (msgType == Can_ElconHeartbeat_Msg) {
     3aa:	2807      	cmp	r0, #7
     3ac:	d00c      	beq.n	3c8 <Board_Can_ProcessInput+0x3c>
      if (msg.output_current == 0) {
          csb_input->elcon_status->elcon_charging = false;
      } else {
          csb_input->elcon_status->elcon_charging = true;
      }
  } else if (msgType == Can_BmsPackStatus_Msg) {
     3ae:	2810      	cmp	r0, #16
     3b0:	d043      	beq.n	43a <Board_Can_ProcessInput+0xae>
      csb_input->pack_status->pack_current_mA = msg.pack_current;
      csb_input->pack_status->pack_voltage_mV= msg.pack_voltage;
      csb_input->balance_req = msg.balancing_needed;
      //TODO:check this maybe gotta check if the above read correctly from CAN extended
      csb_input->receive_bms_config = true;
  } else if (msgType == Can_BMSErrors_Msg) {
     3b2:	280b      	cmp	r0, #11
     3b4:	d001      	beq.n	3ba <Board_Can_ProcessInput+0x2e>
    Can_BMSErrors_Read(&msg);
    csb_input->bms_error = msg.type;
  } else {
      // note other errors
  }
}
     3b6:	b004      	add	sp, #16
     3b8:	bd70      	pop	{r4, r5, r6, pc}
      csb_input->balance_req = msg.balancing_needed;
      //TODO:check this maybe gotta check if the above read correctly from CAN extended
      csb_input->receive_bms_config = true;
  } else if (msgType == Can_BMSErrors_Msg) {
    Can_BMSErrors_T msg;
    Can_BMSErrors_Read(&msg);
     3ba:	4668      	mov	r0, sp
     3bc:	f002 fb04 	bl	29c8 <Can_BMSErrors_Read>
    csb_input->bms_error = msg.type;
     3c0:	466b      	mov	r3, sp
     3c2:	781b      	ldrb	r3, [r3, #0]
     3c4:	76e3      	strb	r3, [r4, #27]
     3c6:	e7f6      	b.n	3b6 <Board_Can_ProcessInput+0x2a>
  if (msgType == Can_Unknown_Msg) {
      Frame f;
      Can_Unknown_Read(&f);
  } else if (msgType == Can_ElconHeartbeat_Msg) {
      Can_ElconHeartbeat_T msg;
      Can_ElconHeartbeat_Read(&msg);
     3c8:	4668      	mov	r0, sp
     3ca:	f002 faeb 	bl	29a4 <Can_ElconHeartbeat_Read>
      csb_input->elcon_status->elcon_output_voltage = msg.output_voltage;
     3ce:	466a      	mov	r2, sp
     3d0:	6863      	ldr	r3, [r4, #4]
     3d2:	8852      	ldrh	r2, [r2, #2]
      csb_input->elcon_status->elcon_output_current = msg.output_current;
      csb_input->elcon_status->elcon_has_hardware_failure = msg.has_hardware_failure;
     3d4:	4669      	mov	r1, sp
      Frame f;
      Can_Unknown_Read(&f);
  } else if (msgType == Can_ElconHeartbeat_Msg) {
      Can_ElconHeartbeat_T msg;
      Can_ElconHeartbeat_Read(&msg);
      csb_input->elcon_status->elcon_output_voltage = msg.output_voltage;
     3d6:	801a      	strh	r2, [r3, #0]
      csb_input->elcon_status->elcon_output_current = msg.output_current;
     3d8:	466a      	mov	r2, sp
      csb_input->elcon_status->elcon_has_hardware_failure = msg.has_hardware_failure;
      csb_input->elcon_status->elcon_over_temp_protection_on = msg.over_temp_protection_on;
     3da:	4668      	mov	r0, sp
      csb_input->elcon_status->elcon_is_input_voltage_wrong = msg.is_input_voltage_wrong;
     3dc:	466c      	mov	r4, sp
      csb_input->elcon_status->elcon_battery_voltage_not_detected = msg.battery_voltage_not_detected;
     3de:	466d      	mov	r5, sp
      csb_input->elcon_status->elcon_is_comms_bad = msg.elcon_is_comms_bad;
     3e0:	466e      	mov	r6, sp
      Can_Unknown_Read(&f);
  } else if (msgType == Can_ElconHeartbeat_Msg) {
      Can_ElconHeartbeat_T msg;
      Can_ElconHeartbeat_Read(&msg);
      csb_input->elcon_status->elcon_output_voltage = msg.output_voltage;
      csb_input->elcon_status->elcon_output_current = msg.output_current;
     3e2:	8912      	ldrh	r2, [r2, #8]
      csb_input->elcon_status->elcon_has_hardware_failure = msg.has_hardware_failure;
     3e4:	7809      	ldrb	r1, [r1, #0]
      Can_Unknown_Read(&f);
  } else if (msgType == Can_ElconHeartbeat_Msg) {
      Can_ElconHeartbeat_T msg;
      Can_ElconHeartbeat_Read(&msg);
      csb_input->elcon_status->elcon_output_voltage = msg.output_voltage;
      csb_input->elcon_status->elcon_output_current = msg.output_current;
     3e6:	805a      	strh	r2, [r3, #2]
      csb_input->elcon_status->elcon_has_hardware_failure = msg.has_hardware_failure;
     3e8:	7119      	strb	r1, [r3, #4]
      csb_input->elcon_status->elcon_over_temp_protection_on = msg.over_temp_protection_on;
     3ea:	79c0      	ldrb	r0, [r0, #7]
     3ec:	7158      	strb	r0, [r3, #5]
      csb_input->elcon_status->elcon_is_input_voltage_wrong = msg.is_input_voltage_wrong;
     3ee:	7924      	ldrb	r4, [r4, #4]
     3f0:	719c      	strb	r4, [r3, #6]
      csb_input->elcon_status->elcon_battery_voltage_not_detected = msg.battery_voltage_not_detected;
     3f2:	79ad      	ldrb	r5, [r5, #6]
     3f4:	71dd      	strb	r5, [r3, #7]
      csb_input->elcon_status->elcon_is_comms_bad = msg.elcon_is_comms_bad;
     3f6:	7976      	ldrb	r6, [r6, #5]
     3f8:	721e      	strb	r6, [r3, #8]
      if (msg.has_hardware_failure || msg.over_temp_protection_on ||
     3fa:	2900      	cmp	r1, #0
     3fc:	d10a      	bne.n	414 <Board_Can_ProcessInput+0x88>
     3fe:	2800      	cmp	r0, #0
     400:	d108      	bne.n	414 <Board_Can_ProcessInput+0x88>
     402:	2c00      	cmp	r4, #0
     404:	d106      	bne.n	414 <Board_Can_ProcessInput+0x88>
          msg.is_input_voltage_wrong || msg.battery_voltage_not_detected ||
     406:	2d00      	cmp	r5, #0
     408:	d104      	bne.n	414 <Board_Can_ProcessInput+0x88>
     40a:	2e00      	cmp	r6, #0
     40c:	d102      	bne.n	414 <Board_Can_ProcessInput+0x88>
          msg.elcon_is_comms_bad) {
          csb_input->elcon_status->elcon_on = false;
      } else {
          csb_input->elcon_status->elcon_on = true;
     40e:	2101      	movs	r1, #1
     410:	7259      	strb	r1, [r3, #9]
     412:	e001      	b.n	418 <Board_Can_ProcessInput+0x8c>
      csb_input->elcon_status->elcon_battery_voltage_not_detected = msg.battery_voltage_not_detected;
      csb_input->elcon_status->elcon_is_comms_bad = msg.elcon_is_comms_bad;
      if (msg.has_hardware_failure || msg.over_temp_protection_on ||
          msg.is_input_voltage_wrong || msg.battery_voltage_not_detected ||
          msg.elcon_is_comms_bad) {
          csb_input->elcon_status->elcon_on = false;
     414:	2100      	movs	r1, #0
     416:	7259      	strb	r1, [r3, #9]
      } else {
          csb_input->elcon_status->elcon_on = true;
      }
      // TODO: create some sort of threshold
      if (msg.output_current == 0) {
     418:	2a00      	cmp	r2, #0
     41a:	d10b      	bne.n	434 <Board_Can_ProcessInput+0xa8>
          csb_input->elcon_status->elcon_charging = false;
      } else {
          csb_input->elcon_status->elcon_charging = true;
     41c:	729a      	strb	r2, [r3, #10]
     41e:	e7ca      	b.n	3b6 <Board_Can_ProcessInput+0x2a>

  if (msgType == Can_No_Msg) {
      // No message, so do nothing this round
      return;
  } else if (msgType == Can_Error_Msg) {
      Can_ErrorID_T err = Can_Error_Read();
     420:	f002 f9bc 	bl	279c <Can_Error_Read>
      handle_can_error(err, csb_state->curr_baud_rate);
     424:	68a9      	ldr	r1, [r5, #8]
     426:	f7ff ff3d 	bl	2a4 <handle_can_error>
      return;
     42a:	e7c4      	b.n	3b6 <Board_Can_ProcessInput+0x2a>
  // We had a successful reception, so finish reset (if it's still happening)
  isResetting = false;

  if (msgType == Can_Unknown_Msg) {
      Frame f;
      Can_Unknown_Read(&f);
     42c:	4668      	mov	r0, sp
     42e:	f002 f999 	bl	2764 <Can_Unknown_Read>
     432:	e7c0      	b.n	3b6 <Board_Can_ProcessInput+0x2a>
      }
      // TODO: create some sort of threshold
      if (msg.output_current == 0) {
          csb_input->elcon_status->elcon_charging = false;
      } else {
          csb_input->elcon_status->elcon_charging = true;
     434:	2201      	movs	r2, #1
     436:	729a      	strb	r2, [r3, #10]
     438:	e7bd      	b.n	3b6 <Board_Can_ProcessInput+0x2a>
      }
  } else if (msgType == Can_BmsPackStatus_Msg) {
      Can_BmsPackStatus_T msg;
      Can_BmsPackStatus_Read(&msg);
     43a:	4668      	mov	r0, sp
     43c:	f002 fae6 	bl	2a0c <Can_BmsPackStatus_Read>
      csb_input->pack_status->pack_cell_max_mV = msg.max_cell_voltage;
     440:	466a      	mov	r2, sp
     442:	6823      	ldr	r3, [r4, #0]
     444:	8852      	ldrh	r2, [r2, #2]
     446:	601a      	str	r2, [r3, #0]
      csb_input->pack_status->pack_current_mA = msg.pack_current;
     448:	466a      	mov	r2, sp
     44a:	2108      	movs	r1, #8
     44c:	5e52      	ldrsh	r2, [r2, r1]
     44e:	605a      	str	r2, [r3, #4]
      csb_input->pack_status->pack_voltage_mV= msg.pack_voltage;
     450:	466a      	mov	r2, sp
     452:	88d2      	ldrh	r2, [r2, #6]
     454:	609a      	str	r2, [r3, #8]
      csb_input->balance_req = msg.balancing_needed;
     456:	466b      	mov	r3, sp
     458:	781b      	ldrb	r3, [r3, #0]
     45a:	7563      	strb	r3, [r4, #21]
      //TODO:check this maybe gotta check if the above read correctly from CAN extended
      csb_input->receive_bms_config = true;
     45c:	2301      	movs	r3, #1
     45e:	7523      	strb	r3, [r4, #20]
     460:	e7a9      	b.n	3b6 <Board_Can_ProcessInput+0x2a>
     462:	46c0      	nop			; (mov r8, r8)
     464:	100001f0 	.word	0x100001f0

00000468 <Send_Elcon_Command>:
      last_csb_bms_mode_time = msTicks;
      Send_Bms_Mode(csb_state);
  }
}

void Send_Elcon_Command(CSB_OUTPUT_T *csb_output) {
     468:	b500      	push	{lr}
     46a:	b083      	sub	sp, #12
  Can_ElconCommand_T elcon_command;
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
     46c:	466b      	mov	r3, sp
     46e:	8802      	ldrh	r2, [r0, #0]
     470:	809a      	strh	r2, [r3, #4]
  elcon_command.max_current = csb_output->current_req_mA;
     472:	8882      	ldrh	r2, [r0, #4]
     474:	801a      	strh	r2, [r3, #0]
  elcon_command.control = csb_output->charger_on;
     476:	466a      	mov	r2, sp
     478:	7a83      	ldrb	r3, [r0, #10]

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
     47a:	4668      	mov	r0, sp

void Send_Elcon_Command(CSB_OUTPUT_T *csb_output) {
  Can_ElconCommand_T elcon_command;
  elcon_command.max_terminal_voltage = csb_output->voltage_req_mV;
  elcon_command.max_current = csb_output->current_req_mA;
  elcon_command.control = csb_output->charger_on;
     47c:	7093      	strb	r3, [r2, #2]

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
     47e:	f002 fad7 	bl	2a30 <Can_ElconCommand_Write>
     482:	4902      	ldr	r1, [pc, #8]	; (48c <Send_Elcon_Command+0x24>)
     484:	f7ff ff0e 	bl	2a4 <handle_can_error>
}
     488:	b003      	add	sp, #12
     48a:	bd00      	pop	{pc}
     48c:	0003d090 	.word	0x0003d090

00000490 <Send_Bms_Switch>:

void Send_Bms_Switch(void) {
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;
     490:	2301      	movs	r3, #1
  elcon_command.control = csb_output->charger_on;

  handle_can_error(Can_ElconCommand_Write(&elcon_command), CSB_CAN_BAUD);
}

void Send_Bms_Switch(void) {
     492:	b500      	push	{lr}
     494:	b083      	sub	sp, #12
  Can_BMS_CSB_Switch_T switch_msg;
  switch_msg.always_true = true;
     496:	a801      	add	r0, sp, #4
     498:	7003      	strb	r3, [r0, #0]

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
     49a:	f002 fa65 	bl	2968 <Can_BMS_CSB_Switch_Write>
     49e:	4902      	ldr	r1, [pc, #8]	; (4a8 <Send_Bms_Switch+0x18>)
     4a0:	f7ff ff00 	bl	2a4 <handle_can_error>
}
     4a4:	b003      	add	sp, #12
     4a6:	bd00      	pop	{pc}
     4a8:	0007a120 	.word	0x0007a120

000004ac <Send_Bms_Mode>:

void Send_Bms_Mode(CSB_STATE_T *csb_state) {
     4ac:	b500      	push	{lr}
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
     4ae:	7903      	ldrb	r3, [r0, #4]
  switch_msg.always_true = true;

  handle_can_error(Can_BMS_CSB_Switch_Write(&switch_msg), BMS_CAN_BAUD);
}

void Send_Bms_Mode(CSB_STATE_T *csb_state) {
     4b0:	b083      	sub	sp, #12
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
     4b2:	2b02      	cmp	r3, #2
     4b4:	d00f      	beq.n	4d6 <Send_Bms_Mode+0x2a>
     4b6:	2b03      	cmp	r3, #3
     4b8:	d009      	beq.n	4ce <Send_Bms_Mode+0x22>
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__BALANCE;
      break;
    case CSB_SSM_MODE_INIT:
    case CSB_SSM_MODE_IDLE:
    default:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__IDLE;
     4ba:	2302      	movs	r3, #2
     4bc:	a801      	add	r0, sp, #4
     4be:	7003      	strb	r3, [r0, #0]
      break;
  }

  handle_can_error(Can_BMS_Mode_Write(&mode_msg), CSB_CAN_BAUD);
     4c0:	f002 fada 	bl	2a78 <Can_BMS_Mode_Write>
     4c4:	4906      	ldr	r1, [pc, #24]	; (4e0 <Send_Bms_Mode+0x34>)
     4c6:	f7ff feed 	bl	2a4 <handle_can_error>
}
     4ca:	b003      	add	sp, #12
     4cc:	bd00      	pop	{pc}
  switch (csb_state->curr_mode) {
    case CSB_SSM_MODE_CHARGE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__CHARGE;
      break;
    case CSB_SSM_MODE_BALANCE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__BALANCE;
     4ce:	2301      	movs	r3, #1
     4d0:	a801      	add	r0, sp, #4
     4d2:	7003      	strb	r3, [r0, #0]
      break;
     4d4:	e7f4      	b.n	4c0 <Send_Bms_Mode+0x14>
void Send_Bms_Mode(CSB_STATE_T *csb_state) {
  Can_BMS_Mode_T mode_msg;

  switch (csb_state->curr_mode) {
    case CSB_SSM_MODE_CHARGE:
      mode_msg.requested_mode = ____BMS_MODE__REQUESTED_MODE__CHARGE;
     4d6:	2300      	movs	r3, #0
     4d8:	a801      	add	r0, sp, #4
     4da:	7003      	strb	r3, [r0, #0]
      break;
     4dc:	e7f0      	b.n	4c0 <Send_Bms_Mode+0x14>
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	0003d090 	.word	0x0003d090

000004e4 <Board_Can_ProcessOutput>:
  } else {
      // note other errors
  }
}

void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
     4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e6:	4647      	mov	r7, r8
     4e8:	0016      	movs	r6, r2
     4ea:	b480      	push	{r7}
  uint32_t msTicks = csb_input->msTicks;
  if ((csb_state->curr_mode == CSB_SSM_MODE_CHARGE) && (csb_state->charge_state == CSB_CHARGE_SWITCH_500) && (csb_state->curr_baud_rate == BMS_CAN_BAUD)){
     4ec:	684b      	ldr	r3, [r1, #4]
     4ee:	4f28      	ldr	r7, [pc, #160]	; (590 <Board_Can_ProcessOutput+0xac>)
     4f0:	4a28      	ldr	r2, [pc, #160]	; (594 <Board_Can_ProcessOutput+0xb0>)
  } else {
      // note other errors
  }
}

void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
     4f2:	000d      	movs	r5, r1
  uint32_t msTicks = csb_input->msTicks;
     4f4:	6904      	ldr	r4, [r0, #16]
  if ((csb_state->curr_mode == CSB_SSM_MODE_CHARGE) && (csb_state->charge_state == CSB_CHARGE_SWITCH_500) && (csb_state->curr_baud_rate == BMS_CAN_BAUD)){
     4f6:	403b      	ands	r3, r7
     4f8:	4293      	cmp	r3, r2
     4fa:	d032      	beq.n	562 <Board_Can_ProcessOutput+0x7e>
      CAN_ResetPeripheral();
      Board_Can_Init(BMS_CAN_BAUD);
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_CHARGE) && (csb_state->charge_state == CSB_CHARGE_SWITCH_250) && (csb_state->curr_baud_rate == CSB_CAN_BAUD)){
     4fc:	4a26      	ldr	r2, [pc, #152]	; (598 <Board_Can_ProcessOutput+0xb4>)
     4fe:	4293      	cmp	r3, r2
     500:	d020      	beq.n	544 <Board_Can_ProcessOutput+0x60>
      CAN_ResetPeripheral();
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
     502:	21fa      	movs	r1, #250	; 0xfa
     504:	4a25      	ldr	r2, [pc, #148]	; (59c <Board_Can_ProcessOutput+0xb8>)
     506:	0089      	lsls	r1, r1, #2
     508:	6813      	ldr	r3, [r2, #0]
     50a:	1ae3      	subs	r3, r4, r3
     50c:	428b      	cmp	r3, r1
     50e:	d902      	bls.n	516 <Board_Can_ProcessOutput+0x32>
     510:	792b      	ldrb	r3, [r5, #4]
     512:	2b00      	cmp	r3, #0
     514:	d136      	bne.n	584 <Board_Can_ProcessOutput+0xa0>
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
  }
  if (((msTicks - last_bms_switch_time) > INIT_SEND_TIME_MAX) && (csb_output->send_bms_config == true)) {
     516:	21fa      	movs	r1, #250	; 0xfa
     518:	4a21      	ldr	r2, [pc, #132]	; (5a0 <Board_Can_ProcessOutput+0xbc>)
     51a:	0049      	lsls	r1, r1, #1
     51c:	6813      	ldr	r3, [r2, #0]
     51e:	1ae3      	subs	r3, r4, r3
     520:	428b      	cmp	r3, r1
     522:	d902      	bls.n	52a <Board_Can_ProcessOutput+0x46>
     524:	7a33      	ldrb	r3, [r6, #8]
     526:	2b00      	cmp	r3, #0
     528:	d128      	bne.n	57c <Board_Can_ProcessOutput+0x98>
      last_bms_switch_time = msTicks;
      Send_Bms_Switch();
  }
  if ( ((msTicks - last_csb_bms_mode_time) > CSB_BMS_MODE_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)) {
     52a:	21fa      	movs	r1, #250	; 0xfa
     52c:	4a1d      	ldr	r2, [pc, #116]	; (5a4 <Board_Can_ProcessOutput+0xc0>)
     52e:	0089      	lsls	r1, r1, #2
     530:	6813      	ldr	r3, [r2, #0]
     532:	1ae3      	subs	r3, r4, r3
     534:	428b      	cmp	r3, r1
     536:	d902      	bls.n	53e <Board_Can_ProcessOutput+0x5a>
     538:	792b      	ldrb	r3, [r5, #4]
     53a:	2b00      	cmp	r3, #0
     53c:	d10c      	bne.n	558 <Board_Can_ProcessOutput+0x74>
      last_csb_bms_mode_time = msTicks;
      Send_Bms_Mode(csb_state);
  }
}
     53e:	bc04      	pop	{r2}
     540:	4690      	mov	r8, r2
     542:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t msTicks = csb_input->msTicks;
  if ((csb_state->curr_mode == CSB_SSM_MODE_CHARGE) && (csb_state->charge_state == CSB_CHARGE_SWITCH_500) && (csb_state->curr_baud_rate == BMS_CAN_BAUD)){
      CAN_ResetPeripheral();
      Board_Can_Init(BMS_CAN_BAUD);
  }
  if ((csb_state->curr_mode == CSB_SSM_MODE_CHARGE) && (csb_state->charge_state == CSB_CHARGE_SWITCH_250) && (csb_state->curr_baud_rate == CSB_CAN_BAUD)){
     544:	4b18      	ldr	r3, [pc, #96]	; (5a8 <Board_Can_ProcessOutput+0xc4>)
     546:	68af      	ldr	r7, [r5, #8]
     548:	429f      	cmp	r7, r3
     54a:	d1da      	bne.n	502 <Board_Can_ProcessOutput+0x1e>
      CAN_ResetPeripheral();
     54c:	f001 ffb4 	bl	24b8 <CAN_ResetPeripheral>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
     550:	0038      	movs	r0, r7
     552:	f002 f92b 	bl	27ac <Can0_Csb_Init>
     556:	e7d4      	b.n	502 <Board_Can_ProcessOutput+0x1e>
      last_bms_switch_time = msTicks;
      Send_Bms_Switch();
  }
  if ( ((msTicks - last_csb_bms_mode_time) > CSB_BMS_MODE_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)) {
      last_csb_bms_mode_time = msTicks;
      Send_Bms_Mode(csb_state);
     558:	0028      	movs	r0, r5
  if (((msTicks - last_bms_switch_time) > INIT_SEND_TIME_MAX) && (csb_output->send_bms_config == true)) {
      last_bms_switch_time = msTicks;
      Send_Bms_Switch();
  }
  if ( ((msTicks - last_csb_bms_mode_time) > CSB_BMS_MODE_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)) {
      last_csb_bms_mode_time = msTicks;
     55a:	6014      	str	r4, [r2, #0]
      Send_Bms_Mode(csb_state);
     55c:	f7ff ffa6 	bl	4ac <Send_Bms_Mode>
  }
}
     560:	e7ed      	b.n	53e <Board_Can_ProcessOutput+0x5a>
  }
}

void Board_Can_ProcessOutput(CSB_INPUT_T *csb_input, CSB_STATE_T *csb_state, CSB_OUTPUT_T *csb_output) {
  uint32_t msTicks = csb_input->msTicks;
  if ((csb_state->curr_mode == CSB_SSM_MODE_CHARGE) && (csb_state->charge_state == CSB_CHARGE_SWITCH_500) && (csb_state->curr_baud_rate == BMS_CAN_BAUD)){
     562:	688a      	ldr	r2, [r1, #8]
     564:	4b11      	ldr	r3, [pc, #68]	; (5ac <Board_Can_ProcessOutput+0xc8>)
     566:	4690      	mov	r8, r2
     568:	429a      	cmp	r2, r3
     56a:	d1ca      	bne.n	502 <Board_Can_ProcessOutput+0x1e>
      CAN_ResetPeripheral();
     56c:	f001 ffa4 	bl	24b8 <CAN_ResetPeripheral>
  uint32_t count = Board_Print_BLOCKING(str);
  return count + Board_Print_BLOCKING("\r\n");
}

void Board_Can_Init(uint32_t baud_rate) {
  Can0_Csb_Init(baud_rate);
     570:	4640      	mov	r0, r8
     572:	f002 f91b 	bl	27ac <Can0_Csb_Init>
     576:	686b      	ldr	r3, [r5, #4]
     578:	403b      	ands	r3, r7
     57a:	e7bf      	b.n	4fc <Board_Can_ProcessOutput+0x18>
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
  }
  if (((msTicks - last_bms_switch_time) > INIT_SEND_TIME_MAX) && (csb_output->send_bms_config == true)) {
      last_bms_switch_time = msTicks;
     57c:	6014      	str	r4, [r2, #0]
      Send_Bms_Switch();
     57e:	f7ff ff87 	bl	490 <Send_Bms_Switch>
     582:	e7d2      	b.n	52a <Board_Can_ProcessOutput+0x46>
      CAN_ResetPeripheral();
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
      Send_Elcon_Command(csb_output);
     584:	0030      	movs	r0, r6
  if ((csb_state->curr_mode == CSB_SSM_MODE_CHARGE) && (csb_state->charge_state == CSB_CHARGE_SWITCH_250) && (csb_state->curr_baud_rate == CSB_CAN_BAUD)){
      CAN_ResetPeripheral();
      Board_Can_Init(CSB_CAN_BAUD);
  }
  if ( ((msTicks - last_csb_elcon_command_time) > CSB_ELCON_COMMAND_PERIOD) && (csb_state->curr_mode != CSB_SSM_MODE_INIT)){
      last_csb_elcon_command_time = msTicks;
     586:	6014      	str	r4, [r2, #0]
      Send_Elcon_Command(csb_output);
     588:	f7ff ff6e 	bl	468 <Send_Elcon_Command>
     58c:	e7c3      	b.n	516 <Board_Can_ProcessOutput+0x32>
     58e:	46c0      	nop			; (mov r8, r8)
     590:	00ff00ff 	.word	0x00ff00ff
     594:	00020002 	.word	0x00020002
     598:	00040002 	.word	0x00040002
     59c:	10000170 	.word	0x10000170
     5a0:	1000016c 	.word	0x1000016c
     5a4:	10000188 	.word	0x10000188
     5a8:	0003d090 	.word	0x0003d090
     5ac:	0007a120 	.word	0x0007a120

000005b0 <Charge_Init>:
static uint32_t last_init_switch_start_time;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state) {
    state->charge_state = CSB_CHARGE_OFF;
     5b0:	2300      	movs	r3, #0
    last_time_above_cv_min_curr = 0;
     5b2:	4a02      	ldr	r2, [pc, #8]	; (5bc <Charge_Init+0xc>)
static uint32_t last_init_switch_start_time;

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output);

void Charge_Init(CSB_STATE_T *state) {
    state->charge_state = CSB_CHARGE_OFF;
     5b4:	7183      	strb	r3, [r0, #6]
    last_time_above_cv_min_curr = 0;
     5b6:	6013      	str	r3, [r2, #0]
    Charge_Config(state);
}
     5b8:	4770      	bx	lr
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	1000020c 	.word	0x1000020c

000005c0 <Charge_Step>:

void Charge_Config(CSB_STATE_T *state) {
    //TODO:power limit stuff?
}

void Charge_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
     5c0:	b570      	push	{r4, r5, r6, lr}

    switch (input->mode_request) {
     5c2:	7a03      	ldrb	r3, [r0, #8]
     5c4:	2b02      	cmp	r3, #2
     5c6:	d03c      	beq.n	642 <Charge_Step+0x82>
     5c8:	2b03      	cmp	r3, #3
     5ca:	d01c      	beq.n	606 <Charge_Step+0x46>
     5cc:	2b01      	cmp	r3, #1
     5ce:	d006      	beq.n	5de <Charge_Step+0x1e>
     5d0:	798c      	ldrb	r4, [r1, #6]
        default:
            // no request do nothing
            break;
    }

    switch (state->charge_state) {
     5d2:	2c0b      	cmp	r4, #11
     5d4:	d816      	bhi.n	604 <Charge_Step+0x44>
     5d6:	4db6      	ldr	r5, [pc, #728]	; (8b0 <Charge_Step+0x2f0>)
     5d8:	00a4      	lsls	r4, r4, #2
     5da:	592c      	ldr	r4, [r5, r4]
     5dc:	46a7      	mov	pc, r4
                }
            }
            break;

        case CSB_SSM_MODE_IDLE:
            if(state->charge_state == CSB_CHARGE_OFF) {
     5de:	798b      	ldrb	r3, [r1, #6]
     5e0:	2b00      	cmp	r3, #0
     5e2:	d067      	beq.n	6b4 <Charge_Step+0xf4>
                state->charge_state = CSB_CHARGE_OFF;
            } else {
                state->charge_state = CSB_CHARGE_DONE;
     5e4:	230b      	movs	r3, #11
     5e6:	718b      	strb	r3, [r1, #6]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     5e8:	2300      	movs	r3, #0
     5ea:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     5ec:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     5ee:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     5f0:	6053      	str	r3, [r2, #4]
            // if mode request is idle, that means SSM is trying to switch to another mode so wait for contactors to close
            // if in charge or balance, make sure we don't need to go back to charge or balance
            //    if we do, go back to init
            //    otherwise finish
            if (input->mode_request == CSB_SSM_MODE_IDLE) {
                if (!input->contactors_closed && !input->elcon_status->elcon_charging) {
     5f2:	7d83      	ldrb	r3, [r0, #22]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d105      	bne.n	604 <Charge_Step+0x44>
     5f8:	6843      	ldr	r3, [r0, #4]
     5fa:	7a9b      	ldrb	r3, [r3, #10]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d101      	bne.n	604 <Charge_Step+0x44>
                    state->charge_state = CSB_CHARGE_OFF;
     600:	2300      	movs	r3, #0
     602:	718b      	strb	r3, [r1, #6]
            if (!input->low_side_cntr_fault && input->elcon_status->elcon_on) {
                state->charge_state = CSB_CHARGE_CLOSE_CNTR;
            }
            break;
    }
}
     604:	bd70      	pop	{r4, r5, r6, pc}
                }
            }
            break;

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
     606:	798c      	ldrb	r4, [r1, #6]
     608:	2c00      	cmp	r4, #0
     60a:	d145      	bne.n	698 <Charge_Step+0xd8>
                    || state->charge_state == CSB_CHARGE_CC
                    || state->charge_state == CSB_CHARGE_CV) {
                switch (state->pack_config->bms_comm) {
     60c:	2344      	movs	r3, #68	; 0x44
     60e:	680c      	ldr	r4, [r1, #0]
     610:	5ce3      	ldrb	r3, [r4, r3]
     612:	2b00      	cmp	r3, #0
     614:	d11d      	bne.n	652 <Charge_Step+0x92>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     616:	2300      	movs	r3, #0
     618:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     61a:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     61c:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     61e:	6053      	str	r3, [r2, #4]
                    state->charge_state =
                        (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) ? CSB_CHARGE_CC : CSB_CHARGE_CV;
                }
            } else if (input->mode_request == CSB_SSM_MODE_BALANCE) {
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_BAL;
     620:	3309      	adds	r3, #9
     622:	718b      	strb	r3, [r1, #6]
            }

            if(!input->contactors_closed) {
                _set_output(true, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_CLOSE_CNTR;
            } else if (input->low_side_cntr_fault && !input->elcon_status->elcon_on) {
     624:	7e83      	ldrb	r3, [r0, #26]
     626:	2b00      	cmp	r3, #0
     628:	d0ec      	beq.n	604 <Charge_Step+0x44>
     62a:	6843      	ldr	r3, [r0, #4]
     62c:	7a5b      	ldrb	r3, [r3, #9]
     62e:	2b00      	cmp	r3, #0
     630:	d1e8      	bne.n	604 <Charge_Step+0x44>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     632:	2300      	movs	r3, #0
     634:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     636:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     638:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     63a:	6053      	str	r3, [r2, #4]
                state->charge_state = CSB_CHARGE_BAL;
            }

            if (input->low_side_cntr_fault && !input->elcon_status->elcon_on) {
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_FAULT;
     63c:	330a      	adds	r3, #10
     63e:	718b      	strb	r3, [r1, #6]
     640:	e7e0      	b.n	604 <Charge_Step+0x44>

void Charge_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {

    switch (input->mode_request) {
        case CSB_SSM_MODE_CHARGE:
            if (state->charge_state == CSB_CHARGE_OFF
     642:	798c      	ldrb	r4, [r1, #6]
     644:	2c00      	cmp	r4, #0
     646:	d10e      	bne.n	666 <Charge_Step+0xa6>
                    || state->charge_state == CSB_CHARGE_BAL) {
                switch (state->pack_config->bms_comm) {
     648:	2344      	movs	r3, #68	; 0x44
     64a:	680c      	ldr	r4, [r1, #0]
     64c:	5ce3      	ldrb	r3, [r4, r3]
     64e:	2b00      	cmp	r3, #0
     650:	d07d      	beq.n	74e <Charge_Step+0x18e>

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_CC
                    || state->charge_state == CSB_CHARGE_CV) {
                switch (state->pack_config->bms_comm) {
     652:	2b01      	cmp	r3, #1
     654:	d12e      	bne.n	6b4 <Charge_Step+0xf4>
    switch (state->charge_state) {
        case CSB_CHARGE_OFF:
            _set_output(false, false, 0, 0, output);
            break;
        case CSB_CHARGE_START_SWITCH:
            output->send_bms_config = false;
     656:	2300      	movs	r3, #0
                output->send_bms_config = false;
                state->charge_state = CSB_CHARGE_CLOSE_CNTR;
                state->curr_baud_rate = CSB_CAN_BAUD;
                input->receive_bms_config = false;
            } else if ( (msTicks - last_init_wait_start_time) > INIT_WAIT_TIME_MAX) {
                output->send_bms_config = false;
     658:	7213      	strb	r3, [r2, #8]
                state->charge_state = CSB_CHARGE_SWITCH_500;
     65a:	2202      	movs	r2, #2
     65c:	718a      	strb	r2, [r1, #6]
                state->curr_baud_rate = BMS_CAN_BAUD;
     65e:	4a95      	ldr	r2, [pc, #596]	; (8b4 <Charge_Step+0x2f4>)
     660:	608a      	str	r2, [r1, #8]
                input->receive_bms_config = false;
     662:	7503      	strb	r3, [r0, #20]
     664:	e7ce      	b.n	604 <Charge_Step+0x44>
void Charge_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {

    switch (input->mode_request) {
        case CSB_SSM_MODE_CHARGE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_BAL) {
     666:	2c09      	cmp	r4, #9
     668:	d1b3      	bne.n	5d2 <Charge_Step+0x12>
                switch (state->pack_config->bms_comm) {
     66a:	2344      	movs	r3, #68	; 0x44
     66c:	680c      	ldr	r4, [r1, #0]
     66e:	5ce3      	ldrb	r3, [r4, r3]
     670:	2b00      	cmp	r3, #0
     672:	d06c      	beq.n	74e <Charge_Step+0x18e>
     674:	2b01      	cmp	r3, #1
     676:	d0ee      	beq.n	656 <Charge_Step+0x96>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     678:	2300      	movs	r3, #0
     67a:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     67c:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     67e:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     680:	6053      	str	r3, [r2, #4]
            break;
        case CSB_CHARGE_BAL:
            _set_output(false, false, 0, 0, output);

            // Done balancing
            if (!input->balance_req) {
     682:	7d43      	ldrb	r3, [r0, #21]
     684:	2b00      	cmp	r3, #0
     686:	d101      	bne.n	68c <Charge_Step+0xcc>
                state->charge_state = CSB_CHARGE_DONE;
     688:	330b      	adds	r3, #11
     68a:	718b      	strb	r3, [r1, #6]
            }

            if(input->contactors_closed) {
     68c:	7d83      	ldrb	r3, [r0, #22]
     68e:	2b00      	cmp	r3, #0
     690:	d0b8      	beq.n	604 <Charge_Step+0x44>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     692:	2300      	movs	r3, #0
     694:	7253      	strb	r3, [r2, #9]
     696:	e094      	b.n	7c2 <Charge_Step+0x202>
            }
            break;

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_CC
     698:	2c07      	cmp	r4, #7
     69a:	d100      	bne.n	69e <Charge_Step+0xde>
     69c:	e0df      	b.n	85e <Charge_Step+0x29e>
                    || state->charge_state == CSB_CHARGE_CV) {
     69e:	2c08      	cmp	r4, #8
     6a0:	d197      	bne.n	5d2 <Charge_Step+0x12>
                switch (state->pack_config->bms_comm) {
     6a2:	2444      	movs	r4, #68	; 0x44
     6a4:	680b      	ldr	r3, [r1, #0]
     6a6:	5d1c      	ldrb	r4, [r3, r4]
     6a8:	2c00      	cmp	r4, #0
     6aa:	d0b4      	beq.n	616 <Charge_Step+0x56>
     6ac:	2c01      	cmp	r4, #1
     6ae:	d000      	beq.n	6b2 <Charge_Step+0xf2>
     6b0:	e08e      	b.n	7d0 <Charge_Step+0x210>
     6b2:	e7d0      	b.n	656 <Charge_Step+0x96>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     6b4:	2300      	movs	r3, #0
     6b6:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     6b8:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     6ba:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     6bc:	6053      	str	r3, [r2, #4]
     6be:	e7a1      	b.n	604 <Charge_Step+0x44>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     6c0:	2300      	movs	r3, #0
     6c2:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     6c4:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     6c6:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     6c8:	6053      	str	r3, [r2, #4]
            }
            break;
        case CSB_CHARGE_FAULT:
            _set_output(false, false, 0, 0, output);

            if (!input->low_side_cntr_fault && input->elcon_status->elcon_on) {
     6ca:	7e83      	ldrb	r3, [r0, #26]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d199      	bne.n	604 <Charge_Step+0x44>
     6d0:	6843      	ldr	r3, [r0, #4]
     6d2:	7a5b      	ldrb	r3, [r3, #9]
     6d4:	2b00      	cmp	r3, #0
     6d6:	d095      	beq.n	604 <Charge_Step+0x44>
                    state->charge_state = CSB_CHARGE_OFF;
                }
            } else {
                if(state->curr_mode == CSB_SSM_MODE_CHARGE) {
                    if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                        state->charge_state = CSB_CHARGE_CLOSE_CNTR;
     6d8:	2306      	movs	r3, #6
     6da:	718b      	strb	r3, [r1, #6]
     6dc:	e792      	b.n	604 <Charge_Step+0x44>
            state->charge_state = CSB_CHARGE_SWITCH_500;
            state->curr_baud_rate = BMS_CAN_BAUD;
            input->receive_bms_config = false;
            break;
        case CSB_CHARGE_SWITCH_500:
            output->send_bms_config = true;
     6de:	2301      	movs	r3, #1
     6e0:	7213      	strb	r3, [r2, #8]
            state->charge_state = CSB_CHARGE_SEND_500;
     6e2:	3302      	adds	r3, #2
     6e4:	718b      	strb	r3, [r1, #6]
            state->curr_baud_rate = BMS_CAN_BAUD;
     6e6:	4b73      	ldr	r3, [pc, #460]	; (8b4 <Charge_Step+0x2f4>)
     6e8:	608b      	str	r3, [r1, #8]
            input->receive_bms_config = false;
     6ea:	2300      	movs	r3, #0
     6ec:	7503      	strb	r3, [r0, #20]
            last_init_switch_start_time = msTicks;
     6ee:	4b72      	ldr	r3, [pc, #456]	; (8b8 <Charge_Step+0x2f8>)
     6f0:	681a      	ldr	r2, [r3, #0]
     6f2:	4b72      	ldr	r3, [pc, #456]	; (8bc <Charge_Step+0x2fc>)
     6f4:	601a      	str	r2, [r3, #0]
            break;
     6f6:	e785      	b.n	604 <Charge_Step+0x44>
            state->curr_baud_rate = CSB_CAN_BAUD;
            input->receive_bms_config = false;
            last_init_wait_start_time = msTicks;
            break;
        case CSB_CHARGE_WAIT_250:
            if(input->receive_bms_config) {
     6f8:	7d03      	ldrb	r3, [r0, #20]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d17c      	bne.n	7f8 <Charge_Step+0x238>
                output->send_bms_config = false;
                state->charge_state = CSB_CHARGE_CLOSE_CNTR;
                state->curr_baud_rate = CSB_CAN_BAUD;
                input->receive_bms_config = false;
            } else if ( (msTicks - last_init_wait_start_time) > INIT_WAIT_TIME_MAX) {
     6fe:	4c6e      	ldr	r4, [pc, #440]	; (8b8 <Charge_Step+0x2f8>)
     700:	4d6f      	ldr	r5, [pc, #444]	; (8c0 <Charge_Step+0x300>)
     702:	6824      	ldr	r4, [r4, #0]
     704:	682d      	ldr	r5, [r5, #0]
     706:	1b64      	subs	r4, r4, r5
     708:	4d6e      	ldr	r5, [pc, #440]	; (8c4 <Charge_Step+0x304>)
     70a:	42ac      	cmp	r4, r5
     70c:	d800      	bhi.n	710 <Charge_Step+0x150>
     70e:	e779      	b.n	604 <Charge_Step+0x44>
     710:	e7a2      	b.n	658 <Charge_Step+0x98>
              state->curr_baud_rate = CSB_CAN_BAUD;
              input->receive_bms_config = false;
            }
            break;
        case CSB_CHARGE_SWITCH_250:
            output->send_bms_config = false;
     712:	2300      	movs	r3, #0
     714:	7213      	strb	r3, [r2, #8]
            state->charge_state = CSB_CHARGE_WAIT_250;
     716:	2205      	movs	r2, #5
     718:	718a      	strb	r2, [r1, #6]
            state->curr_baud_rate = CSB_CAN_BAUD;
     71a:	4a6b      	ldr	r2, [pc, #428]	; (8c8 <Charge_Step+0x308>)
     71c:	608a      	str	r2, [r1, #8]
            input->receive_bms_config = false;
     71e:	7503      	strb	r3, [r0, #20]
            last_init_wait_start_time = msTicks;
     720:	4b65      	ldr	r3, [pc, #404]	; (8b8 <Charge_Step+0x2f8>)
     722:	681a      	ldr	r2, [r3, #0]
     724:	4b66      	ldr	r3, [pc, #408]	; (8c0 <Charge_Step+0x300>)
     726:	601a      	str	r2, [r3, #0]
            break;
     728:	e76c      	b.n	604 <Charge_Step+0x44>
            state->curr_baud_rate = BMS_CAN_BAUD;
            input->receive_bms_config = false;
            last_init_switch_start_time = msTicks;
            break;
        case CSB_CHARGE_SEND_500:
            if ( (msTicks - last_init_switch_start_time) > INIT_SEND_TIME_MAX) {
     72a:	4b63      	ldr	r3, [pc, #396]	; (8b8 <Charge_Step+0x2f8>)
     72c:	4c63      	ldr	r4, [pc, #396]	; (8bc <Charge_Step+0x2fc>)
     72e:	681b      	ldr	r3, [r3, #0]
     730:	6824      	ldr	r4, [r4, #0]
     732:	1b1b      	subs	r3, r3, r4
     734:	24fa      	movs	r4, #250	; 0xfa
     736:	0064      	lsls	r4, r4, #1
     738:	42a3      	cmp	r3, r4
     73a:	d800      	bhi.n	73e <Charge_Step+0x17e>
     73c:	e762      	b.n	604 <Charge_Step+0x44>
              output->send_bms_config = false;
     73e:	2300      	movs	r3, #0
     740:	7213      	strb	r3, [r2, #8]
              state->charge_state = CSB_CHARGE_SWITCH_250;
     742:	2204      	movs	r2, #4
     744:	718a      	strb	r2, [r1, #6]
              state->curr_baud_rate = CSB_CAN_BAUD;
     746:	4a60      	ldr	r2, [pc, #384]	; (8c8 <Charge_Step+0x308>)
     748:	608a      	str	r2, [r1, #8]
              input->receive_bms_config = false;
     74a:	7503      	strb	r3, [r0, #20]
     74c:	e75a      	b.n	604 <Charge_Step+0x44>
        case CSB_SSM_MODE_CHARGE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_BAL) {
                switch (state->pack_config->bms_comm) {
                  case BMS_NO_COMM:
                      state->charge_state = CSB_CHARGE_CLOSE_CNTR;
     74e:	2306      	movs	r3, #6
     750:	718b      	strb	r3, [r1, #6]
                state->curr_baud_rate = BMS_CAN_BAUD;
                input->receive_bms_config = false;
            }
            break;
        case CSB_CHARGE_CLOSE_CNTR:
            if (input->mode_request == CSB_SSM_MODE_CHARGE && input->low_side_cntr_fault == false) { //if in charge mode and there is no fault
     752:	7e83      	ldrb	r3, [r0, #26]
     754:	2b00      	cmp	r3, #0
     756:	d000      	beq.n	75a <Charge_Step+0x19a>
     758:	e767      	b.n	62a <Charge_Step+0x6a>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     75a:	2401      	movs	r4, #1
    output->charger_on = charger_on;
     75c:	7293      	strb	r3, [r2, #10]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     75e:	7254      	strb	r4, [r2, #9]
    output->charger_on = charger_on;
    output->voltage_req_mV = charge_voltage_mV;
     760:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     762:	6053      	str	r3, [r2, #4]
            break;
        case CSB_CHARGE_CLOSE_CNTR:
            if (input->mode_request == CSB_SSM_MODE_CHARGE && input->low_side_cntr_fault == false) { //if in charge mode and there is no fault
                _set_output(true, false, 0, 0, output); //close contactors

                if (input->contactors_closed == true) { //if contactors are closed
     764:	7d82      	ldrb	r2, [r0, #22]
     766:	2a00      	cmp	r2, #0
     768:	d100      	bne.n	76c <Charge_Step+0x1ac>
     76a:	e74b      	b.n	604 <Charge_Step+0x44>
                    state->charge_state =
                        (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) ? CSB_CHARGE_CC : CSB_CHARGE_CV;
     76c:	6800      	ldr	r0, [r0, #0]
     76e:	680a      	ldr	r2, [r1, #0]
        case CSB_CHARGE_CLOSE_CNTR:
            if (input->mode_request == CSB_SSM_MODE_CHARGE && input->low_side_cntr_fault == false) { //if in charge mode and there is no fault
                _set_output(true, false, 0, 0, output); //close contactors

                if (input->contactors_closed == true) { //if contactors are closed
                    state->charge_state =
     770:	6800      	ldr	r0, [r0, #0]
     772:	6852      	ldr	r2, [r2, #4]
     774:	4290      	cmp	r0, r2
     776:	415b      	adcs	r3, r3
     778:	3307      	adds	r3, #7
     77a:	718b      	strb	r3, [r1, #6]
     77c:	e742      	b.n	604 <Charge_Step+0x44>
     77e:	680b      	ldr	r3, [r1, #0]
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_FAULT;
            }
            break;
        case CSB_CHARGE_CC:
            if (input->pack_status->pack_cell_max_mV >= state->pack_config->cell_max_mV) {
     780:	6804      	ldr	r4, [r0, #0]
     782:	685d      	ldr	r5, [r3, #4]
     784:	6824      	ldr	r4, [r4, #0]
     786:	42ac      	cmp	r4, r5
     788:	d33e      	bcc.n	808 <Charge_Step+0x248>
                state->charge_state = CSB_CHARGE_CV; // Need to go to CV Mode
     78a:	2408      	movs	r4, #8
     78c:	718c      	strb	r4, [r1, #6]
                _set_output(true, true, state->pack_config->cv_charge_voltage_mV, state->pack_config->cv_charge_current_mA, output);
     78e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
     790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     792:	6014      	str	r4, [r2, #0]
     794:	6053      	str	r3, [r2, #4]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     796:	2301      	movs	r3, #1
     798:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     79a:	7293      	strb	r3, [r2, #10]
            } else {
                // Charge in CC Mode
                _set_output(true, true, state->pack_config->cc_charge_voltage_mV, state->pack_config->cc_charge_current_mA, output); //know that this is not immediate
            }

            if (input->low_side_cntr_fault && !input->elcon_status->elcon_on) {
     79c:	7e83      	ldrb	r3, [r0, #26]
     79e:	2b00      	cmp	r3, #0
     7a0:	d004      	beq.n	7ac <Charge_Step+0x1ec>
     7a2:	6843      	ldr	r3, [r0, #4]
     7a4:	7a5b      	ldrb	r3, [r3, #9]
     7a6:	2b00      	cmp	r3, #0
     7a8:	d100      	bne.n	7ac <Charge_Step+0x1ec>
     7aa:	e742      	b.n	632 <Charge_Step+0x72>
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_FAULT;
            } else if (!input->contactors_closed || !input->elcon_status->elcon_charging) {
     7ac:	7d83      	ldrb	r3, [r0, #22]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d004      	beq.n	7bc <Charge_Step+0x1fc>
     7b2:	6843      	ldr	r3, [r0, #4]
     7b4:	7a9b      	ldrb	r3, [r3, #10]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d000      	beq.n	7bc <Charge_Step+0x1fc>
     7ba:	e723      	b.n	604 <Charge_Step+0x44>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     7bc:	2301      	movs	r3, #1
     7be:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     7c0:	2300      	movs	r3, #0
     7c2:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     7c4:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     7c6:	6053      	str	r3, [r2, #4]
                state->charge_state = CSB_CHARGE_DONE;
            }

            if(input->contactors_closed) {
                _set_output(false, false, 0, 0, output);
                state->charge_state = CSB_CHARGE_CLOSE_CNTR;
     7c8:	3306      	adds	r3, #6
     7ca:	718b      	strb	r3, [r1, #6]
     7cc:	e71a      	b.n	604 <Charge_Step+0x44>
     7ce:	680b      	ldr	r3, [r1, #0]
                state->charge_state = CSB_CHARGE_CLOSE_CNTR;
            }
            break;
        case CSB_CHARGE_CV:

            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
     7d0:	6804      	ldr	r4, [r0, #0]
     7d2:	6825      	ldr	r5, [r4, #0]
     7d4:	002e      	movs	r6, r5
     7d6:	685d      	ldr	r5, [r3, #4]
     7d8:	42ae      	cmp	r6, r5
     7da:	d21d      	bcs.n	818 <Charge_Step+0x258>
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
     7dc:	2407      	movs	r4, #7
     7de:	718c      	strb	r4, [r1, #6]
                _set_output(true, true, state->pack_config->cc_charge_voltage_mV, state->pack_config->cc_charge_current_mA, output);
     7e0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
     7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     7e4:	6014      	str	r4, [r2, #0]
     7e6:	6053      	str	r3, [r2, #4]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     7e8:	2301      	movs	r3, #1
     7ea:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     7ec:	7293      	strb	r3, [r2, #10]
                } else {
                    last_time_above_cv_min_curr = input->msTicks;
                }
            }

            if(!input->contactors_closed) {
     7ee:	7d83      	ldrb	r3, [r0, #22]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d000      	beq.n	7f6 <Charge_Step+0x236>
     7f4:	e716      	b.n	624 <Charge_Step+0x64>
     7f6:	e7e1      	b.n	7bc <Charge_Step+0x1fc>
            input->receive_bms_config = false;
            last_init_wait_start_time = msTicks;
            break;
        case CSB_CHARGE_WAIT_250:
            if(input->receive_bms_config) {
                output->send_bms_config = false;
     7f8:	2300      	movs	r3, #0
     7fa:	7213      	strb	r3, [r2, #8]
                state->charge_state = CSB_CHARGE_CLOSE_CNTR;
     7fc:	2206      	movs	r2, #6
     7fe:	718a      	strb	r2, [r1, #6]
                state->curr_baud_rate = CSB_CAN_BAUD;
     800:	4a31      	ldr	r2, [pc, #196]	; (8c8 <Charge_Step+0x308>)
     802:	608a      	str	r2, [r1, #8]
                input->receive_bms_config = false;
     804:	7503      	strb	r3, [r0, #20]
     806:	e6fd      	b.n	604 <Charge_Step+0x44>
            if (input->pack_status->pack_cell_max_mV >= state->pack_config->cell_max_mV) {
                state->charge_state = CSB_CHARGE_CV; // Need to go to CV Mode
                _set_output(true, true, state->pack_config->cv_charge_voltage_mV, state->pack_config->cv_charge_current_mA, output);
            } else {
                // Charge in CC Mode
                _set_output(true, true, state->pack_config->cc_charge_voltage_mV, state->pack_config->cc_charge_current_mA, output); //know that this is not immediate
     808:	6b5c      	ldr	r4, [r3, #52]	; 0x34
     80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     80c:	6014      	str	r4, [r2, #0]
     80e:	6053      	str	r3, [r2, #4]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     810:	2301      	movs	r3, #1
     812:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     814:	7293      	strb	r3, [r2, #10]
     816:	e7c1      	b.n	79c <Charge_Step+0x1dc>
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, state->pack_config->cc_charge_voltage_mV, state->pack_config->cc_charge_current_mA, output);
            } else {
                _set_output(true, true, state->pack_config->cv_charge_voltage_mV, state->pack_config->cv_charge_current_mA, output);
     818:	6bdd      	ldr	r5, [r3, #60]	; 0x3c

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     81a:	6a1e      	ldr	r6, [r3, #32]
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, state->pack_config->cc_charge_voltage_mV, state->pack_config->cc_charge_current_mA, output);
            } else {
                _set_output(true, true, state->pack_config->cv_charge_voltage_mV, state->pack_config->cv_charge_current_mA, output);
     81c:	6015      	str	r5, [r2, #0]
     81e:	6c1d      	ldr	r5, [r3, #64]	; 0x40

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     820:	6864      	ldr	r4, [r4, #4]
            if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                // Need to go back to CC Mode
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, state->pack_config->cc_charge_voltage_mV, state->pack_config->cc_charge_current_mA, output);
            } else {
                _set_output(true, true, state->pack_config->cv_charge_voltage_mV, state->pack_config->cv_charge_current_mA, output);
     822:	6055      	str	r5, [r2, #4]
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     824:	2501      	movs	r5, #1
     826:	7255      	strb	r5, [r2, #9]
    output->charger_on = charger_on;
     828:	7295      	strb	r5, [r2, #10]
                state->charge_state = CSB_CHARGE_CC;
                _set_output(true, true, state->pack_config->cc_charge_voltage_mV, state->pack_config->cc_charge_current_mA, output);
            } else {
                _set_output(true, true, state->pack_config->cv_charge_voltage_mV, state->pack_config->cv_charge_current_mA, output);

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
     82a:	69dd      	ldr	r5, [r3, #28]
     82c:	4375      	muls	r5, r6
     82e:	42ac      	cmp	r4, r5
     830:	d21e      	bcs.n	870 <Charge_Step+0x2b0>
                    //so after your under this threshold for some time you are allowed to be done
                    if ((input->msTicks - last_time_above_cv_min_curr) >= state->pack_config->cv_min_current_ms) {
     832:	4c26      	ldr	r4, [pc, #152]	; (8cc <Charge_Step+0x30c>)
     834:	6905      	ldr	r5, [r0, #16]
     836:	6824      	ldr	r4, [r4, #0]
     838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     83a:	1b2c      	subs	r4, r5, r4
     83c:	429c      	cmp	r4, r3
     83e:	d3d6      	bcc.n	7ee <Charge_Step+0x22e>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     840:	2300      	movs	r3, #0
     842:	7253      	strb	r3, [r2, #9]
    output->charger_on = charger_on;
     844:	7293      	strb	r3, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     846:	6013      	str	r3, [r2, #0]
    output->current_req_mA = charge_current_mA;
     848:	6053      	str	r3, [r2, #4]

                if (input->pack_status->pack_current_mA < state->pack_config->cv_min_current_mA*state->pack_config->pack_cells_p) {
                    //so after your under this threshold for some time you are allowed to be done
                    if ((input->msTicks - last_time_above_cv_min_curr) >= state->pack_config->cv_min_current_ms) {
                        _set_output(false, false, 0, 0, output);
                        state->charge_state = CSB_CHARGE_DONE;
     84a:	330b      	adds	r3, #11
     84c:	718b      	strb	r3, [r1, #6]
                        break;
     84e:	e6d9      	b.n	604 <Charge_Step+0x44>
                state->curr_baud_rate = BMS_CAN_BAUD;
                input->receive_bms_config = false;
            }
            break;
        case CSB_CHARGE_CLOSE_CNTR:
            if (input->mode_request == CSB_SSM_MODE_CHARGE && input->low_side_cntr_fault == false) { //if in charge mode and there is no fault
     850:	2b02      	cmp	r3, #2
     852:	d100      	bne.n	856 <Charge_Step+0x296>
     854:	e77d      	b.n	752 <Charge_Step+0x192>

                if (input->contactors_closed == true) { //if contactors are closed
                    state->charge_state =
                        (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) ? CSB_CHARGE_CC : CSB_CHARGE_CV;
                }
            } else if (input->mode_request == CSB_SSM_MODE_BALANCE) {
     856:	2b03      	cmp	r3, #3
     858:	d000      	beq.n	85c <Charge_Step+0x29c>
     85a:	e6e3      	b.n	624 <Charge_Step+0x64>
     85c:	e6db      	b.n	616 <Charge_Step+0x56>

        case CSB_SSM_MODE_BALANCE:
            if (state->charge_state == CSB_CHARGE_OFF
                    || state->charge_state == CSB_CHARGE_CC
                    || state->charge_state == CSB_CHARGE_CV) {
                switch (state->pack_config->bms_comm) {
     85e:	2444      	movs	r4, #68	; 0x44
     860:	680b      	ldr	r3, [r1, #0]
     862:	5d1c      	ldrb	r4, [r3, r4]
     864:	2c00      	cmp	r4, #0
     866:	d100      	bne.n	86a <Charge_Step+0x2aa>
     868:	e6d5      	b.n	616 <Charge_Step+0x56>
     86a:	2c01      	cmp	r4, #1
     86c:	d188      	bne.n	780 <Charge_Step+0x1c0>
     86e:	e6f2      	b.n	656 <Charge_Step+0x96>
                        _set_output(false, false, 0, 0, output);
                        state->charge_state = CSB_CHARGE_DONE;
                        break;
                    }
                } else {
                    last_time_above_cv_min_curr = input->msTicks;
     870:	4b16      	ldr	r3, [pc, #88]	; (8cc <Charge_Step+0x30c>)
     872:	6904      	ldr	r4, [r0, #16]
     874:	601c      	str	r4, [r3, #0]
     876:	e7ba      	b.n	7ee <Charge_Step+0x22e>
            break;
    }
}

void _set_output(bool close_contactors, bool charger_on, uint32_t charge_voltage_mV, uint32_t charge_current_mA, CSB_OUTPUT_T *output) {
    output->close_contactors = close_contactors;
     878:	2400      	movs	r4, #0
     87a:	7254      	strb	r4, [r2, #9]
    output->charger_on = charger_on;
     87c:	7294      	strb	r4, [r2, #10]
    output->voltage_req_mV = charge_voltage_mV;
     87e:	6014      	str	r4, [r2, #0]
    output->current_req_mA = charge_current_mA;
     880:	6054      	str	r4, [r2, #4]

            // if mode request is idle, that means SSM is trying to switch to another mode so wait for contactors to close
            // if in charge or balance, make sure we don't need to go back to charge or balance
            //    if we do, go back to init
            //    otherwise finish
            if (input->mode_request == CSB_SSM_MODE_IDLE) {
     882:	2b01      	cmp	r3, #1
     884:	d100      	bne.n	888 <Charge_Step+0x2c8>
     886:	e6b4      	b.n	5f2 <Charge_Step+0x32>
                if (!input->contactors_closed && !input->elcon_status->elcon_charging) {
                    state->charge_state = CSB_CHARGE_OFF;
                }
            } else {
                if(state->curr_mode == CSB_SSM_MODE_CHARGE) {
     888:	790b      	ldrb	r3, [r1, #4]
     88a:	2b02      	cmp	r3, #2
     88c:	d007      	beq.n	89e <Charge_Step+0x2de>
                    if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
                        state->charge_state = CSB_CHARGE_CLOSE_CNTR;
                    } else {
                        state->charge_state = CSB_CHARGE_OFF;
                    }
                } else if (state->curr_mode == CSB_SSM_MODE_BALANCE) {
     88e:	2b03      	cmp	r3, #3
     890:	d000      	beq.n	894 <Charge_Step+0x2d4>
     892:	e6b7      	b.n	604 <Charge_Step+0x44>
                    if (input->balance_req) {
     894:	7d43      	ldrb	r3, [r0, #21]
     896:	2b00      	cmp	r3, #0
     898:	d000      	beq.n	89c <Charge_Step+0x2dc>
     89a:	e71d      	b.n	6d8 <Charge_Step+0x118>
     89c:	e6b0      	b.n	600 <Charge_Step+0x40>
                if (!input->contactors_closed && !input->elcon_status->elcon_charging) {
                    state->charge_state = CSB_CHARGE_OFF;
                }
            } else {
                if(state->curr_mode == CSB_SSM_MODE_CHARGE) {
                    if (input->pack_status->pack_cell_max_mV < state->pack_config->cell_max_mV) {
     89e:	6802      	ldr	r2, [r0, #0]
     8a0:	680b      	ldr	r3, [r1, #0]
     8a2:	6812      	ldr	r2, [r2, #0]
     8a4:	685b      	ldr	r3, [r3, #4]
     8a6:	429a      	cmp	r2, r3
     8a8:	d300      	bcc.n	8ac <Charge_Step+0x2ec>
     8aa:	e6a9      	b.n	600 <Charge_Step+0x40>
     8ac:	e714      	b.n	6d8 <Charge_Step+0x118>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00003054 	.word	0x00003054
     8b4:	0007a120 	.word	0x0007a120
     8b8:	10000738 	.word	0x10000738
     8bc:	10000210 	.word	0x10000210
     8c0:	10000208 	.word	0x10000208
     8c4:	00001388 	.word	0x00001388
     8c8:	0003d090 	.word	0x0003d090
     8cc:	1000020c 	.word	0x1000020c

000008d0 <measure>:
  } else {
      Board_Println("invalid location");
  }
}

static void measure(const char * const * argv) {
     8d0:	b510      	push	{r4, lr}
    if (strcmp(argv[1],"on") == 0) {
     8d2:	6844      	ldr	r4, [r0, #4]
     8d4:	492c      	ldr	r1, [pc, #176]	; (988 <measure+0xb8>)
     8d6:	0020      	movs	r0, r4
     8d8:	f002 fa48 	bl	2d6c <strcmp>
     8dc:	2800      	cmp	r0, #0
     8de:	d02e      	beq.n	93e <measure+0x6e>
        console_output->measure_on = true;
        Board_Println("Measure On!");

    } else if (strcmp(argv[1],"off") == 0) {
     8e0:	492a      	ldr	r1, [pc, #168]	; (98c <measure+0xbc>)
     8e2:	0020      	movs	r0, r4
     8e4:	f002 fa42 	bl	2d6c <strcmp>
     8e8:	2800      	cmp	r0, #0
     8ea:	d042      	beq.n	972 <measure+0xa2>
        console_output->measure_on = false;
        Board_Println("Measure Off!");

    } else if (strcmp(argv[1],"print_flags") == 0) {
     8ec:	4928      	ldr	r1, [pc, #160]	; (990 <measure+0xc0>)
     8ee:	0020      	movs	r0, r4
     8f0:	f002 fa3c 	bl	2d6c <strcmp>
     8f4:	2800      	cmp	r0, #0
     8f6:	d10f      	bne.n	918 <measure+0x48>

        if(console_output->measure_packcurrent) {
     8f8:	4c26      	ldr	r4, [pc, #152]	; (994 <measure+0xc4>)
     8fa:	6823      	ldr	r3, [r4, #0]
     8fc:	7a5b      	ldrb	r3, [r3, #9]
     8fe:	2b00      	cmp	r3, #0
     900:	d125      	bne.n	94e <measure+0x7e>
            Board_Println("Pack Current: On");
        } else {
            Board_Println("Pack Current: Off");
     902:	4825      	ldr	r0, [pc, #148]	; (998 <measure+0xc8>)
     904:	f7ff fc36 	bl	174 <Board_Println>
        }

        if(console_output->measure_packvoltage) {
     908:	6823      	ldr	r3, [r4, #0]
     90a:	7a9b      	ldrb	r3, [r3, #10]
     90c:	2b00      	cmp	r3, #0
     90e:	d025      	beq.n	95c <measure+0x8c>
            Board_Println("Pack Current: On");
     910:	4822      	ldr	r0, [pc, #136]	; (99c <measure+0xcc>)
     912:	f7ff fc2f 	bl	174 <Board_Println>
     916:	e019      	b.n	94c <measure+0x7c>
        } else {
            Board_Println("Pack Current: Off");
        }

    } else if (strcmp(argv[1],"packcurrent") == 0) {
     918:	4921      	ldr	r1, [pc, #132]	; (9a0 <measure+0xd0>)
     91a:	0020      	movs	r0, r4
     91c:	f002 fa26 	bl	2d6c <strcmp>
     920:	2800      	cmp	r0, #0
     922:	d01f      	beq.n	964 <measure+0x94>
        console_output->measure_packcurrent = !console_output->measure_packcurrent;

    } else if (strcmp(argv[1],"packvoltage") == 0) {
     924:	491f      	ldr	r1, [pc, #124]	; (9a4 <measure+0xd4>)
     926:	0020      	movs	r0, r4
     928:	f002 fa20 	bl	2d6c <strcmp>
     92c:	2800      	cmp	r0, #0
     92e:	d127      	bne.n	980 <measure+0xb0>
        console_output->measure_packvoltage = !console_output->measure_packvoltage;
     930:	4b18      	ldr	r3, [pc, #96]	; (994 <measure+0xc4>)
     932:	681a      	ldr	r2, [r3, #0]
     934:	2301      	movs	r3, #1
     936:	7a91      	ldrb	r1, [r2, #10]
     938:	404b      	eors	r3, r1
     93a:	7293      	strb	r3, [r2, #10]
     93c:	e006      	b.n	94c <measure+0x7c>
  }
}

static void measure(const char * const * argv) {
    if (strcmp(argv[1],"on") == 0) {
        console_output->measure_on = true;
     93e:	2201      	movs	r2, #1
     940:	4b14      	ldr	r3, [pc, #80]	; (994 <measure+0xc4>)
        Board_Println("Measure On!");
     942:	4819      	ldr	r0, [pc, #100]	; (9a8 <measure+0xd8>)
  }
}

static void measure(const char * const * argv) {
    if (strcmp(argv[1],"on") == 0) {
        console_output->measure_on = true;
     944:	681b      	ldr	r3, [r3, #0]
     946:	721a      	strb	r2, [r3, #8]
        Board_Println("Measure On!");
     948:	f7ff fc14 	bl	174 <Board_Println>
        console_output->measure_packvoltage = !console_output->measure_packvoltage;

    } else {
        Board_Println("Unrecognized command!");
    }
}
     94c:	bd10      	pop	{r4, pc}
        Board_Println("Measure Off!");

    } else if (strcmp(argv[1],"print_flags") == 0) {

        if(console_output->measure_packcurrent) {
            Board_Println("Pack Current: On");
     94e:	4813      	ldr	r0, [pc, #76]	; (99c <measure+0xcc>)
     950:	f7ff fc10 	bl	174 <Board_Println>
        } else {
            Board_Println("Pack Current: Off");
        }

        if(console_output->measure_packvoltage) {
     954:	6823      	ldr	r3, [r4, #0]
     956:	7a9b      	ldrb	r3, [r3, #10]
     958:	2b00      	cmp	r3, #0
     95a:	d1d9      	bne.n	910 <measure+0x40>
            Board_Println("Pack Current: On");
        } else {
            Board_Println("Pack Current: Off");
     95c:	480e      	ldr	r0, [pc, #56]	; (998 <measure+0xc8>)
     95e:	f7ff fc09 	bl	174 <Board_Println>
     962:	e7f3      	b.n	94c <measure+0x7c>
        }

    } else if (strcmp(argv[1],"packcurrent") == 0) {
        console_output->measure_packcurrent = !console_output->measure_packcurrent;
     964:	4b0b      	ldr	r3, [pc, #44]	; (994 <measure+0xc4>)
     966:	681a      	ldr	r2, [r3, #0]
     968:	2301      	movs	r3, #1
     96a:	7a51      	ldrb	r1, [r2, #9]
     96c:	404b      	eors	r3, r1
     96e:	7253      	strb	r3, [r2, #9]
     970:	e7ec      	b.n	94c <measure+0x7c>
    if (strcmp(argv[1],"on") == 0) {
        console_output->measure_on = true;
        Board_Println("Measure On!");

    } else if (strcmp(argv[1],"off") == 0) {
        console_output->measure_on = false;
     972:	4b08      	ldr	r3, [pc, #32]	; (994 <measure+0xc4>)
     974:	681b      	ldr	r3, [r3, #0]
     976:	7218      	strb	r0, [r3, #8]
        Board_Println("Measure Off!");
     978:	480c      	ldr	r0, [pc, #48]	; (9ac <measure+0xdc>)
     97a:	f7ff fbfb 	bl	174 <Board_Println>
     97e:	e7e5      	b.n	94c <measure+0x7c>

    } else if (strcmp(argv[1],"packvoltage") == 0) {
        console_output->measure_packvoltage = !console_output->measure_packvoltage;

    } else {
        Board_Println("Unrecognized command!");
     980:	480b      	ldr	r0, [pc, #44]	; (9b0 <measure+0xe0>)
     982:	f7ff fbf7 	bl	174 <Board_Println>
    }
}
     986:	e7e1      	b.n	94c <measure+0x7c>
     988:	0000344c 	.word	0x0000344c
     98c:	00003444 	.word	0x00003444
     990:	000031e0 	.word	0x000031e0
     994:	10000214 	.word	0x10000214
     998:	00003200 	.word	0x00003200
     99c:	000031ec 	.word	0x000031ec
     9a0:	00003214 	.word	0x00003214
     9a4:	00003220 	.word	0x00003220
     9a8:	000031c4 	.word	0x000031c4
     9ac:	000031d0 	.word	0x000031d0
     9b0:	0000322c 	.word	0x0000322c

000009b4 <set>:
            Board_Println("invalid get location");
        }
    }
}

static void set(const char * const * argv) {
     9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9b6:	464f      	mov	r7, r9
     9b8:	4646      	mov	r6, r8
     9ba:	b4c0      	push	{r6, r7}
    if (csb_state->curr_mode != CSB_SSM_MODE_IDLE)
     9bc:	4bc4      	ldr	r3, [pc, #784]	; (cd0 <set+0x31c>)
            Board_Println("invalid get location");
        }
    }
}

static void set(const char * const * argv) {
     9be:	4680      	mov	r8, r0
    if (csb_state->curr_mode != CSB_SSM_MODE_IDLE)
     9c0:	681f      	ldr	r7, [r3, #0]
     9c2:	793b      	ldrb	r3, [r7, #4]
     9c4:	2b01      	cmp	r3, #1
     9c6:	d122      	bne.n	a0e <set+0x5a>
     9c8:	4bc2      	ldr	r3, [pc, #776]	; (cd4 <set+0x320>)
     9ca:	6846      	ldr	r6, [r0, #4]
     9cc:	4699      	mov	r9, r3
     9ce:	1d1d      	adds	r5, r3, #4
     9d0:	49c1      	ldr	r1, [pc, #772]	; (cd8 <set+0x324>)
     9d2:	2400      	movs	r4, #0
     9d4:	e000      	b.n	9d8 <set+0x24>
     9d6:	cd02      	ldmia	r5!, {r1}
    rw_loc_label_t rwloc;
    //loop over r/w entries
    bool foundloc = false;
    bool foundynloc;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
        if (strcmp(argv[1],locstring[rwloc]) == 0){
     9d8:	0030      	movs	r0, r6
     9da:	f002 f9c7 	bl	2d6c <strcmp>
     9de:	2800      	cmp	r0, #0
     9e0:	d01c      	beq.n	a1c <set+0x68>
    }
    rw_loc_label_t rwloc;
    //loop over r/w entries
    bool foundloc = false;
    bool foundynloc;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
     9e2:	3401      	adds	r4, #1
     9e4:	b2e4      	uxtb	r4, r4
     9e6:	2c11      	cmp	r4, #17
     9e8:	d1f5      	bne.n	9d6 <set+0x22>
     9ea:	464d      	mov	r5, r9
     9ec:	464c      	mov	r4, r9
     9ee:	351c      	adds	r5, #28
     9f0:	49ba      	ldr	r1, [pc, #744]	; (cdc <set+0x328>)
     9f2:	e000      	b.n	9f6 <set+0x42>
     9f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
        }
    } else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
            if (strcmp(argv[1],locstring[roloc]) == 0){
     9f6:	0030      	movs	r0, r6
     9f8:	f002 f9b8 	bl	2d6c <strcmp>
     9fc:	2800      	cmp	r0, #0
     9fe:	d013      	beq.n	a28 <set+0x74>
     a00:	3404      	adds	r4, #4
                break;
        }
    } else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
     a02:	42a5      	cmp	r5, r4
     a04:	d1f6      	bne.n	9f4 <set+0x40>
                foundloc = true;
                Board_Println("this location is read only");
                return;
            }
        }
        Board_Println("invalid location");
     a06:	48b6      	ldr	r0, [pc, #728]	; (ce0 <set+0x32c>)
     a08:	f7ff fbb4 	bl	174 <Board_Println>
     a0c:	e002      	b.n	a14 <set+0x60>
}

static void set(const char * const * argv) {
    if (csb_state->curr_mode != CSB_SSM_MODE_IDLE)
    {
        Board_Println("Set failed (not in standby mode)!");
     a0e:	48b5      	ldr	r0, [pc, #724]	; (ce4 <set+0x330>)
     a10:	f7ff fbb0 	bl	174 <Board_Println>
                return;
            }
        }
        Board_Println("invalid location");
    }
}
     a14:	bc0c      	pop	{r2, r3}
     a16:	4690      	mov	r8, r2
     a18:	4699      	mov	r9, r3
     a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            foundloc = true;
            break;
        }
    }
    if(foundloc){
        switch (rwloc) {
     a1c:	2c10      	cmp	r4, #16
     a1e:	d81f      	bhi.n	a60 <set+0xac>
     a20:	4bb1      	ldr	r3, [pc, #708]	; (ce8 <set+0x334>)
     a22:	00a4      	lsls	r4, r4, #2
     a24:	591b      	ldr	r3, [r3, r4]
     a26:	469f      	mov	pc, r3
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
            if (strcmp(argv[1],locstring[roloc]) == 0){
                foundloc = true;
                Board_Println("this location is read only");
     a28:	48b0      	ldr	r0, [pc, #704]	; (cec <set+0x338>)
     a2a:	f7ff fba3 	bl	174 <Board_Println>
                return;
     a2e:	e7f1      	b.n	a14 <set+0x60>
            case RWL_cv_charge_voltage_mV:
                csb_state->pack_config->cv_charge_voltage_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_charge_current_mA:
                csb_state->pack_config->cv_charge_current_mA = my_atou(argv[2]);
     a30:	4643      	mov	r3, r8
     a32:	6899      	ldr	r1, [r3, #8]
     a34:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a36:	780a      	ldrb	r2, [r1, #0]
     a38:	2a00      	cmp	r2, #0
     a3a:	d100      	bne.n	a3e <set+0x8a>
     a3c:	e1c0      	b.n	dc0 <set+0x40c>
     a3e:	2300      	movs	r3, #0
     a40:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     a42:	0098      	lsls	r0, r3, #2
     a44:	18c3      	adds	r3, r0, r3
     a46:	005b      	lsls	r3, r3, #1
     a48:	3101      	adds	r1, #1
     a4a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a4c:	1e4a      	subs	r2, r1, #1
     a4e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     a50:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a52:	2a00      	cmp	r2, #0
     a54:	d1f5      	bne.n	a42 <set+0x8e>
            case RWL_cv_charge_voltage_mV:
                csb_state->pack_config->cv_charge_voltage_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_charge_current_mA:
                csb_state->pack_config->cv_charge_current_mA = my_atou(argv[2]);
     a56:	6423      	str	r3, [r4, #64]	; 0x40
                Board_Println("Done!");
     a58:	48a5      	ldr	r0, [pc, #660]	; (cf0 <set+0x33c>)
     a5a:	f7ff fb8b 	bl	174 <Board_Println>
                break;
     a5e:	e7d9      	b.n	a14 <set+0x60>
        }
    }
    if(foundloc){
        switch (rwloc) {
            case RWL_cell_min_mV:
                csb_state->pack_config->cell_min_mV = my_atou(argv[2]);
     a60:	4643      	mov	r3, r8
     a62:	6899      	ldr	r1, [r3, #8]
     a64:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a66:	780a      	ldrb	r2, [r1, #0]
     a68:	2a00      	cmp	r2, #0
     a6a:	d100      	bne.n	a6e <set+0xba>
     a6c:	e1a0      	b.n	db0 <set+0x3fc>
     a6e:	2300      	movs	r3, #0
     a70:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     a72:	0098      	lsls	r0, r3, #2
     a74:	18c3      	adds	r3, r0, r3
     a76:	005b      	lsls	r3, r3, #1
     a78:	3101      	adds	r1, #1
     a7a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a7c:	1e4a      	subs	r2, r1, #1
     a7e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     a80:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a82:	2a00      	cmp	r2, #0
     a84:	d1f5      	bne.n	a72 <set+0xbe>
        }
    }
    if(foundloc){
        switch (rwloc) {
            case RWL_cell_min_mV:
                csb_state->pack_config->cell_min_mV = my_atou(argv[2]);
     a86:	6023      	str	r3, [r4, #0]
                Board_Println("Done!");
     a88:	4899      	ldr	r0, [pc, #612]	; (cf0 <set+0x33c>)
     a8a:	f7ff fb73 	bl	174 <Board_Println>
                break;
     a8e:	e7c1      	b.n	a14 <set+0x60>
            case RWL_bal_on_thresh_mV:
                csb_state->pack_config->bal_on_thresh_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_bal_off_thresh_mV:
                csb_state->pack_config->bal_off_thresh_mV = my_atou(argv[2]);
     a90:	4643      	mov	r3, r8
     a92:	6899      	ldr	r1, [r3, #8]
     a94:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     a96:	780a      	ldrb	r2, [r1, #0]
     a98:	2a00      	cmp	r2, #0
     a9a:	d100      	bne.n	a9e <set+0xea>
     a9c:	e180      	b.n	da0 <set+0x3ec>
     a9e:	2300      	movs	r3, #0
     aa0:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     aa2:	0098      	lsls	r0, r3, #2
     aa4:	18c3      	adds	r3, r0, r3
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	3101      	adds	r1, #1
     aaa:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     aac:	1e4a      	subs	r2, r1, #1
     aae:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     ab0:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     ab2:	2a00      	cmp	r2, #0
     ab4:	d1f5      	bne.n	aa2 <set+0xee>
            case RWL_bal_on_thresh_mV:
                csb_state->pack_config->bal_on_thresh_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_bal_off_thresh_mV:
                csb_state->pack_config->bal_off_thresh_mV = my_atou(argv[2]);
     ab6:	61a3      	str	r3, [r4, #24]
                Board_Println("Done!");
     ab8:	488d      	ldr	r0, [pc, #564]	; (cf0 <set+0x33c>)
     aba:	f7ff fb5b 	bl	174 <Board_Println>
                break;
     abe:	e7a9      	b.n	a14 <set+0x60>
            case RWL_pack_cells_p:
                csb_state->pack_config->pack_cells_p = my_atou(argv[2]);
     ac0:	4643      	mov	r3, r8
     ac2:	6899      	ldr	r1, [r3, #8]
     ac4:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     ac6:	780a      	ldrb	r2, [r1, #0]
     ac8:	2a00      	cmp	r2, #0
     aca:	d100      	bne.n	ace <set+0x11a>
     acc:	e17c      	b.n	dc8 <set+0x414>
     ace:	2300      	movs	r3, #0
     ad0:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     ad2:	0098      	lsls	r0, r3, #2
     ad4:	18c3      	adds	r3, r0, r3
     ad6:	005b      	lsls	r3, r3, #1
     ad8:	3101      	adds	r1, #1
     ada:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     adc:	1e4a      	subs	r2, r1, #1
     ade:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     ae0:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     ae2:	2a00      	cmp	r2, #0
     ae4:	d1f5      	bne.n	ad2 <set+0x11e>
            case RWL_bal_off_thresh_mV:
                csb_state->pack_config->bal_off_thresh_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_pack_cells_p:
                csb_state->pack_config->pack_cells_p = my_atou(argv[2]);
     ae6:	61e3      	str	r3, [r4, #28]
                Board_Println("Done!");
     ae8:	4881      	ldr	r0, [pc, #516]	; (cf0 <set+0x33c>)
     aea:	f7ff fb43 	bl	174 <Board_Println>
                break;
     aee:	e791      	b.n	a14 <set+0x60>
            case RWL_cell_capacity_cAh:
                csb_state->pack_config->cell_capacity_cAh = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_num_modules:
                csb_state->pack_config->num_modules = my_atou(argv[2]);
     af0:	4643      	mov	r3, r8
     af2:	6899      	ldr	r1, [r3, #8]
     af4:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     af6:	780a      	ldrb	r2, [r1, #0]
     af8:	2a00      	cmp	r2, #0
     afa:	d100      	bne.n	afe <set+0x14a>
     afc:	e152      	b.n	da4 <set+0x3f0>
     afe:	2300      	movs	r3, #0
     b00:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     b02:	0098      	lsls	r0, r3, #2
     b04:	18c3      	adds	r3, r0, r3
     b06:	005b      	lsls	r3, r3, #1
     b08:	3101      	adds	r1, #1
     b0a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b0c:	1e4a      	subs	r2, r1, #1
     b0e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     b10:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b12:	2a00      	cmp	r2, #0
     b14:	d1f5      	bne.n	b02 <set+0x14e>
            case RWL_cell_capacity_cAh:
                csb_state->pack_config->cell_capacity_cAh = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_num_modules:
                csb_state->pack_config->num_modules = my_atou(argv[2]);
     b16:	60e3      	str	r3, [r4, #12]
                Board_Println("Done!");
     b18:	4875      	ldr	r0, [pc, #468]	; (cf0 <set+0x33c>)
     b1a:	f7ff fb2b 	bl	174 <Board_Println>
                break;
     b1e:	e779      	b.n	a14 <set+0x60>
            case RWL_module_cell_count:
                csb_state->pack_config->module_cell_count = my_atou(argv[2]);
     b20:	4643      	mov	r3, r8
     b22:	6899      	ldr	r1, [r3, #8]
     b24:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b26:	780a      	ldrb	r2, [r1, #0]
     b28:	2a00      	cmp	r2, #0
     b2a:	d100      	bne.n	b2e <set+0x17a>
     b2c:	e144      	b.n	db8 <set+0x404>
     b2e:	2300      	movs	r3, #0
     b30:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     b32:	0098      	lsls	r0, r3, #2
     b34:	18c3      	adds	r3, r0, r3
     b36:	005b      	lsls	r3, r3, #1
     b38:	3101      	adds	r1, #1
     b3a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b3c:	1e4a      	subs	r2, r1, #1
     b3e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     b40:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b42:	2a00      	cmp	r2, #0
     b44:	d1f5      	bne.n	b32 <set+0x17e>
            case RWL_num_modules:
                csb_state->pack_config->num_modules = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_module_cell_count:
                csb_state->pack_config->module_cell_count = my_atou(argv[2]);
     b46:	62e3      	str	r3, [r4, #44]	; 0x2c
                Board_Println("Done!");
     b48:	4869      	ldr	r0, [pc, #420]	; (cf0 <set+0x33c>)
     b4a:	f7ff fb13 	bl	174 <Board_Println>
                break;
     b4e:	e761      	b.n	a14 <set+0x60>
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cc_cell_voltage_mV:
                csb_state->pack_config->cc_cell_voltage_mV = my_atou(argv[2]);
     b50:	4643      	mov	r3, r8
     b52:	6899      	ldr	r1, [r3, #8]
     b54:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b56:	780a      	ldrb	r2, [r1, #0]
     b58:	2a00      	cmp	r2, #0
     b5a:	d100      	bne.n	b5e <set+0x1aa>
     b5c:	e124      	b.n	da8 <set+0x3f4>
     b5e:	2300      	movs	r3, #0
     b60:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     b62:	0098      	lsls	r0, r3, #2
     b64:	18c3      	adds	r3, r0, r3
     b66:	005b      	lsls	r3, r3, #1
     b68:	3101      	adds	r1, #1
     b6a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b6c:	1e4a      	subs	r2, r1, #1
     b6e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     b70:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b72:	2a00      	cmp	r2, #0
     b74:	d1f5      	bne.n	b62 <set+0x1ae>
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cc_cell_voltage_mV:
                csb_state->pack_config->cc_cell_voltage_mV = my_atou(argv[2]);
     b76:	62a3      	str	r3, [r4, #40]	; 0x28
                Board_Println("Done!");
     b78:	485d      	ldr	r0, [pc, #372]	; (cf0 <set+0x33c>)
     b7a:	f7ff fafb 	bl	174 <Board_Println>
                break;
     b7e:	e749      	b.n	a14 <set+0x60>
            case RWL_cc_charge_voltage_mV:
                csb_state->pack_config->cc_charge_voltage_mV = my_atou(argv[2]);
     b80:	4643      	mov	r3, r8
     b82:	6899      	ldr	r1, [r3, #8]
     b84:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b86:	780a      	ldrb	r2, [r1, #0]
     b88:	2a00      	cmp	r2, #0
     b8a:	d100      	bne.n	b8e <set+0x1da>
     b8c:	e11a      	b.n	dc4 <set+0x410>
     b8e:	2300      	movs	r3, #0
     b90:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     b92:	0098      	lsls	r0, r3, #2
     b94:	18c3      	adds	r3, r0, r3
     b96:	005b      	lsls	r3, r3, #1
     b98:	3101      	adds	r1, #1
     b9a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     b9c:	1e4a      	subs	r2, r1, #1
     b9e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     ba0:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     ba2:	2a00      	cmp	r2, #0
     ba4:	d1f5      	bne.n	b92 <set+0x1de>
            case RWL_cc_cell_voltage_mV:
                csb_state->pack_config->cc_cell_voltage_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cc_charge_voltage_mV:
                csb_state->pack_config->cc_charge_voltage_mV = my_atou(argv[2]);
     ba6:	6363      	str	r3, [r4, #52]	; 0x34
                Board_Println("Done!");
     ba8:	4851      	ldr	r0, [pc, #324]	; (cf0 <set+0x33c>)
     baa:	f7ff fae3 	bl	174 <Board_Println>
                break;
     bae:	e731      	b.n	a14 <set+0x60>
            case RWL_cell_min_mV:
                csb_state->pack_config->cell_min_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_max_mV:
                csb_state->pack_config->cell_max_mV = my_atou(argv[2]);
     bb0:	4643      	mov	r3, r8
     bb2:	6899      	ldr	r1, [r3, #8]
     bb4:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     bb6:	780a      	ldrb	r2, [r1, #0]
     bb8:	2a00      	cmp	r2, #0
     bba:	d100      	bne.n	bbe <set+0x20a>
     bbc:	e0fe      	b.n	dbc <set+0x408>
     bbe:	2300      	movs	r3, #0
     bc0:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     bc2:	0098      	lsls	r0, r3, #2
     bc4:	18c3      	adds	r3, r0, r3
     bc6:	005b      	lsls	r3, r3, #1
     bc8:	3101      	adds	r1, #1
     bca:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     bcc:	1e4a      	subs	r2, r1, #1
     bce:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     bd0:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     bd2:	2a00      	cmp	r2, #0
     bd4:	d1f5      	bne.n	bc2 <set+0x20e>
            case RWL_cell_min_mV:
                csb_state->pack_config->cell_min_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_max_mV:
                csb_state->pack_config->cell_max_mV = my_atou(argv[2]);
     bd6:	6063      	str	r3, [r4, #4]
                Board_Println("Done!");
     bd8:	4845      	ldr	r0, [pc, #276]	; (cf0 <set+0x33c>)
     bda:	f7ff facb 	bl	174 <Board_Println>
                break;
     bde:	e719      	b.n	a14 <set+0x60>
            case RWL_cell_capacity_cAh:
                csb_state->pack_config->cell_capacity_cAh = my_atou(argv[2]);
     be0:	4643      	mov	r3, r8
     be2:	6899      	ldr	r1, [r3, #8]
     be4:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     be6:	780a      	ldrb	r2, [r1, #0]
     be8:	2a00      	cmp	r2, #0
     bea:	d100      	bne.n	bee <set+0x23a>
     bec:	e0e2      	b.n	db4 <set+0x400>
     bee:	2300      	movs	r3, #0
     bf0:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     bf2:	0098      	lsls	r0, r3, #2
     bf4:	18c3      	adds	r3, r0, r3
     bf6:	005b      	lsls	r3, r3, #1
     bf8:	3101      	adds	r1, #1
     bfa:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     bfc:	1e4a      	subs	r2, r1, #1
     bfe:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     c00:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c02:	2a00      	cmp	r2, #0
     c04:	d1f5      	bne.n	bf2 <set+0x23e>
            case RWL_cell_max_mV:
                csb_state->pack_config->cell_max_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_capacity_cAh:
                csb_state->pack_config->cell_capacity_cAh = my_atou(argv[2]);
     c06:	60a3      	str	r3, [r4, #8]
                Board_Println("Done!");
     c08:	4839      	ldr	r0, [pc, #228]	; (cf0 <set+0x33c>)
     c0a:	f7ff fab3 	bl	174 <Board_Println>
                break;
     c0e:	e701      	b.n	a14 <set+0x60>
            case RWL_pack_cells_p:
                csb_state->pack_config->pack_cells_p = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_min_current_mA:
                csb_state->pack_config->cv_min_current_mA = my_atou(argv[2]);
     c10:	4643      	mov	r3, r8
     c12:	6899      	ldr	r1, [r3, #8]
     c14:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c16:	780a      	ldrb	r2, [r1, #0]
     c18:	2a00      	cmp	r2, #0
     c1a:	d100      	bne.n	c1e <set+0x26a>
     c1c:	e0bc      	b.n	d98 <set+0x3e4>
     c1e:	2300      	movs	r3, #0
     c20:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     c22:	0098      	lsls	r0, r3, #2
     c24:	18c3      	adds	r3, r0, r3
     c26:	005b      	lsls	r3, r3, #1
     c28:	3101      	adds	r1, #1
     c2a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c2c:	1e4a      	subs	r2, r1, #1
     c2e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     c30:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c32:	2a00      	cmp	r2, #0
     c34:	d1f5      	bne.n	c22 <set+0x26e>
            case RWL_pack_cells_p:
                csb_state->pack_config->pack_cells_p = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_min_current_mA:
                csb_state->pack_config->cv_min_current_mA = my_atou(argv[2]);
     c36:	6223      	str	r3, [r4, #32]
                Board_Println("Done!");
     c38:	482d      	ldr	r0, [pc, #180]	; (cf0 <set+0x33c>)
     c3a:	f7ff fa9b 	bl	174 <Board_Println>
                break;
     c3e:	e6e9      	b.n	a14 <set+0x60>
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
     c40:	4643      	mov	r3, r8
     c42:	6899      	ldr	r1, [r3, #8]
     c44:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c46:	780a      	ldrb	r2, [r1, #0]
     c48:	2a00      	cmp	r2, #0
     c4a:	d100      	bne.n	c4e <set+0x29a>
     c4c:	e0ae      	b.n	dac <set+0x3f8>
     c4e:	2300      	movs	r3, #0
     c50:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     c52:	0098      	lsls	r0, r3, #2
     c54:	18c3      	adds	r3, r0, r3
     c56:	005b      	lsls	r3, r3, #1
     c58:	3101      	adds	r1, #1
     c5a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c5c:	1e4a      	subs	r2, r1, #1
     c5e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     c60:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c62:	2a00      	cmp	r2, #0
     c64:	d1f5      	bne.n	c52 <set+0x29e>
            case RWL_cv_min_current_mA:
                csb_state->pack_config->cv_min_current_mA = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_min_current_ms:
                csb_state->pack_config->cv_min_current_ms = my_atou(argv[2]);
     c66:	6263      	str	r3, [r4, #36]	; 0x24
                Board_Println("Done!");
     c68:	4821      	ldr	r0, [pc, #132]	; (cf0 <set+0x33c>)
     c6a:	f7ff fa83 	bl	174 <Board_Println>
                break;
     c6e:	e6d1      	b.n	a14 <set+0x60>
            case RWL_module_cell_count:
                csb_state->pack_config->module_cell_count = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_charge_c_rating_cC:
              csb_state->pack_config->cell_charge_c_rating_cC = my_atou(argv[2]);
     c70:	4643      	mov	r3, r8
     c72:	6899      	ldr	r1, [r3, #8]
     c74:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c76:	780a      	ldrb	r2, [r1, #0]
     c78:	2a00      	cmp	r2, #0
     c7a:	d100      	bne.n	c7e <set+0x2ca>
     c7c:	e08e      	b.n	d9c <set+0x3e8>
     c7e:	2300      	movs	r3, #0
     c80:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     c82:	0098      	lsls	r0, r3, #2
     c84:	18c3      	adds	r3, r0, r3
     c86:	005b      	lsls	r3, r3, #1
     c88:	3101      	adds	r1, #1
     c8a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c8c:	1e4a      	subs	r2, r1, #1
     c8e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     c90:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     c92:	2a00      	cmp	r2, #0
     c94:	d1f5      	bne.n	c82 <set+0x2ce>
            case RWL_module_cell_count:
                csb_state->pack_config->module_cell_count = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cell_charge_c_rating_cC:
              csb_state->pack_config->cell_charge_c_rating_cC = my_atou(argv[2]);
     c96:	6123      	str	r3, [r4, #16]
              Board_Println("Done!");
     c98:	4815      	ldr	r0, [pc, #84]	; (cf0 <set+0x33c>)
     c9a:	f7ff fa6b 	bl	174 <Board_Println>
              break;
     c9e:	e6b9      	b.n	a14 <set+0x60>
            case RWL_bal_on_thresh_mV:
                csb_state->pack_config->bal_on_thresh_mV = my_atou(argv[2]);
     ca0:	4643      	mov	r3, r8
     ca2:	6899      	ldr	r1, [r3, #8]
     ca4:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     ca6:	780a      	ldrb	r2, [r1, #0]
     ca8:	2a00      	cmp	r2, #0
     caa:	d06f      	beq.n	d8c <set+0x3d8>
     cac:	2300      	movs	r3, #0
     cae:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     cb0:	0098      	lsls	r0, r3, #2
     cb2:	18c3      	adds	r3, r0, r3
     cb4:	005b      	lsls	r3, r3, #1
     cb6:	3101      	adds	r1, #1
     cb8:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     cba:	1e4a      	subs	r2, r1, #1
     cbc:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     cbe:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     cc0:	2a00      	cmp	r2, #0
     cc2:	d1f5      	bne.n	cb0 <set+0x2fc>
            case RWL_cell_charge_c_rating_cC:
              csb_state->pack_config->cell_charge_c_rating_cC = my_atou(argv[2]);
              Board_Println("Done!");
              break;
            case RWL_bal_on_thresh_mV:
                csb_state->pack_config->bal_on_thresh_mV = my_atou(argv[2]);
     cc4:	6163      	str	r3, [r4, #20]
                Board_Println("Done!");
     cc6:	480a      	ldr	r0, [pc, #40]	; (cf0 <set+0x33c>)
     cc8:	f7ff fa54 	bl	174 <Board_Println>
                break;
     ccc:	e6a2      	b.n	a14 <set+0x60>
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	10000224 	.word	0x10000224
     cd4:	00003130 	.word	0x00003130
     cd8:	00003244 	.word	0x00003244
     cdc:	00003250 	.word	0x00003250
     ce0:	000032a0 	.word	0x000032a0
     ce4:	00003258 	.word	0x00003258
     ce8:	00003084 	.word	0x00003084
     cec:	00003284 	.word	0x00003284
     cf0:	0000327c 	.word	0x0000327c
            case RWL_cc_charge_voltage_mV:
                csb_state->pack_config->cc_charge_voltage_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cc_charge_current_mA:
                csb_state->pack_config->cc_charge_current_mA = my_atou(argv[2]);
     cf4:	4643      	mov	r3, r8
     cf6:	6899      	ldr	r1, [r3, #8]
     cf8:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     cfa:	780a      	ldrb	r2, [r1, #0]
     cfc:	2a00      	cmp	r2, #0
     cfe:	d049      	beq.n	d94 <set+0x3e0>
     d00:	2300      	movs	r3, #0
     d02:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     d04:	0098      	lsls	r0, r3, #2
     d06:	18c3      	adds	r3, r0, r3
     d08:	005b      	lsls	r3, r3, #1
     d0a:	3101      	adds	r1, #1
     d0c:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     d0e:	1e4a      	subs	r2, r1, #1
     d10:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     d12:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     d14:	2a00      	cmp	r2, #0
     d16:	d1f5      	bne.n	d04 <set+0x350>
            case RWL_cc_charge_voltage_mV:
                csb_state->pack_config->cc_charge_voltage_mV = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cc_charge_current_mA:
                csb_state->pack_config->cc_charge_current_mA = my_atou(argv[2]);
     d18:	63a3      	str	r3, [r4, #56]	; 0x38
                Board_Println("Done!");
     d1a:	482c      	ldr	r0, [pc, #176]	; (dcc <set+0x418>)
     d1c:	f7ff fa2a 	bl	174 <Board_Println>
                break;
     d20:	e678      	b.n	a14 <set+0x60>
            case RWL_cv_charge_voltage_mV:
                csb_state->pack_config->cv_charge_voltage_mV = my_atou(argv[2]);
     d22:	4643      	mov	r3, r8
     d24:	6899      	ldr	r1, [r3, #8]
     d26:	683c      	ldr	r4, [r7, #0]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     d28:	780a      	ldrb	r2, [r1, #0]
     d2a:	2a00      	cmp	r2, #0
     d2c:	d030      	beq.n	d90 <set+0x3dc>
     d2e:	2300      	movs	r3, #0
     d30:	3101      	adds	r1, #1
        res = res*10 + str[i] - '0';
     d32:	0098      	lsls	r0, r3, #2
     d34:	18c3      	adds	r3, r0, r3
     d36:	005b      	lsls	r3, r3, #1
     d38:	3101      	adds	r1, #1
     d3a:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     d3c:	1e4a      	subs	r2, r1, #1
     d3e:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
     d40:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
     d42:	2a00      	cmp	r2, #0
     d44:	d1f5      	bne.n	d32 <set+0x37e>
            case RWL_cc_charge_current_mA:
                csb_state->pack_config->cc_charge_current_mA = my_atou(argv[2]);
                Board_Println("Done!");
                break;
            case RWL_cv_charge_voltage_mV:
                csb_state->pack_config->cv_charge_voltage_mV = my_atou(argv[2]);
     d46:	63e3      	str	r3, [r4, #60]	; 0x3c
                Board_Println("Done!");
     d48:	4820      	ldr	r0, [pc, #128]	; (dcc <set+0x418>)
     d4a:	f7ff fa13 	bl	174 <Board_Println>
                break;
     d4e:	e661      	b.n	a14 <set+0x60>
     d50:	4643      	mov	r3, r8
     d52:	689c      	ldr	r4, [r3, #8]
                break;
            case RWL_bms_comm:
                foundynloc = false;
                yn_loc_label_t ynloc;
                for (ynloc = 0; ynloc< YNL_LENGTH; ++ynloc){
                    if (strcmp(argv[2],yn_locstring[ynloc]) == 0){
     d54:	491e      	ldr	r1, [pc, #120]	; (dd0 <set+0x41c>)
     d56:	0020      	movs	r0, r4
     d58:	f002 f808 	bl	2d6c <strcmp>
     d5c:	2800      	cmp	r0, #0
     d5e:	d00d      	beq.n	d7c <set+0x3c8>
     d60:	491c      	ldr	r1, [pc, #112]	; (dd4 <set+0x420>)
     d62:	0020      	movs	r0, r4
     d64:	f002 f802 	bl	2d6c <strcmp>
     d68:	2800      	cmp	r0, #0
     d6a:	d000      	beq.n	d6e <set+0x3ba>
     d6c:	e64b      	b.n	a06 <set+0x52>
                        case YNL_YES:
                            csb_state->pack_config->bms_comm = BMS_YES_COMM;
                            Board_Println("Done!");
                            break;
                        case YNL_NO:
                            csb_state->pack_config->bms_comm = BMS_NO_COMM;
     d6e:	2344      	movs	r3, #68	; 0x44
     d70:	683a      	ldr	r2, [r7, #0]
     d72:	54d0      	strb	r0, [r2, r3]
                            Board_Println("Done!");
     d74:	4815      	ldr	r0, [pc, #84]	; (dcc <set+0x418>)
     d76:	f7ff f9fd 	bl	174 <Board_Println>
                            break;
     d7a:	e64b      	b.n	a14 <set+0x60>
                    }
                }
                if (foundynloc) {
                    switch (ynloc) {
                        case YNL_YES:
                            csb_state->pack_config->bms_comm = BMS_YES_COMM;
     d7c:	2101      	movs	r1, #1
     d7e:	2344      	movs	r3, #68	; 0x44
     d80:	683a      	ldr	r2, [r7, #0]
                            Board_Println("Done!");
     d82:	4812      	ldr	r0, [pc, #72]	; (dcc <set+0x418>)
                    }
                }
                if (foundynloc) {
                    switch (ynloc) {
                        case YNL_YES:
                            csb_state->pack_config->bms_comm = BMS_YES_COMM;
     d84:	54d1      	strb	r1, [r2, r3]
                            Board_Println("Done!");
     d86:	f7ff f9f5 	bl	174 <Board_Println>
                            break;
     d8a:	e643      	b.n	a14 <set+0x60>
static uint32_t lastPackCurrentPrintTime = 0;
static uint32_t lastPackVoltagePrintTime = 0;

// [TODO] Fix to not parse strings falsely
uint32_t my_atou(const char *str) {
    uint32_t res = 0; // Initialize result
     d8c:	2300      	movs	r3, #0
     d8e:	e799      	b.n	cc4 <set+0x310>
     d90:	2300      	movs	r3, #0
     d92:	e7d8      	b.n	d46 <set+0x392>
     d94:	2300      	movs	r3, #0
     d96:	e7bf      	b.n	d18 <set+0x364>
     d98:	2300      	movs	r3, #0
     d9a:	e74c      	b.n	c36 <set+0x282>
     d9c:	2300      	movs	r3, #0
     d9e:	e77a      	b.n	c96 <set+0x2e2>
     da0:	2300      	movs	r3, #0
     da2:	e688      	b.n	ab6 <set+0x102>
     da4:	2300      	movs	r3, #0
     da6:	e6b6      	b.n	b16 <set+0x162>
     da8:	2300      	movs	r3, #0
     daa:	e6e4      	b.n	b76 <set+0x1c2>
     dac:	2300      	movs	r3, #0
     dae:	e75a      	b.n	c66 <set+0x2b2>
     db0:	2300      	movs	r3, #0
     db2:	e668      	b.n	a86 <set+0xd2>
     db4:	2300      	movs	r3, #0
     db6:	e726      	b.n	c06 <set+0x252>
     db8:	2300      	movs	r3, #0
     dba:	e6c4      	b.n	b46 <set+0x192>
     dbc:	2300      	movs	r3, #0
     dbe:	e70a      	b.n	bd6 <set+0x222>
     dc0:	2300      	movs	r3, #0
     dc2:	e648      	b.n	a56 <set+0xa2>
     dc4:	2300      	movs	r3, #0
     dc6:	e6ee      	b.n	ba6 <set+0x1f2>
     dc8:	2300      	movs	r3, #0
     dca:	e68c      	b.n	ae6 <set+0x132>
     dcc:	0000327c 	.word	0x0000327c
     dd0:	000032b4 	.word	0x000032b4
     dd4:	000032b8 	.word	0x000032b8

00000dd8 <chrg>:
    } else {
        Board_Println("Must be in standby");
    }
}

static void chrg(const char * const * argv) {
     dd8:	b510      	push	{r4, lr}
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_CHARGE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_CHARGE)) {
     dda:	4b10      	ldr	r3, [pc, #64]	; (e1c <chrg+0x44>)
     ddc:	681b      	ldr	r3, [r3, #0]
     dde:	7918      	ldrb	r0, [r3, #4]
     de0:	2802      	cmp	r0, #2
     de2:	d004      	beq.n	dee <chrg+0x16>
     de4:	2102      	movs	r1, #2
     de6:	f001 f831 	bl	1e4c <Is_Valid_Jump>
     dea:	2800      	cmp	r0, #0
     dec:	d012      	beq.n	e14 <chrg+0x3c>
        if (console_output->valid_mode_request) {
     dee:	4b0c      	ldr	r3, [pc, #48]	; (e20 <chrg+0x48>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	781a      	ldrb	r2, [r3, #0]
     df4:	2a00      	cmp	r2, #0
     df6:	d107      	bne.n	e08 <chrg+0x30>
            console_output->valid_mode_request = false;
            Board_Println("chrg off");
        } else {
            console_output->valid_mode_request = true;
     df8:	2201      	movs	r2, #1
     dfa:	701a      	strb	r2, [r3, #0]
            console_output->mode_request = CSB_SSM_MODE_CHARGE;
     dfc:	3201      	adds	r2, #1
     dfe:	709a      	strb	r2, [r3, #2]
            Board_Println("chrg on");
     e00:	4808      	ldr	r0, [pc, #32]	; (e24 <chrg+0x4c>)
     e02:	f7ff f9b7 	bl	174 <Board_Println>
        }
    } else {
        Board_Println("Must be in standby");
    }
}
     e06:	bd10      	pop	{r4, pc}

static void chrg(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_CHARGE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_CHARGE)) {
        if (console_output->valid_mode_request) {
            console_output->valid_mode_request = false;
     e08:	2200      	movs	r2, #0
            Board_Println("chrg off");
     e0a:	4807      	ldr	r0, [pc, #28]	; (e28 <chrg+0x50>)

static void chrg(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_CHARGE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_CHARGE)) {
        if (console_output->valid_mode_request) {
            console_output->valid_mode_request = false;
     e0c:	701a      	strb	r2, [r3, #0]
            Board_Println("chrg off");
     e0e:	f7ff f9b1 	bl	174 <Board_Println>
     e12:	e7f8      	b.n	e06 <chrg+0x2e>
            console_output->valid_mode_request = true;
            console_output->mode_request = CSB_SSM_MODE_CHARGE;
            Board_Println("chrg on");
        }
    } else {
        Board_Println("Must be in standby");
     e14:	4805      	ldr	r0, [pc, #20]	; (e2c <chrg+0x54>)
     e16:	f7ff f9ad 	bl	174 <Board_Println>
    }
}
     e1a:	e7f4      	b.n	e06 <chrg+0x2e>
     e1c:	10000224 	.word	0x10000224
     e20:	10000214 	.word	0x10000214
     e24:	000032c8 	.word	0x000032c8
     e28:	000032bc 	.word	0x000032bc
     e2c:	000032d0 	.word	0x000032d0

00000e30 <get>:

    // return result.
    return res;
}

static void get(const char * const * argv) {
     e30:	b5f0      	push	{r4, r5, r6, r7, lr}
     e32:	4d9f      	ldr	r5, [pc, #636]	; (10b0 <get+0x280>)
     e34:	b087      	sub	sp, #28
     e36:	6846      	ldr	r6, [r0, #4]
     e38:	1d2f      	adds	r7, r5, #4
     e3a:	499e      	ldr	r1, [pc, #632]	; (10b4 <get+0x284>)
    rw_loc_label_t rwloc;

    //loop over r/w entries
    bool foundloc = false;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
     e3c:	2400      	movs	r4, #0
     e3e:	e000      	b.n	e42 <get+0x12>
     e40:	cf02      	ldmia	r7!, {r1}
        if (strcmp(argv[1],locstring[rwloc]) == 0){
     e42:	0030      	movs	r0, r6
     e44:	f001 ff92 	bl	2d6c <strcmp>
     e48:	2800      	cmp	r0, #0
     e4a:	d015      	beq.n	e78 <get+0x48>
static void get(const char * const * argv) {
    rw_loc_label_t rwloc;

    //loop over r/w entries
    bool foundloc = false;
    for (rwloc = 0; rwloc < RWL_LENGTH; ++rwloc){
     e4c:	3401      	adds	r4, #1
     e4e:	b2e4      	uxtb	r4, r4
     e50:	2c11      	cmp	r4, #17
     e52:	d1f5      	bne.n	e40 <get+0x10>
     e54:	4998      	ldr	r1, [pc, #608]	; (10b8 <get+0x288>)
     e56:	e000      	b.n	e5a <get+0x2a>
     e58:	6c69      	ldr	r1, [r5, #68]	; 0x44
    }
    else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
            if (strcmp(argv[1],locstring[roloc]) == 0){
     e5a:	0030      	movs	r0, r6
     e5c:	f001 ff86 	bl	2d6c <strcmp>
     e60:	2800      	cmp	r0, #0
     e62:	d00f      	beq.n	e84 <get+0x54>

    }
    else {
        //loop over r/o entries
        ro_loc_label_t roloc;
        for (roloc = (ro_loc_label_t)ROL_FIRST; roloc< ROL_LENGTH; ++roloc){
     e64:	3401      	adds	r4, #1
     e66:	b2e4      	uxtb	r4, r4
     e68:	3504      	adds	r5, #4
     e6a:	2c18      	cmp	r4, #24
     e6c:	d1f4      	bne.n	e58 <get+0x28>
                case ROL_LENGTH:
                    break; //how the hell?
            }
        }
        else{
            Board_Println("invalid get location");
     e6e:	4893      	ldr	r0, [pc, #588]	; (10bc <get+0x28c>)
     e70:	f7ff f980 	bl	174 <Board_Println>
        }
    }
}
     e74:	b007      	add	sp, #28
     e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }
    }

    if (foundloc) {
        char tempstr[20];
        switch (rwloc) {
     e78:	2c10      	cmp	r4, #16
     e7a:	d852      	bhi.n	f22 <get+0xf2>
     e7c:	4b90      	ldr	r3, [pc, #576]	; (10c0 <get+0x290>)
     e7e:	00a4      	lsls	r4, r4, #2
     e80:	591b      	ldr	r3, [r3, r4]
     e82:	469f      	mov	pc, r3
                break;
            }
        }
        if (foundloc) {
            char tempstr[20];
            switch (roloc) {
     e84:	3c12      	subs	r4, #18
     e86:	b2e4      	uxtb	r4, r4
     e88:	2c05      	cmp	r4, #5
     e8a:	d900      	bls.n	e8e <get+0x5e>
     e8c:	e081      	b.n	f92 <get+0x162>
     e8e:	4b8d      	ldr	r3, [pc, #564]	; (10c4 <get+0x294>)
     e90:	00a4      	lsls	r4, r4, #2
     e92:	591b      	ldr	r3, [r3, r4]
     e94:	469f      	mov	pc, r3
                case ROL_pack_cell_max_mV:
                    utoa(csb_input->pack_status->pack_cell_max_mV, tempstr,10);
                    Board_Println(tempstr);
                    break;
                case ROL_pack_current_mA:
                    utoa(csb_input->pack_status->pack_current_mA, tempstr,10);
     e96:	4b8c      	ldr	r3, [pc, #560]	; (10c8 <get+0x298>)
            case RWL_cell_min_mV:
                utoa(csb_state->pack_config->cell_min_mV, tempstr,10);
                Board_Println(tempstr);
                break;
            case RWL_cell_max_mV:
                utoa(csb_state->pack_config->cell_max_mV, tempstr,10);
     e98:	681b      	ldr	r3, [r3, #0]
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	6858      	ldr	r0, [r3, #4]
     e9e:	220a      	movs	r2, #10
     ea0:	a901      	add	r1, sp, #4
     ea2:	f002 f821 	bl	2ee8 <utoa>
                Board_Println(tempstr);
     ea6:	a801      	add	r0, sp, #4
     ea8:	f7ff f964 	bl	174 <Board_Println>
                break;
     eac:	e7e2      	b.n	e74 <get+0x44>
                case ROL_pack_current_mA:
                    utoa(csb_input->pack_status->pack_current_mA, tempstr,10);
                    Board_Println(tempstr);
                    break;
                case ROL_pack_voltage_mV:
                    utoa(csb_input->pack_status->pack_voltage_mV, tempstr,10);
     eae:	4b86      	ldr	r3, [pc, #536]	; (10c8 <get+0x298>)
     eb0:	681b      	ldr	r3, [r3, #0]
     eb2:	681b      	ldr	r3, [r3, #0]
     eb4:	6898      	ldr	r0, [r3, #8]
     eb6:	e7f2      	b.n	e9e <get+0x6e>
        }
        if (foundloc) {
            char tempstr[20];
            switch (roloc) {
                case ROL_total_num_cells:
                    utoa(csb_state->pack_config->total_num_cells, tempstr,10);
     eb8:	4b84      	ldr	r3, [pc, #528]	; (10cc <get+0x29c>)
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	6b18      	ldr	r0, [r3, #48]	; 0x30
     ec0:	e7ed      	b.n	e9e <get+0x6e>
                    Board_Println(tempstr);
                    break;
                case ROL_pack_name:
                    Board_Println(PACK_NAMES[csb_state->pack_config->pack_name]);
     ec2:	4b82      	ldr	r3, [pc, #520]	; (10cc <get+0x29c>)
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	681a      	ldr	r2, [r3, #0]
     ec8:	2345      	movs	r3, #69	; 0x45
     eca:	5cd3      	ldrb	r3, [r2, r3]
     ecc:	4a80      	ldr	r2, [pc, #512]	; (10d0 <get+0x2a0>)
     ece:	009b      	lsls	r3, r3, #2
     ed0:	5898      	ldr	r0, [r3, r2]
     ed2:	f7ff f94f 	bl	174 <Board_Println>
                    break;
     ed6:	e7cd      	b.n	e74 <get+0x44>
                    Board_Println(CSB_SSM_MODE_NAMES[csb_state->curr_mode]);
                    Board_Println(CSB_INIT_MODE_NAMES[csb_state->init_state]);
                    Board_Println(CSB_CHARGE_MODE_NAMES[csb_state->charge_state]);
                    break;
                case ROL_pack_cell_max_mV:
                    utoa(csb_input->pack_status->pack_cell_max_mV, tempstr,10);
     ed8:	4b7b      	ldr	r3, [pc, #492]	; (10c8 <get+0x298>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	681b      	ldr	r3, [r3, #0]
     ede:	6818      	ldr	r0, [r3, #0]
     ee0:	e7dd      	b.n	e9e <get+0x6e>
            case RWL_cell_min_mV:
                utoa(csb_state->pack_config->cell_min_mV, tempstr,10);
                Board_Println(tempstr);
                break;
            case RWL_cell_max_mV:
                utoa(csb_state->pack_config->cell_max_mV, tempstr,10);
     ee2:	4b7a      	ldr	r3, [pc, #488]	; (10cc <get+0x29c>)
     ee4:	e7d8      	b.n	e98 <get+0x68>
                Board_Println(tempstr);
                break;
            case RWL_cell_capacity_cAh:
                utoa(csb_state->pack_config->cell_capacity_cAh, tempstr,10);
     ee6:	4b79      	ldr	r3, [pc, #484]	; (10cc <get+0x29c>)
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	6898      	ldr	r0, [r3, #8]
     eee:	e7d6      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_num_modules:
                utoa(csb_state->pack_config->num_modules, tempstr,10);
     ef0:	4b76      	ldr	r3, [pc, #472]	; (10cc <get+0x29c>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	68d8      	ldr	r0, [r3, #12]
     ef8:	e7d1      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_module_cell_count:
                utoa(csb_state->pack_config->module_cell_count, tempstr,10);
     efa:	4b74      	ldr	r3, [pc, #464]	; (10cc <get+0x29c>)
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
     f02:	e7cc      	b.n	e9e <get+0x6e>
            case RWL_cc_charge_voltage_mV:
                utoa(csb_state->pack_config->cc_charge_voltage_mV, tempstr,10);
                Board_Println(tempstr);
                break;
            case RWL_cc_charge_current_mA:
                utoa(csb_state->pack_config->cc_charge_current_mA, tempstr,10);
     f04:	4b71      	ldr	r3, [pc, #452]	; (10cc <get+0x29c>)
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
     f0c:	e7c7      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_cv_charge_voltage_mV:
                utoa(csb_state->pack_config->cv_charge_voltage_mV, tempstr,10);
     f0e:	4b6f      	ldr	r3, [pc, #444]	; (10cc <get+0x29c>)
     f10:	681b      	ldr	r3, [r3, #0]
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
     f16:	e7c2      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_cv_charge_current_mA:
                utoa(csb_state->pack_config->cv_charge_current_mA, tempstr,10);
     f18:	4b6c      	ldr	r3, [pc, #432]	; (10cc <get+0x29c>)
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	6c18      	ldr	r0, [r3, #64]	; 0x40
     f20:	e7bd      	b.n	e9e <get+0x6e>

    if (foundloc) {
        char tempstr[20];
        switch (rwloc) {
            case RWL_cell_min_mV:
                utoa(csb_state->pack_config->cell_min_mV, tempstr,10);
     f22:	4b6a      	ldr	r3, [pc, #424]	; (10cc <get+0x29c>)
     f24:	681b      	ldr	r3, [r3, #0]
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	6818      	ldr	r0, [r3, #0]
     f2a:	e7b8      	b.n	e9e <get+0x6e>
            case RWL_module_cell_count:
                utoa(csb_state->pack_config->module_cell_count, tempstr,10);
                Board_Println(tempstr);
                break;
            case RWL_cell_charge_c_rating_cC:
              utoa(csb_state->pack_config->cell_charge_c_rating_cC, tempstr,10);
     f2c:	4b67      	ldr	r3, [pc, #412]	; (10cc <get+0x29c>)
     f2e:	681b      	ldr	r3, [r3, #0]
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	6918      	ldr	r0, [r3, #16]
     f34:	e7b3      	b.n	e9e <get+0x6e>
              Board_Println(tempstr);
              break;
            case RWL_bal_on_thresh_mV:
                utoa(csb_state->pack_config->bal_on_thresh_mV, tempstr,10);
     f36:	4b65      	ldr	r3, [pc, #404]	; (10cc <get+0x29c>)
     f38:	681b      	ldr	r3, [r3, #0]
     f3a:	681b      	ldr	r3, [r3, #0]
     f3c:	6958      	ldr	r0, [r3, #20]
     f3e:	e7ae      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_bal_off_thresh_mV:
                utoa(csb_state->pack_config->bal_off_thresh_mV, tempstr,10);
     f40:	4b62      	ldr	r3, [pc, #392]	; (10cc <get+0x29c>)
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	6998      	ldr	r0, [r3, #24]
     f48:	e7a9      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_pack_cells_p:
                utoa(csb_state->pack_config->pack_cells_p, tempstr,10);
     f4a:	4b60      	ldr	r3, [pc, #384]	; (10cc <get+0x29c>)
     f4c:	681b      	ldr	r3, [r3, #0]
     f4e:	681b      	ldr	r3, [r3, #0]
     f50:	69d8      	ldr	r0, [r3, #28]
     f52:	e7a4      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_cv_min_current_mA:
                utoa(csb_state->pack_config->cv_min_current_mA, tempstr,10);
     f54:	4b5d      	ldr	r3, [pc, #372]	; (10cc <get+0x29c>)
     f56:	681b      	ldr	r3, [r3, #0]
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	6a18      	ldr	r0, [r3, #32]
     f5c:	e79f      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_cv_min_current_ms:
                utoa(csb_state->pack_config->cv_min_current_ms, tempstr,10);
     f5e:	4b5b      	ldr	r3, [pc, #364]	; (10cc <get+0x29c>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	681b      	ldr	r3, [r3, #0]
     f64:	6a58      	ldr	r0, [r3, #36]	; 0x24
     f66:	e79a      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_cc_cell_voltage_mV:
                utoa(csb_state->pack_config->cc_cell_voltage_mV, tempstr,10);
     f68:	4b58      	ldr	r3, [pc, #352]	; (10cc <get+0x29c>)
     f6a:	681b      	ldr	r3, [r3, #0]
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
     f70:	e795      	b.n	e9e <get+0x6e>
                Board_Println(tempstr);
                break;
            case RWL_cc_charge_voltage_mV:
                utoa(csb_state->pack_config->cc_charge_voltage_mV, tempstr,10);
     f72:	4b56      	ldr	r3, [pc, #344]	; (10cc <get+0x29c>)
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	6b58      	ldr	r0, [r3, #52]	; 0x34
     f7a:	e790      	b.n	e9e <get+0x6e>
            case RWL_cv_charge_current_mA:
                utoa(csb_state->pack_config->cv_charge_current_mA, tempstr,10);
                Board_Println(tempstr);
                break;
            case RWL_bms_comm:
                Board_Println(BMS_COMM_NAMES[csb_state->pack_config->bms_comm]);
     f7c:	4b53      	ldr	r3, [pc, #332]	; (10cc <get+0x29c>)
     f7e:	681b      	ldr	r3, [r3, #0]
     f80:	681a      	ldr	r2, [r3, #0]
     f82:	2344      	movs	r3, #68	; 0x44
     f84:	5cd3      	ldrb	r3, [r2, r3]
     f86:	4a53      	ldr	r2, [pc, #332]	; (10d4 <get+0x2a4>)
     f88:	009b      	lsls	r3, r3, #2
     f8a:	5898      	ldr	r0, [r3, r2]
     f8c:	f7ff f8f2 	bl	174 <Board_Println>
                break;
     f90:	e770      	b.n	e74 <get+0x44>
                    break;
                case ROL_pack_name:
                    Board_Println(PACK_NAMES[csb_state->pack_config->pack_name]);
                    break;
                case ROL_state:
                    Board_Println(CSB_SSM_MODE_NAMES[csb_state->curr_mode]);
     f92:	4c4e      	ldr	r4, [pc, #312]	; (10cc <get+0x29c>)
     f94:	4a50      	ldr	r2, [pc, #320]	; (10d8 <get+0x2a8>)
     f96:	6823      	ldr	r3, [r4, #0]
     f98:	791b      	ldrb	r3, [r3, #4]
     f9a:	009b      	lsls	r3, r3, #2
     f9c:	5898      	ldr	r0, [r3, r2]
     f9e:	f7ff f8e9 	bl	174 <Board_Println>
                    Board_Println(CSB_INIT_MODE_NAMES[csb_state->init_state]);
     fa2:	6823      	ldr	r3, [r4, #0]
     fa4:	4a4d      	ldr	r2, [pc, #308]	; (10dc <get+0x2ac>)
     fa6:	795b      	ldrb	r3, [r3, #5]
     fa8:	009b      	lsls	r3, r3, #2
     faa:	5898      	ldr	r0, [r3, r2]
     fac:	f7ff f8e2 	bl	174 <Board_Println>
                    Board_Println(CSB_CHARGE_MODE_NAMES[csb_state->charge_state]);
     fb0:	6823      	ldr	r3, [r4, #0]
     fb2:	4a4b      	ldr	r2, [pc, #300]	; (10e0 <get+0x2b0>)
     fb4:	799b      	ldrb	r3, [r3, #6]
     fb6:	009b      	lsls	r3, r3, #2
     fb8:	5898      	ldr	r0, [r3, r2]
     fba:	f7ff f8db 	bl	174 <Board_Println>
                    break;
     fbe:	e759      	b.n	e74 <get+0x44>
                case ROL_pack_voltage_mV:
                    utoa(csb_input->pack_status->pack_voltage_mV, tempstr,10);
                    Board_Println(tempstr);
                    break;
                case ROL_fault:
                    utoa(csb_input->low_side_cntr_fault, tempstr,10);
     fc0:	4c41      	ldr	r4, [pc, #260]	; (10c8 <get+0x298>)
     fc2:	220a      	movs	r2, #10
     fc4:	6823      	ldr	r3, [r4, #0]
     fc6:	a901      	add	r1, sp, #4
     fc8:	7e98      	ldrb	r0, [r3, #26]
     fca:	f001 ff8d 	bl	2ee8 <utoa>
                    Board_Print("low side contactor fault ");
     fce:	4845      	ldr	r0, [pc, #276]	; (10e4 <get+0x2b4>)
     fd0:	f7ff f8c0 	bl	154 <Board_Print>
                    Board_Println(tempstr);
     fd4:	a801      	add	r0, sp, #4
     fd6:	f7ff f8cd 	bl	174 <Board_Println>
                    utoa(csb_input->imd_fault, tempstr,10);
     fda:	6823      	ldr	r3, [r4, #0]
     fdc:	220a      	movs	r2, #10
     fde:	7dd8      	ldrb	r0, [r3, #23]
     fe0:	a901      	add	r1, sp, #4
     fe2:	f001 ff81 	bl	2ee8 <utoa>
                    Board_Print("IMD fault ");
     fe6:	4840      	ldr	r0, [pc, #256]	; (10e8 <get+0x2b8>)
     fe8:	f7ff f8b4 	bl	154 <Board_Print>
                    Board_Println(tempstr);
     fec:	a801      	add	r0, sp, #4
     fee:	f7ff f8c1 	bl	174 <Board_Println>
                    utoa(csb_input->int_fault, tempstr,10);
     ff2:	6823      	ldr	r3, [r4, #0]
     ff4:	220a      	movs	r2, #10
     ff6:	7e18      	ldrb	r0, [r3, #24]
     ff8:	a901      	add	r1, sp, #4
     ffa:	f001 ff75 	bl	2ee8 <utoa>
                    Board_Print("interlock fault ");
     ffe:	483b      	ldr	r0, [pc, #236]	; (10ec <get+0x2bc>)
    1000:	f7ff f8a8 	bl	154 <Board_Print>
                    Board_Println(tempstr);
    1004:	a801      	add	r0, sp, #4
    1006:	f7ff f8b5 	bl	174 <Board_Println>
                    utoa(csb_input->bms_fault, tempstr,10);
    100a:	6823      	ldr	r3, [r4, #0]
    100c:	220a      	movs	r2, #10
    100e:	7e58      	ldrb	r0, [r3, #25]
    1010:	a901      	add	r1, sp, #4
    1012:	f001 ff69 	bl	2ee8 <utoa>
                    Board_Print("BMS fault ");
    1016:	4836      	ldr	r0, [pc, #216]	; (10f0 <get+0x2c0>)
    1018:	f7ff f89c 	bl	154 <Board_Print>
                    Board_Println(tempstr);
    101c:	a801      	add	r0, sp, #4
    101e:	f7ff f8a9 	bl	174 <Board_Println>
                    if (csb_input->bms_fault) {
    1022:	6823      	ldr	r3, [r4, #0]
    1024:	7e5a      	ldrb	r2, [r3, #25]
    1026:	2a00      	cmp	r2, #0
    1028:	d125      	bne.n	1076 <get+0x246>
                        utoa(csb_input->bms_error, tempstr,10);
                        Board_Print("  error ");
                        Board_Println(tempstr);
                    }
                    utoa(csb_input->elcon_status->elcon_on, tempstr,10);
    102a:	685b      	ldr	r3, [r3, #4]
    102c:	220a      	movs	r2, #10
    102e:	7a58      	ldrb	r0, [r3, #9]
    1030:	a901      	add	r1, sp, #4
    1032:	f001 ff59 	bl	2ee8 <utoa>
                    Board_Print("elcon on ");
    1036:	482f      	ldr	r0, [pc, #188]	; (10f4 <get+0x2c4>)
    1038:	f7ff f88c 	bl	154 <Board_Print>
                    Board_Println(tempstr);
    103c:	a801      	add	r0, sp, #4
    103e:	f7ff f899 	bl	174 <Board_Println>
                    if (csb_input->elcon_status->elcon_on) {
    1042:	6823      	ldr	r3, [r4, #0]
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	7a5a      	ldrb	r2, [r3, #9]
    1048:	2a00      	cmp	r2, #0
    104a:	d100      	bne.n	104e <get+0x21e>
    104c:	e712      	b.n	e74 <get+0x44>
                        if (csb_input->elcon_status->elcon_has_hardware_failure) {
    104e:	791a      	ldrb	r2, [r3, #4]
    1050:	2a00      	cmp	r2, #0
    1052:	d11d      	bne.n	1090 <get+0x260>
                          Board_Println("  elcon has hardware failure");
                        } else if (csb_input->elcon_status->elcon_over_temp_protection_on) {
    1054:	795a      	ldrb	r2, [r3, #5]
    1056:	2a00      	cmp	r2, #0
    1058:	d11e      	bne.n	1098 <get+0x268>
                          Board_Println("  elcon over temp protection on");
                        } else if (csb_input->elcon_status->elcon_is_input_voltage_wrong) {
    105a:	799a      	ldrb	r2, [r3, #6]
    105c:	2a00      	cmp	r2, #0
    105e:	d11f      	bne.n	10a0 <get+0x270>
                          Board_Println("  elcon input voltage is wrong");
                        } else if (csb_input->elcon_status->elcon_battery_voltage_not_detected) {
    1060:	79da      	ldrb	r2, [r3, #7]
    1062:	2a00      	cmp	r2, #0
    1064:	d120      	bne.n	10a8 <get+0x278>
                          Board_Println("  elcon battery voltage not detected");
                        } else if (csb_input->elcon_status->elcon_is_comms_bad) {
    1066:	7a1b      	ldrb	r3, [r3, #8]
    1068:	2b00      	cmp	r3, #0
    106a:	d100      	bne.n	106e <get+0x23e>
    106c:	e702      	b.n	e74 <get+0x44>
                          Board_Println("  elcon comms is bad");
    106e:	4822      	ldr	r0, [pc, #136]	; (10f8 <get+0x2c8>)
    1070:	f7ff f880 	bl	174 <Board_Println>
        }
        else{
            Board_Println("invalid get location");
        }
    }
}
    1074:	e6fe      	b.n	e74 <get+0x44>
                    Board_Println(tempstr);
                    utoa(csb_input->bms_fault, tempstr,10);
                    Board_Print("BMS fault ");
                    Board_Println(tempstr);
                    if (csb_input->bms_fault) {
                        utoa(csb_input->bms_error, tempstr,10);
    1076:	7ed8      	ldrb	r0, [r3, #27]
    1078:	220a      	movs	r2, #10
    107a:	a901      	add	r1, sp, #4
    107c:	f001 ff34 	bl	2ee8 <utoa>
                        Board_Print("  error ");
    1080:	481e      	ldr	r0, [pc, #120]	; (10fc <get+0x2cc>)
    1082:	f7ff f867 	bl	154 <Board_Print>
                        Board_Println(tempstr);
    1086:	a801      	add	r0, sp, #4
    1088:	f7ff f874 	bl	174 <Board_Println>
    108c:	6823      	ldr	r3, [r4, #0]
    108e:	e7cc      	b.n	102a <get+0x1fa>
                    utoa(csb_input->elcon_status->elcon_on, tempstr,10);
                    Board_Print("elcon on ");
                    Board_Println(tempstr);
                    if (csb_input->elcon_status->elcon_on) {
                        if (csb_input->elcon_status->elcon_has_hardware_failure) {
                          Board_Println("  elcon has hardware failure");
    1090:	481b      	ldr	r0, [pc, #108]	; (1100 <get+0x2d0>)
    1092:	f7ff f86f 	bl	174 <Board_Println>
    1096:	e6ed      	b.n	e74 <get+0x44>
                        } else if (csb_input->elcon_status->elcon_over_temp_protection_on) {
                          Board_Println("  elcon over temp protection on");
    1098:	481a      	ldr	r0, [pc, #104]	; (1104 <get+0x2d4>)
    109a:	f7ff f86b 	bl	174 <Board_Println>
    109e:	e6e9      	b.n	e74 <get+0x44>
                        } else if (csb_input->elcon_status->elcon_is_input_voltage_wrong) {
                          Board_Println("  elcon input voltage is wrong");
    10a0:	4819      	ldr	r0, [pc, #100]	; (1108 <get+0x2d8>)
    10a2:	f7ff f867 	bl	174 <Board_Println>
    10a6:	e6e5      	b.n	e74 <get+0x44>
                        } else if (csb_input->elcon_status->elcon_battery_voltage_not_detected) {
                          Board_Println("  elcon battery voltage not detected");
    10a8:	4818      	ldr	r0, [pc, #96]	; (110c <get+0x2dc>)
    10aa:	f7ff f863 	bl	174 <Board_Println>
    10ae:	e6e1      	b.n	e74 <get+0x44>
    10b0:	00003130 	.word	0x00003130
    10b4:	00003244 	.word	0x00003244
    10b8:	00003250 	.word	0x00003250
    10bc:	000033e4 	.word	0x000033e4
    10c0:	000030c8 	.word	0x000030c8
    10c4:	0000310c 	.word	0x0000310c
    10c8:	10000220 	.word	0x10000220
    10cc:	10000224 	.word	0x10000224
    10d0:	00003124 	.word	0x00003124
    10d4:	000031bc 	.word	0x000031bc
    10d8:	00003190 	.word	0x00003190
    10dc:	00003818 	.word	0x00003818
    10e0:	00003820 	.word	0x00003820
    10e4:	000032e4 	.word	0x000032e4
    10e8:	00003300 	.word	0x00003300
    10ec:	0000330c 	.word	0x0000330c
    10f0:	00003320 	.word	0x00003320
    10f4:	00003338 	.word	0x00003338
    10f8:	000033cc 	.word	0x000033cc
    10fc:	0000332c 	.word	0x0000332c
    1100:	00003344 	.word	0x00003344
    1104:	00003364 	.word	0x00003364
    1108:	00003384 	.word	0x00003384
    110c:	000033a4 	.word	0x000033a4

00001110 <config_def>:
            Board_Println_BLOCKING(locstring[i]); //blocking print.
        }
    }
}

static void config_def(const char * const * argv) {
    1110:	b510      	push	{r4, lr}
    1112:	6844      	ldr	r4, [r0, #4]
  bool foundloc = false;
  config_loc_label_t configloc;
  for (configloc = 0; configloc< CONL_LENGTH; ++configloc){
      if (strcmp(argv[1],config_locstring[configloc]) == 0){
    1114:	490f      	ldr	r1, [pc, #60]	; (1154 <config_def+0x44>)
    1116:	0020      	movs	r0, r4
    1118:	f001 fe28 	bl	2d6c <strcmp>
    111c:	2800      	cmp	r0, #0
    111e:	d009      	beq.n	1134 <config_def+0x24>
    1120:	490d      	ldr	r1, [pc, #52]	; (1158 <config_def+0x48>)
    1122:	0020      	movs	r0, r4
    1124:	f001 fe22 	bl	2d6c <strcmp>
    1128:	2800      	cmp	r0, #0
    112a:	d00b      	beq.n	1144 <config_def+0x34>
              break;
          case CONL_LENGTH:
              break;
      }
  } else {
      Board_Println("invalid location");
    112c:	480b      	ldr	r0, [pc, #44]	; (115c <config_def+0x4c>)
    112e:	f7ff f821 	bl	174 <Board_Println>
  }
}
    1132:	bd10      	pop	{r4, pc}
      }
  }
  if (foundloc) {
      switch (configloc) {
          case CONL_MY18:
              MY18_Pack_Config(csb_state);
    1134:	4b0a      	ldr	r3, [pc, #40]	; (1160 <config_def+0x50>)
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	f000 fcce 	bl	1ad8 <MY18_Pack_Config>
              Board_Println("Done!");
    113c:	4809      	ldr	r0, [pc, #36]	; (1164 <config_def+0x54>)
    113e:	f7ff f819 	bl	174 <Board_Println>
    1142:	e7f6      	b.n	1132 <config_def+0x22>
              break;
          case CONL_MY16:
              MY16_Pack_Config(csb_state);
    1144:	4b06      	ldr	r3, [pc, #24]	; (1160 <config_def+0x50>)
    1146:	6818      	ldr	r0, [r3, #0]
    1148:	f000 fcfc 	bl	1b44 <MY16_Pack_Config>
              Board_Println("Done!");
    114c:	4805      	ldr	r0, [pc, #20]	; (1164 <config_def+0x54>)
    114e:	f7ff f811 	bl	174 <Board_Println>
              break;
    1152:	e7ee      	b.n	1132 <config_def+0x22>
    1154:	000033fc 	.word	0x000033fc
    1158:	00003404 	.word	0x00003404
    115c:	000032a0 	.word	0x000032a0
    1160:	10000224 	.word	0x10000224
    1164:	0000327c 	.word	0x0000327c

00001168 <help>:
        }
        Board_Println("invalid location");
    }
}

static void help(const char * const * argv) {
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	491d      	ldr	r1, [pc, #116]	; (11e0 <help+0x78>)
    116c:	6846      	ldr	r6, [r0, #4]
    116e:	4d1d      	ldr	r5, [pc, #116]	; (11e4 <help+0x7c>)
    command_label_t command_i = 0;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
    1170:	2400      	movs	r4, #0
    1172:	e000      	b.n	1176 <help+0xe>
    1174:	6829      	ldr	r1, [r5, #0]
    {
        if (strcmp(argv[1],commands[command_i]) == 0){
    1176:	0030      	movs	r0, r6
    1178:	f001 fdf8 	bl	2d6c <strcmp>
    117c:	2800      	cmp	r0, #0
    117e:	d008      	beq.n	1192 <help+0x2a>
    }
}

static void help(const char * const * argv) {
    command_label_t command_i = 0;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
    1180:	3401      	adds	r4, #1
    1182:	b2e4      	uxtb	r4, r4
    1184:	3504      	adds	r5, #4
    1186:	2c07      	cmp	r4, #7
    1188:	d1f4      	bne.n	1174 <help+0xc>
            Board_Println_BLOCKING(helpstring[command_i]); //blocking print

            break;
        }
    }
    Board_Print("");
    118a:	4817      	ldr	r0, [pc, #92]	; (11e8 <help+0x80>)
    118c:	f7fe ffe2 	bl	154 <Board_Print>
        Board_Println_BLOCKING("------r/o entries------");
        for (i = ROL_FIRST; i < (rw_loc_label_t)(ROL_LENGTH); ++i){
            Board_Println_BLOCKING(locstring[i]); //blocking print.
        }
    }
}
    1190:	bd70      	pop	{r4, r5, r6, pc}
static void help(const char * const * argv) {
    command_label_t command_i = 0;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
    {
        if (strcmp(argv[1],commands[command_i]) == 0){
            Board_Println_BLOCKING(helpstring[command_i]); //blocking print
    1192:	4b16      	ldr	r3, [pc, #88]	; (11ec <help+0x84>)
    1194:	00a2      	lsls	r2, r4, #2
    1196:	58d0      	ldr	r0, [r2, r3]
    1198:	f7ff f810 	bl	1bc <Board_Println_BLOCKING>

            break;
        }
    }
    Board_Print("");
    119c:	4812      	ldr	r0, [pc, #72]	; (11e8 <help+0x80>)
    119e:	f7fe ffd9 	bl	154 <Board_Print>

    if (command_i == C_GET || command_i == C_SET)
    11a2:	2c01      	cmp	r4, #1
    11a4:	d8f4      	bhi.n	1190 <help+0x28>
    {
        rw_loc_label_t i;
        Board_Println_BLOCKING("------r/w entries------");
    11a6:	4812      	ldr	r0, [pc, #72]	; (11f0 <help+0x88>)
    11a8:	f7ff f808 	bl	1bc <Board_Println_BLOCKING>
    11ac:	4d11      	ldr	r5, [pc, #68]	; (11f4 <help+0x8c>)
    11ae:	4812      	ldr	r0, [pc, #72]	; (11f8 <help+0x90>)
    11b0:	002e      	movs	r6, r5
    11b2:	1d2c      	adds	r4, r5, #4
    11b4:	3644      	adds	r6, #68	; 0x44
    11b6:	e000      	b.n	11ba <help+0x52>
    11b8:	cc01      	ldmia	r4!, {r0}
        for (i = 0; i < RWL_LENGTH; ++i){
            Board_Println_BLOCKING(locstring[i]); //blocking print.
    11ba:	f7fe ffff 	bl	1bc <Board_Println_BLOCKING>

    if (command_i == C_GET || command_i == C_SET)
    {
        rw_loc_label_t i;
        Board_Println_BLOCKING("------r/w entries------");
        for (i = 0; i < RWL_LENGTH; ++i){
    11be:	42b4      	cmp	r4, r6
    11c0:	d1fa      	bne.n	11b8 <help+0x50>
            Board_Println_BLOCKING(locstring[i]); //blocking print.
        }

        Board_Println_BLOCKING("------r/o entries------");
    11c2:	480e      	ldr	r0, [pc, #56]	; (11fc <help+0x94>)
    11c4:	f7fe fffa 	bl	1bc <Board_Println_BLOCKING>
    11c8:	002c      	movs	r4, r5
    11ca:	480d      	ldr	r0, [pc, #52]	; (1200 <help+0x98>)
    11cc:	351c      	adds	r5, #28
    11ce:	e000      	b.n	11d2 <help+0x6a>
    11d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
    11d2:	3404      	adds	r4, #4
        for (i = ROL_FIRST; i < (rw_loc_label_t)(ROL_LENGTH); ++i){
            Board_Println_BLOCKING(locstring[i]); //blocking print.
    11d4:	f7fe fff2 	bl	1bc <Board_Println_BLOCKING>
        for (i = 0; i < RWL_LENGTH; ++i){
            Board_Println_BLOCKING(locstring[i]); //blocking print.
        }

        Board_Println_BLOCKING("------r/o entries------");
        for (i = ROL_FIRST; i < (rw_loc_label_t)(ROL_LENGTH); ++i){
    11d8:	42ac      	cmp	r4, r5
    11da:	d1f9      	bne.n	11d0 <help+0x68>
    11dc:	e7d8      	b.n	1190 <help+0x28>
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	0000340c 	.word	0x0000340c
    11e4:	000037f4 	.word	0x000037f4
    11e8:	00003334 	.word	0x00003334
    11ec:	000037f4 	.word	0x000037f4
    11f0:	00003410 	.word	0x00003410
    11f4:	00003130 	.word	0x00003130
    11f8:	00003244 	.word	0x00003244
    11fc:	00003428 	.word	0x00003428
    1200:	00003250 	.word	0x00003250

00001204 <bal>:
        Board_Println("Unrecognized command!");
    }
}


static void bal(const char * const * argv) {
    1204:	b570      	push	{r4, r5, r6, lr}
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_BALANCE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_BALANCE)) {
    1206:	4b1e      	ldr	r3, [pc, #120]	; (1280 <bal+0x7c>)
        Board_Println("Unrecognized command!");
    }
}


static void bal(const char * const * argv) {
    1208:	0004      	movs	r4, r0
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_BALANCE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_BALANCE)) {
    120a:	681b      	ldr	r3, [r3, #0]
    120c:	7918      	ldrb	r0, [r3, #4]
    120e:	2803      	cmp	r0, #3
    1210:	d004      	beq.n	121c <bal+0x18>
    1212:	2103      	movs	r1, #3
    1214:	f000 fe1a 	bl	1e4c <Is_Valid_Jump>
    1218:	2800      	cmp	r0, #0
    121a:	d020      	beq.n	125e <bal+0x5a>
        if (strcmp(argv[1],"off") == 0) {
    121c:	6864      	ldr	r4, [r4, #4]
    121e:	4919      	ldr	r1, [pc, #100]	; (1284 <bal+0x80>)
    1220:	0020      	movs	r0, r4
    1222:	f001 fda3 	bl	2d6c <strcmp>
    1226:	2800      	cmp	r0, #0
    1228:	d01d      	beq.n	1266 <bal+0x62>
            console_output->valid_mode_request = false;
            console_output->balance_mV = UINT32_MAX;
            Board_Println("bal off");
        } else {
            console_output->valid_mode_request = true;
    122a:	4b17      	ldr	r3, [pc, #92]	; (1288 <bal+0x84>)
    122c:	681d      	ldr	r5, [r3, #0]
    122e:	2301      	movs	r3, #1
    1230:	702b      	strb	r3, [r5, #0]
            console_output->mode_request = CSB_SSM_MODE_BALANCE;
    1232:	3302      	adds	r3, #2
    1234:	70ab      	strb	r3, [r5, #2]
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
    1236:	7822      	ldrb	r2, [r4, #0]
    1238:	2a00      	cmp	r2, #0
    123a:	d01e      	beq.n	127a <bal+0x76>
    123c:	2300      	movs	r3, #0
    123e:	1c60      	adds	r0, r4, #1
        res = res*10 + str[i] - '0';
    1240:	0099      	lsls	r1, r3, #2
    1242:	18cb      	adds	r3, r1, r3
    1244:	005b      	lsls	r3, r3, #1
    1246:	3001      	adds	r0, #1
    1248:	189b      	adds	r3, r3, r2
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
    124a:	1e42      	subs	r2, r0, #1
    124c:	7812      	ldrb	r2, [r2, #0]
        res = res*10 + str[i] - '0';
    124e:	3b30      	subs	r3, #48	; 0x30
    uint32_t res = 0; // Initialize result

    // Iterate through all characters of input string and
    // update result
    uint32_t i;
    for ( i = 0; str[i] != '\0'; ++i)
    1250:	2a00      	cmp	r2, #0
    1252:	d1f5      	bne.n	1240 <bal+0x3c>
            console_output->balance_mV = UINT32_MAX;
            Board_Println("bal off");
        } else {
            console_output->valid_mode_request = true;
            console_output->mode_request = CSB_SSM_MODE_BALANCE;
            console_output->balance_mV = my_atou(argv[1]);
    1254:	606b      	str	r3, [r5, #4]
            Board_Println("bal on");
    1256:	480d      	ldr	r0, [pc, #52]	; (128c <bal+0x88>)
    1258:	f7fe ff8c 	bl	174 <Board_Println>
        }
    } else {
        Board_Println("Must be in standby");
    }
}
    125c:	bd70      	pop	{r4, r5, r6, pc}
            console_output->mode_request = CSB_SSM_MODE_BALANCE;
            console_output->balance_mV = my_atou(argv[1]);
            Board_Println("bal on");
        }
    } else {
        Board_Println("Must be in standby");
    125e:	480c      	ldr	r0, [pc, #48]	; (1290 <bal+0x8c>)
    1260:	f7fe ff88 	bl	174 <Board_Println>
    }
}
    1264:	e7fa      	b.n	125c <bal+0x58>
static void bal(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_BALANCE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_BALANCE)) {
        if (strcmp(argv[1],"off") == 0) {
            console_output->valid_mode_request = false;
            console_output->balance_mV = UINT32_MAX;
    1266:	2201      	movs	r2, #1

static void bal(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_BALANCE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_BALANCE)) {
        if (strcmp(argv[1],"off") == 0) {
            console_output->valid_mode_request = false;
    1268:	4b07      	ldr	r3, [pc, #28]	; (1288 <bal+0x84>)
            console_output->balance_mV = UINT32_MAX;
    126a:	4252      	negs	r2, r2

static void bal(const char * const * argv) {
    UNUSED(argv);
    if (csb_state->curr_mode == CSB_SSM_MODE_BALANCE || Is_Valid_Jump(csb_state->curr_mode, CSB_SSM_MODE_BALANCE)) {
        if (strcmp(argv[1],"off") == 0) {
            console_output->valid_mode_request = false;
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	7018      	strb	r0, [r3, #0]
            console_output->balance_mV = UINT32_MAX;
    1270:	605a      	str	r2, [r3, #4]
            Board_Println("bal off");
    1272:	4808      	ldr	r0, [pc, #32]	; (1294 <bal+0x90>)
    1274:	f7fe ff7e 	bl	174 <Board_Println>
    1278:	e7f0      	b.n	125c <bal+0x58>
static uint32_t lastPackCurrentPrintTime = 0;
static uint32_t lastPackVoltagePrintTime = 0;

// [TODO] Fix to not parse strings falsely
uint32_t my_atou(const char *str) {
    uint32_t res = 0; // Initialize result
    127a:	2300      	movs	r3, #0
    127c:	e7ea      	b.n	1254 <bal+0x50>
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	10000224 	.word	0x10000224
    1284:	00003444 	.word	0x00003444
    1288:	10000214 	.word	0x10000214
    128c:	00003448 	.word	0x00003448
    1290:	000032d0 	.word	0x000032d0
    1294:	00003440 	.word	0x00003440

00001298 <console_init>:
}

static const EXECUTE_HANDLER handlers[] = {get, set, help, config_def, bal, chrg, measure};

void console_init(CSB_INPUT_T * input, CSB_STATE_T * state, CONSOLE_OUTPUT_T *con_output){
    csb_input = input;
    1298:	4b07      	ldr	r3, [pc, #28]	; (12b8 <console_init+0x20>)
    129a:	6018      	str	r0, [r3, #0]
    csb_state = state;
    129c:	4b07      	ldr	r3, [pc, #28]	; (12bc <console_init+0x24>)
    129e:	6019      	str	r1, [r3, #0]
    console_output = con_output;
    12a0:	4b07      	ldr	r3, [pc, #28]	; (12c0 <console_init+0x28>)
    console_output->valid_mode_request = false;
    console_output->mode_request = CSB_SSM_MODE_IDLE;
    12a2:	2101      	movs	r1, #1
static const EXECUTE_HANDLER handlers[] = {get, set, help, config_def, bal, chrg, measure};

void console_init(CSB_INPUT_T * input, CSB_STATE_T * state, CONSOLE_OUTPUT_T *con_output){
    csb_input = input;
    csb_state = state;
    console_output = con_output;
    12a4:	601a      	str	r2, [r3, #0]
    console_output->valid_mode_request = false;
    12a6:	2300      	movs	r3, #0
    console_output->mode_request = CSB_SSM_MODE_IDLE;
    12a8:	7091      	strb	r1, [r2, #2]

void console_init(CSB_INPUT_T * input, CSB_STATE_T * state, CONSOLE_OUTPUT_T *con_output){
    csb_input = input;
    csb_state = state;
    console_output = con_output;
    console_output->valid_mode_request = false;
    12aa:	7013      	strb	r3, [r2, #0]
    console_output->mode_request = CSB_SSM_MODE_IDLE;
    console_output->config_default = false;
    12ac:	7053      	strb	r3, [r2, #1]

    console_output->measure_on = false;
    12ae:	7213      	strb	r3, [r2, #8]
    console_output->measure_packcurrent = false;
    12b0:	7253      	strb	r3, [r2, #9]
    console_output->measure_packvoltage = false;
    12b2:	7293      	strb	r3, [r2, #10]
}
    12b4:	4770      	bx	lr
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	10000220 	.word	0x10000220
    12bc:	10000224 	.word	0x10000224
    12c0:	10000214 	.word	0x10000214

000012c4 <executerl>:

void executerl(int32_t argc, const char * const * argv){
    12c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c6:	4647      	mov	r7, r8
    12c8:	680e      	ldr	r6, [r1, #0]
    12ca:	b480      	push	{r7}
    12cc:	4688      	mov	r8, r1
    12ce:	0007      	movs	r7, r0
    12d0:	4d11      	ldr	r5, [pc, #68]	; (1318 <executerl+0x54>)
    12d2:	4912      	ldr	r1, [pc, #72]	; (131c <executerl+0x58>)
    uint32_t command_i = 0;
    bool found_command = false;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
    12d4:	2400      	movs	r4, #0
    12d6:	e000      	b.n	12da <executerl+0x16>
    12d8:	6829      	ldr	r1, [r5, #0]
    {
        if (strcmp(argv[0],commands[command_i]) == 0){
    12da:	0030      	movs	r0, r6
    12dc:	f001 fd46 	bl	2d6c <strcmp>
    12e0:	2800      	cmp	r0, #0
    12e2:	d009      	beq.n	12f8 <executerl+0x34>
}

void executerl(int32_t argc, const char * const * argv){
    uint32_t command_i = 0;
    bool found_command = false;
    for (command_i = 0; command_i < NUMCOMMANDS; ++command_i)
    12e4:	3401      	adds	r4, #1
    12e6:	3504      	adds	r5, #4
    12e8:	2c07      	cmp	r4, #7
    12ea:	d1f5      	bne.n	12d8 <executerl+0x14>
        else {
            Board_Println("incorrect number of args");
        }
    }
    else{
        Board_Println("Unrecognized command");
    12ec:	480c      	ldr	r0, [pc, #48]	; (1320 <executerl+0x5c>)
    12ee:	f7fe ff41 	bl	174 <Board_Println>
    }
}
    12f2:	bc04      	pop	{r2}
    12f4:	4690      	mov	r8, r2
    12f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            found_command = true;
            break;
        }
    }
    if (found_command) {
        if (nargs[command_i] == (uint32_t)(argc-1))
    12f8:	4b0a      	ldr	r3, [pc, #40]	; (1324 <executerl+0x60>)
    12fa:	3f01      	subs	r7, #1
    12fc:	5d1b      	ldrb	r3, [r3, r4]
    12fe:	42bb      	cmp	r3, r7
    1300:	d003      	beq.n	130a <executerl+0x46>
        {
            handlers[command_i](argv);
        }
        else {
            Board_Println("incorrect number of args");
    1302:	4809      	ldr	r0, [pc, #36]	; (1328 <executerl+0x64>)
    1304:	f7fe ff36 	bl	174 <Board_Println>
        }
    }
    else{
        Board_Println("Unrecognized command");
    }
}
    1308:	e7f3      	b.n	12f2 <executerl+0x2e>
        }
    }
    if (found_command) {
        if (nargs[command_i] == (uint32_t)(argc-1))
        {
            handlers[command_i](argv);
    130a:	4b08      	ldr	r3, [pc, #32]	; (132c <executerl+0x68>)
    130c:	00a4      	lsls	r4, r4, #2
    130e:	58e3      	ldr	r3, [r4, r3]
    1310:	4640      	mov	r0, r8
    1312:	4798      	blx	r3
    1314:	e7ed      	b.n	12f2 <executerl+0x2e>
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	000037f4 	.word	0x000037f4
    131c:	0000340c 	.word	0x0000340c
    1320:	0000346c 	.word	0x0000346c
    1324:	00003810 	.word	0x00003810
    1328:	00003450 	.word	0x00003450
    132c:	000031a0 	.word	0x000031a0

00001330 <Output_Measurements>:

void Output_Measurements(
        CONSOLE_OUTPUT_T *console_output,
        CSB_INPUT_T* csb_input,
        uint32_t msTicks
) {
    1330:	b5f0      	push	{r4, r5, r6, r7, lr}

    char tempstr[20];

    if(console_output->measure_on) {
    1332:	7a03      	ldrb	r3, [r0, #8]

void Output_Measurements(
        CONSOLE_OUTPUT_T *console_output,
        CSB_INPUT_T* csb_input,
        uint32_t msTicks
) {
    1334:	b087      	sub	sp, #28
    1336:	0004      	movs	r4, r0
    1338:	000e      	movs	r6, r1
    133a:	0015      	movs	r5, r2

    char tempstr[20];

    if(console_output->measure_on) {
    133c:	2b00      	cmp	r3, #0
    133e:	d013      	beq.n	1368 <Output_Measurements+0x38>

        bool printPackCurrent = (msTicks - lastPackCurrentPrintTime) >
                PACK_CURRENT_PRINT_PERIOD_ms;
        if(console_output->measure_packcurrent && printPackCurrent) {
    1340:	7a43      	ldrb	r3, [r0, #9]
    1342:	2b00      	cmp	r3, #0
    1344:	d006      	beq.n	1354 <Output_Measurements+0x24>

    char tempstr[20];

    if(console_output->measure_on) {

        bool printPackCurrent = (msTicks - lastPackCurrentPrintTime) >
    1346:	4f22      	ldr	r7, [pc, #136]	; (13d0 <Output_Measurements+0xa0>)
                PACK_CURRENT_PRINT_PERIOD_ms;
        if(console_output->measure_packcurrent && printPackCurrent) {
    1348:	683b      	ldr	r3, [r7, #0]
    134a:	1ad3      	subs	r3, r2, r3
    134c:	22fa      	movs	r2, #250	; 0xfa
    134e:	0092      	lsls	r2, r2, #2
    1350:	4293      	cmp	r3, r2
    1352:	d824      	bhi.n	139e <Output_Measurements+0x6e>
            lastPackCurrentPrintTime = msTicks;
        }

        bool printPackVoltage = (msTicks - lastPackVoltagePrintTime) >
                PACK_VOLTAGE_PRINT_PERIOD_ms;
        if(console_output->measure_packvoltage && printPackVoltage) {
    1354:	7aa3      	ldrb	r3, [r4, #10]
    1356:	2b00      	cmp	r3, #0
    1358:	d006      	beq.n	1368 <Output_Measurements+0x38>
    135a:	22fa      	movs	r2, #250	; 0xfa
            Board_Println_BLOCKING(tempstr); // print pack current
            Board_Print_BLOCKING("\n");
            lastPackCurrentPrintTime = msTicks;
        }

        bool printPackVoltage = (msTicks - lastPackVoltagePrintTime) >
    135c:	4c1d      	ldr	r4, [pc, #116]	; (13d4 <Output_Measurements+0xa4>)
                PACK_VOLTAGE_PRINT_PERIOD_ms;
        if(console_output->measure_packvoltage && printPackVoltage) {
    135e:	0092      	lsls	r2, r2, #2
    1360:	6823      	ldr	r3, [r4, #0]
    1362:	1aeb      	subs	r3, r5, r3
    1364:	4293      	cmp	r3, r2
    1366:	d801      	bhi.n	136c <Output_Measurements+0x3c>
            Board_Println_BLOCKING(tempstr); // print pack voltage
            Board_Print_BLOCKING("\n");
            lastPackVoltagePrintTime = msTicks;
        }
    }
}
    1368:	b007      	add	sp, #28
    136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }

        bool printPackVoltage = (msTicks - lastPackVoltagePrintTime) >
                PACK_VOLTAGE_PRINT_PERIOD_ms;
        if(console_output->measure_packvoltage && printPackVoltage) {
            utoa(msTicks, tempstr, 10); // print msTicks
    136c:	220a      	movs	r2, #10
    136e:	a901      	add	r1, sp, #4
    1370:	0028      	movs	r0, r5
    1372:	f001 fdb9 	bl	2ee8 <utoa>
            Board_Print_BLOCKING(tempstr);
    1376:	a801      	add	r0, sp, #4
    1378:	f7fe ff14 	bl	1a4 <Board_Print_BLOCKING>
            Board_Print_BLOCKING(",pvolt,");
    137c:	4816      	ldr	r0, [pc, #88]	; (13d8 <Output_Measurements+0xa8>)
    137e:	f7fe ff11 	bl	1a4 <Board_Print_BLOCKING>
            utoa(csb_input->pack_status->pack_voltage_mV, tempstr, 10);
    1382:	6833      	ldr	r3, [r6, #0]
    1384:	220a      	movs	r2, #10
    1386:	6898      	ldr	r0, [r3, #8]
    1388:	a901      	add	r1, sp, #4
    138a:	f001 fdad 	bl	2ee8 <utoa>
            Board_Println_BLOCKING(tempstr); // print pack voltage
    138e:	a801      	add	r0, sp, #4
    1390:	f7fe ff14 	bl	1bc <Board_Println_BLOCKING>
            Board_Print_BLOCKING("\n");
    1394:	4811      	ldr	r0, [pc, #68]	; (13dc <Output_Measurements+0xac>)
    1396:	f7fe ff05 	bl	1a4 <Board_Print_BLOCKING>
            lastPackVoltagePrintTime = msTicks;
    139a:	6025      	str	r5, [r4, #0]
        }
    }
}
    139c:	e7e4      	b.n	1368 <Output_Measurements+0x38>
    if(console_output->measure_on) {

        bool printPackCurrent = (msTicks - lastPackCurrentPrintTime) >
                PACK_CURRENT_PRINT_PERIOD_ms;
        if(console_output->measure_packcurrent && printPackCurrent) {
            utoa(msTicks, tempstr, 10); // print msTicks
    139e:	220a      	movs	r2, #10
    13a0:	a901      	add	r1, sp, #4
    13a2:	0028      	movs	r0, r5
    13a4:	f001 fda0 	bl	2ee8 <utoa>
            Board_Print_BLOCKING(tempstr);
    13a8:	a801      	add	r0, sp, #4
    13aa:	f7fe fefb 	bl	1a4 <Board_Print_BLOCKING>
            Board_Print_BLOCKING(",pcurr,");
    13ae:	480c      	ldr	r0, [pc, #48]	; (13e0 <Output_Measurements+0xb0>)
    13b0:	f7fe fef8 	bl	1a4 <Board_Print_BLOCKING>
            utoa(csb_input->pack_status->pack_current_mA, tempstr, 10);
    13b4:	6833      	ldr	r3, [r6, #0]
    13b6:	220a      	movs	r2, #10
    13b8:	6858      	ldr	r0, [r3, #4]
    13ba:	a901      	add	r1, sp, #4
    13bc:	f001 fd94 	bl	2ee8 <utoa>
            Board_Println_BLOCKING(tempstr); // print pack current
    13c0:	a801      	add	r0, sp, #4
    13c2:	f7fe fefb 	bl	1bc <Board_Println_BLOCKING>
            Board_Print_BLOCKING("\n");
    13c6:	4805      	ldr	r0, [pc, #20]	; (13dc <Output_Measurements+0xac>)
    13c8:	f7fe feec 	bl	1a4 <Board_Print_BLOCKING>
            lastPackCurrentPrintTime = msTicks;
    13cc:	603d      	str	r5, [r7, #0]
    13ce:	e7c1      	b.n	1354 <Output_Measurements+0x24>
    13d0:	10000218 	.word	0x10000218
    13d4:	1000021c 	.word	0x1000021c
    13d8:	00003490 	.word	0x00003490
    13dc:	0000348c 	.word	0x0000348c
    13e0:	00003484 	.word	0x00003484

000013e4 <Init_Structs>:

// memory for console
static microrl_t rl;
static CONSOLE_OUTPUT_T console_output;

void Init_Structs(void) {
    13e4:	b570      	push	{r4, r5, r6, lr}
  csb_output.voltage_req_mV = 0;
    13e6:	2400      	movs	r4, #0
    13e8:	4b23      	ldr	r3, [pc, #140]	; (1478 <Init_Structs+0x94>)
  csb_output.current_req_mA = 0;
  csb_output.send_bms_config = false;
  csb_output.close_contactors = false;
  csb_output.charger_on = false;

  csb_state.pack_config = &pack_config;
    13ea:	4d24      	ldr	r5, [pc, #144]	; (147c <Init_Structs+0x98>)
    13ec:	4e24      	ldr	r6, [pc, #144]	; (1480 <Init_Structs+0x9c>)
// memory for console
static microrl_t rl;
static CONSOLE_OUTPUT_T console_output;

void Init_Structs(void) {
  csb_output.voltage_req_mV = 0;
    13ee:	601c      	str	r4, [r3, #0]
  csb_output.current_req_mA = 0;
    13f0:	605c      	str	r4, [r3, #4]
  csb_output.send_bms_config = false;
    13f2:	721c      	strb	r4, [r3, #8]
  csb_output.close_contactors = false;
    13f4:	725c      	strb	r4, [r3, #9]
  csb_output.charger_on = false;
    13f6:	729c      	strb	r4, [r3, #10]
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
    13f8:	4822      	ldr	r0, [pc, #136]	; (1484 <Init_Structs+0xa0>)
  csb_state.pack_config = &pack_config;
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
    13fa:	4b23      	ldr	r3, [pc, #140]	; (1488 <Init_Structs+0xa4>)
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
    13fc:	22b4      	movs	r2, #180	; 0xb4
    13fe:	2100      	movs	r1, #0
  csb_state.pack_config = &pack_config;
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
  csb_state.init_state = CSB_INIT_OFF;
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
    1400:	60b3      	str	r3, [r6, #8]
  csb_output.current_req_mA = 0;
  csb_output.send_bms_config = false;
  csb_output.close_contactors = false;
  csb_output.charger_on = false;

  csb_state.pack_config = &pack_config;
    1402:	6035      	str	r5, [r6, #0]
  csb_state.curr_mode = CSB_SSM_MODE_INIT;
    1404:	7134      	strb	r4, [r6, #4]
  csb_state.init_state = CSB_INIT_OFF;
    1406:	7174      	strb	r4, [r6, #5]
  csb_state.charge_state = CSB_CHARGE_OFF;
    1408:	71b4      	strb	r4, [r6, #6]
  csb_state.idle_state = CSB_IDLE_OFF;
    140a:	71f4      	strb	r4, [r6, #7]
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
    140c:	6130      	str	r0, [r6, #16]
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
    140e:	f001 fc67 	bl	2ce0 <memset>
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
    1412:	22b4      	movs	r2, #180	; 0xb4
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
    1414:	481d      	ldr	r0, [pc, #116]	; (148c <Init_Structs+0xa8>)
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
    1416:	0092      	lsls	r2, r2, #2
    1418:	2100      	movs	r1, #0
  csb_state.charge_state = CSB_CHARGE_OFF;
  csb_state.idle_state = CSB_IDLE_OFF;
  csb_state.curr_baud_rate = BMS_CAN_BAUD;
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
    141a:	60f0      	str	r0, [r6, #12]
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
    141c:	f001 fc60 	bl	2ce0 <memset>
  pack_config.cv_min_current_mA = 0;
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
    1420:	2201      	movs	r2, #1
    1422:	4b1b      	ldr	r3, [pc, #108]	; (1490 <Init_Structs+0xac>)
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
  csb_input.elcon_status = &elcon_status;
  csb_input.pack_status = &pack_status;
    1424:	491b      	ldr	r1, [pc, #108]	; (1494 <Init_Structs+0xb0>)
  pack_config.cv_min_current_mA = 0;
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
    1426:	721a      	strb	r2, [r3, #8]
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
    1428:	4a1b      	ldr	r2, [pc, #108]	; (1498 <Init_Structs+0xb4>)
  csb_input.elcon_status = &elcon_status;
  csb_input.pack_status = &pack_status;
    142a:	6019      	str	r1, [r3, #0]
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
    142c:	6812      	ldr	r2, [r2, #0]
  pack_config.cv_min_current_ms = 0;
  pack_config.cc_cell_voltage_mV = 0;

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
    142e:	60dc      	str	r4, [r3, #12]
  csb_input.msTicks = msTicks;
    1430:	611a      	str	r2, [r3, #16]
  csb_input.elcon_status = &elcon_status;
    1432:	4a1a      	ldr	r2, [pc, #104]	; (149c <Init_Structs+0xb8>)
  csb_input.pack_status = &pack_status;
  csb_input.balance_req = false;
    1434:	755c      	strb	r4, [r3, #21]

  //assign csb_inputs
  csb_input.mode_request = CSB_SSM_MODE_IDLE;
  csb_input.balance_mV = 0; // console request balance to mV
  csb_input.msTicks = msTicks;
  csb_input.elcon_status = &elcon_status;
    1436:	605a      	str	r2, [r3, #4]
  csb_input.pack_status = &pack_status;
  csb_input.balance_req = false;
  csb_input.contactors_closed = false;
    1438:	759c      	strb	r4, [r3, #22]
  csb_input.receive_bms_config = false;
    143a:	751c      	strb	r4, [r3, #20]
  csb_input.imd_fault = false;
    143c:	75dc      	strb	r4, [r3, #23]
  csb_input.int_fault = false;
    143e:	761c      	strb	r4, [r3, #24]
  csb_input.bms_fault = false;
    1440:	765c      	strb	r4, [r3, #25]
  csb_input.low_side_cntr_fault = false;
    1442:	769c      	strb	r4, [r3, #26]
  csb_input.bms_error = CAN_BMSERRORS_NONE;
    1444:	76dc      	strb	r4, [r3, #27]

  pack_status.pack_cell_max_mV = 0;
  pack_status.pack_current_mA = 0;
  pack_status.pack_voltage_mV = 0;

  elcon_status.elcon_output_voltage = 0;
    1446:	2300      	movs	r3, #0
  csb_state.balance_waitingoff = balance_waitingoff;
  memset(balance_waitingoff, 0, sizeof(balance_waitingoff[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);
  csb_state.balance_timeon = balance_timeon;
  memset(balance_timeon, 0, sizeof(balance_timeon[0])*MAX_NUM_MODULES*MAX_CELLS_PER_MODULE);

  pack_config.module_cell_count = 0;
    1448:	62ec      	str	r4, [r5, #44]	; 0x2c
  pack_config.cell_min_mV = 0;
    144a:	602c      	str	r4, [r5, #0]
  pack_config.cell_max_mV = 0;
    144c:	606c      	str	r4, [r5, #4]
  pack_config.cell_capacity_cAh = 0;
    144e:	60ac      	str	r4, [r5, #8]
  pack_config.num_modules = 0;
    1450:	60ec      	str	r4, [r5, #12]
  pack_config.cell_charge_c_rating_cC = 0;
    1452:	612c      	str	r4, [r5, #16]
  pack_config.bal_on_thresh_mV = 0;
    1454:	616c      	str	r4, [r5, #20]
  pack_config.bal_off_thresh_mV = 0;
    1456:	61ac      	str	r4, [r5, #24]
  pack_config.pack_cells_p = 0;
    1458:	61ec      	str	r4, [r5, #28]
  pack_config.cv_min_current_mA = 0;
    145a:	622c      	str	r4, [r5, #32]
  pack_config.cv_min_current_ms = 0;
    145c:	626c      	str	r4, [r5, #36]	; 0x24
  pack_config.cc_cell_voltage_mV = 0;
    145e:	62ac      	str	r4, [r5, #40]	; 0x28
  csb_input.int_fault = false;
  csb_input.bms_fault = false;
  csb_input.low_side_cntr_fault = false;
  csb_input.bms_error = CAN_BMSERRORS_NONE;

  pack_status.pack_cell_max_mV = 0;
    1460:	600c      	str	r4, [r1, #0]
  pack_status.pack_current_mA = 0;
    1462:	604c      	str	r4, [r1, #4]
  pack_status.pack_voltage_mV = 0;
    1464:	608c      	str	r4, [r1, #8]

  elcon_status.elcon_output_voltage = 0;
    1466:	8014      	strh	r4, [r2, #0]
  elcon_status.elcon_output_current = 0;
    1468:	8054      	strh	r4, [r2, #2]
  elcon_status.elcon_has_hardware_failure = false;
    146a:	7113      	strb	r3, [r2, #4]
  elcon_status.elcon_over_temp_protection_on = false;
    146c:	7153      	strb	r3, [r2, #5]
  elcon_status.elcon_is_input_voltage_wrong = false;
    146e:	7193      	strb	r3, [r2, #6]
  elcon_status.elcon_battery_voltage_not_detected = false;
    1470:	71d3      	strb	r3, [r2, #7]
  elcon_status.elcon_on = false;
    1472:	7253      	strb	r3, [r2, #9]
  elcon_status.elcon_charging = false;
    1474:	7293      	strb	r3, [r2, #10]
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	10000348 	.word	0x10000348
    147c:	100002e8 	.word	0x100002e8
    1480:	100006e4 	.word	0x100006e4
    1484:	10000234 	.word	0x10000234
    1488:	0007a120 	.word	0x0007a120
    148c:	10000414 	.word	0x10000414
    1490:	10000354 	.word	0x10000354
    1494:	1000033c 	.word	0x1000033c
    1498:	10000738 	.word	0x10000738
    149c:	10000330 	.word	0x10000330

000014a0 <Process_Input>:
void Process_Output(CSB_INPUT_T* csb_input, CSB_OUTPUT_T* csb_output, CSB_STATE_T* csb_state) {
  Board_Contactors_Set(csb_output->close_contactors);
  Board_Can_ProcessOutput(csb_input, csb_state, csb_output);
}

void Process_Input(CSB_INPUT_T* csb_input, CSB_STATE_T* csb_state) {
    14a0:	b570      	push	{r4, r5, r6, lr}
    14a2:	0004      	movs	r4, r0
    14a4:	000d      	movs	r5, r1
  Board_Can_ProcessInput(csb_input, csb_state);
    14a6:	f7fe ff71 	bl	38c <Board_Can_ProcessInput>
  Board_GetModeRequest(&console_output, csb_input, csb_state);
    14aa:	002a      	movs	r2, r5
    14ac:	0021      	movs	r1, r4
    14ae:	4806      	ldr	r0, [pc, #24]	; (14c8 <Process_Input+0x28>)
    14b0:	f7fe feda 	bl	268 <Board_GetModeRequest>
  csb_input->msTicks = msTicks;
    14b4:	4b05      	ldr	r3, [pc, #20]	; (14cc <Process_Input+0x2c>)
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	6123      	str	r3, [r4, #16]
  csb_input->contactors_closed = Board_Contactors_Closed();
    14ba:	f7fe fed1 	bl	260 <Board_Contactors_Closed>
    14be:	75a0      	strb	r0, [r4, #22]
  Board_Check_Faults(csb_input);
    14c0:	0020      	movs	r0, r4
    14c2:	f7fe fedf 	bl	284 <Board_Check_Faults>
}
    14c6:	bd70      	pop	{r4, r5, r6, pc}
    14c8:	10000228 	.word	0x10000228
    14cc:	10000738 	.word	0x10000738

000014d0 <Process_Keyboard>:

void Process_Keyboard(void) {
    14d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t readln = Board_Read(str,50);
    14d2:	4e08      	ldr	r6, [pc, #32]	; (14f4 <Process_Keyboard+0x24>)
    14d4:	2132      	movs	r1, #50	; 0x32
    14d6:	0030      	movs	r0, r6
    14d8:	f7fe fe58 	bl	18c <Board_Read>
    14dc:	1e05      	subs	r5, r0, #0
    uint32_t i;
    for(i = 0; i < readln; i++) {
    14de:	d008      	beq.n	14f2 <Process_Keyboard+0x22>
    14e0:	2400      	movs	r4, #0
    14e2:	4f05      	ldr	r7, [pc, #20]	; (14f8 <Process_Keyboard+0x28>)
        microrl_insert_char(&rl, str[i]);
    14e4:	5d31      	ldrb	r1, [r6, r4]
    14e6:	0038      	movs	r0, r7
}

void Process_Keyboard(void) {
    uint32_t readln = Board_Read(str,50);
    uint32_t i;
    for(i = 0; i < readln; i++) {
    14e8:	3401      	adds	r4, #1
        microrl_insert_char(&rl, str[i]);
    14ea:	f000 fa55 	bl	1998 <microrl_insert_char>
}

void Process_Keyboard(void) {
    uint32_t readln = Board_Read(str,50);
    uint32_t i;
    for(i = 0; i < readln; i++) {
    14ee:	42a5      	cmp	r5, r4
    14f0:	d1f8      	bne.n	14e4 <Process_Keyboard+0x14>
        microrl_insert_char(&rl, str[i]);
    }
}
    14f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14f4:	10000370 	.word	0x10000370
    14f8:	1000037c 	.word	0x1000037c

000014fc <main>:

int main(void) {
    14fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14fe:	4647      	mov	r7, r8
    1500:	b480      	push	{r7}
  Init_Structs();
    1502:	f7ff ff6f 	bl	13e4 <Init_Structs>
  Board_UART_Init(UART_BAUD);
    1506:	20e1      	movs	r0, #225	; 0xe1
    1508:	0200      	lsls	r0, r0, #8
    150a:	f7fe fe67 	bl	1dc <Board_UART_Init>
  Board_Chip_Init();
    150e:	f7fe fe03 	bl	118 <Board_Chip_Init>
  Board_GPIO_Init();
    1512:	f000 fb4d 	bl	1bb0 <Board_GPIO_Init>

  MY18_Pack_Config(&csb_state);
    1516:	4d1b      	ldr	r5, [pc, #108]	; (1584 <main+0x88>)
    1518:	0028      	movs	r0, r5
    151a:	f000 fadd 	bl	1ad8 <MY18_Pack_Config>
  SSM_Init(&csb_state);
    151e:	0028      	movs	r0, r5
    1520:	f000 fc8a 	bl	1e38 <SSM_Init>
  Board_Can_Init(CSB_CAN_BAUD);
    1524:	4818      	ldr	r0, [pc, #96]	; (1588 <main+0x8c>)
    1526:	f7fe fe55 	bl	1d4 <Board_Can_Init>

  //setup readline
  microrl_init(&rl, Board_Print);
    152a:	4c18      	ldr	r4, [pc, #96]	; (158c <main+0x90>)
    152c:	4918      	ldr	r1, [pc, #96]	; (1590 <main+0x94>)
    152e:	0020      	movs	r0, r4
    1530:	f000 f9b0 	bl	1894 <microrl_init>
  microrl_set_execute_callback(&rl, executerl);
    1534:	0020      	movs	r0, r4
    1536:	4917      	ldr	r1, [pc, #92]	; (1594 <main+0x98>)
    1538:	f000 f9ce 	bl	18d8 <microrl_set_execute_callback>
  console_init(&csb_input, &csb_state, &console_output);
    153c:	4f16      	ldr	r7, [pc, #88]	; (1598 <main+0x9c>)
    153e:	4c17      	ldr	r4, [pc, #92]	; (159c <main+0xa0>)
    1540:	003a      	movs	r2, r7
    1542:	0029      	movs	r1, r5
    1544:	0020      	movs	r0, r4
    1546:	f7ff fea7 	bl	1298 <console_init>
    154a:	4b15      	ldr	r3, [pc, #84]	; (15a0 <main+0xa4>)
    154c:	4e15      	ldr	r6, [pc, #84]	; (15a4 <main+0xa8>)
    154e:	4698      	mov	r8, r3

  while(1) {
    Process_Keyboard();
    1550:	f7ff ffbe 	bl	14d0 <Process_Keyboard>
    Process_Input(&csb_input, &csb_state);
    1554:	0029      	movs	r1, r5
    1556:	0020      	movs	r0, r4
    1558:	f7ff ffa2 	bl	14a0 <Process_Input>
    SSM_Step(&csb_input, &csb_state, &csb_output);
    155c:	0032      	movs	r2, r6
    155e:	0029      	movs	r1, r5
    1560:	0020      	movs	r0, r4
    1562:	f000 fc91 	bl	1e88 <SSM_Step>
  elcon_status.elcon_on = false;
  elcon_status.elcon_charging = false;
}

void Process_Output(CSB_INPUT_T* csb_input, CSB_OUTPUT_T* csb_output, CSB_STATE_T* csb_state) {
  Board_Contactors_Set(csb_output->close_contactors);
    1566:	7a70      	ldrb	r0, [r6, #9]
    1568:	f7fe fe88 	bl	27c <Board_Contactors_Set>
  Board_Can_ProcessOutput(csb_input, csb_state, csb_output);
    156c:	0032      	movs	r2, r6
    156e:	0029      	movs	r1, r5
    1570:	0020      	movs	r0, r4
    1572:	f7fe ffb7 	bl	4e4 <Board_Can_ProcessOutput>
  while(1) {
    Process_Keyboard();
    Process_Input(&csb_input, &csb_state);
    SSM_Step(&csb_input, &csb_state, &csb_output);
    Process_Output(&csb_input, &csb_output, &csb_state);
    Output_Measurements(&console_output, &csb_input, msTicks);
    1576:	4643      	mov	r3, r8
    1578:	0021      	movs	r1, r4
    157a:	681a      	ldr	r2, [r3, #0]
    157c:	0038      	movs	r0, r7
    157e:	f7ff fed7 	bl	1330 <Output_Measurements>
    1582:	e7e5      	b.n	1550 <main+0x54>
    1584:	100006e4 	.word	0x100006e4
    1588:	0003d090 	.word	0x0003d090
    158c:	1000037c 	.word	0x1000037c
    1590:	00000155 	.word	0x00000155
    1594:	000012c5 	.word	0x000012c5
    1598:	10000228 	.word	0x10000228
    159c:	10000354 	.word	0x10000354
    15a0:	10000738 	.word	0x10000738
    15a4:	10000348 	.word	0x10000348

000015a8 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
    15a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15aa:	0005      	movs	r5, r0
    15ac:	b083      	sub	sp, #12
    char tmp_str [6] = {0,};
    15ae:	2206      	movs	r2, #6
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
    15b0:	000f      	movs	r7, r1
    char tmp_str [6] = {0,};
    15b2:	4668      	mov	r0, sp
    15b4:	2100      	movs	r1, #0
    15b6:	f001 fb93 	bl	2ce0 <memset>
    int i = 0, j;
    if (nmb <= 0xFFFF) {
        while (nmb > 0) {
    15ba:	4b11      	ldr	r3, [pc, #68]	; (1600 <u16bit_to_str+0x58>)
    15bc:	1e6a      	subs	r2, r5, #1
    15be:	429a      	cmp	r2, r3
    15c0:	d819      	bhi.n	15f6 <u16bit_to_str+0x4e>
    15c2:	2600      	movs	r6, #0
            tmp_str[i++] = (nmb % 10) + '0';
    15c4:	3601      	adds	r6, #1
    15c6:	1e73      	subs	r3, r6, #1
    15c8:	446b      	add	r3, sp
    15ca:	0028      	movs	r0, r5
    15cc:	210a      	movs	r1, #10
    15ce:	001c      	movs	r4, r3
    15d0:	f001 faf6 	bl	2bc0 <__aeabi_uidivmod>
    15d4:	3130      	adds	r1, #48	; 0x30
    15d6:	7021      	strb	r1, [r4, #0]
            nmb /=10;
    15d8:	0028      	movs	r0, r5
    15da:	210a      	movs	r1, #10
    15dc:	f001 fa6a 	bl	2ab4 <__aeabi_uidiv>
    15e0:	1e05      	subs	r5, r0, #0
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
    char tmp_str [6] = {0,};
    int i = 0, j;
    if (nmb <= 0xFFFF) {
        while (nmb > 0) {
    15e2:	d1ef      	bne.n	15c4 <u16bit_to_str+0x1c>
    15e4:	0023      	movs	r3, r4
    15e6:	003a      	movs	r2, r7
    15e8:	19bf      	adds	r7, r7, r6
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    15ea:	7819      	ldrb	r1, [r3, #0]
    15ec:	3b01      	subs	r3, #1
    15ee:	7011      	strb	r1, [r2, #0]
    15f0:	3201      	adds	r2, #1
    if (nmb <= 0xFFFF) {
        while (nmb > 0) {
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
    15f2:	4297      	cmp	r7, r2
    15f4:	d1f9      	bne.n	15ea <u16bit_to_str+0x42>
            *(buf++) = tmp_str [i-j-1];
    }
    *buf = '\0';
    15f6:	2300      	movs	r3, #0
    return buf;
}
    15f8:	0038      	movs	r0, r7
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    }
    *buf = '\0';
    15fa:	703b      	strb	r3, [r7, #0]
    return buf;
}
    15fc:	b003      	add	sp, #12
    15fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1600:	0000fffe 	.word	0x0000fffe

00001604 <terminal_reset_cursor.isra.3>:
#endif  
    pThis->print (str);
}

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
    1604:	b500      	push	{lr}
    1606:	b085      	sub	sp, #20
    snprintf (str, 16, "\033[%dD\033[%dC", \
                        _COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
    char *endstr;
    strcpy (str, "\033[");
    1608:	466a      	mov	r2, sp
    160a:	4b09      	ldr	r3, [pc, #36]	; (1630 <terminal_reset_cursor.isra.3+0x2c>)
    160c:	881b      	ldrh	r3, [r3, #0]
    160e:	8013      	strh	r3, [r2, #0]
        while (nmb > 0) {
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    1610:	2335      	movs	r3, #53	; 0x35
    1612:	7093      	strb	r3, [r2, #2]
    1614:	3301      	adds	r3, #1
    1616:	70d3      	strb	r3, [r2, #3]

#else
    char *endstr;
    strcpy (str, "\033[");
    endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
    strcpy (endstr, "D\033["); endstr += 3;
    1618:	4b06      	ldr	r3, [pc, #24]	; (1634 <terminal_reset_cursor.isra.3+0x30>)
    161a:	9301      	str	r3, [sp, #4]
        while (nmb > 0) {
            tmp_str[i++] = (nmb % 10) + '0';
            nmb /=10;
        }
        for (j = 0; j < i; ++j)
            *(buf++) = tmp_str [i-j-1];
    161c:	2333      	movs	r3, #51	; 0x33
    161e:	71d3      	strb	r3, [r2, #7]
    char *endstr;
    strcpy (str, "\033[");
    endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
    strcpy (endstr, "D\033["); endstr += 3;
    endstr = u16bit_to_str (_PROMPT_LEN, endstr);
    strcpy (endstr, "C");
    1620:	2243      	movs	r2, #67	; 0x43
    1622:	ab02      	add	r3, sp, #8
    1624:	801a      	strh	r2, [r3, #0]
#endif
    pThis->print (str);
    1626:	6803      	ldr	r3, [r0, #0]
    1628:	4668      	mov	r0, sp
    162a:	4798      	blx	r3
}
    162c:	b005      	add	sp, #20
    162e:	bd00      	pop	{pc}
    1630:	00003a50 	.word	0x00003a50
    1634:	005b1b44 	.word	0x005b1b44

00001638 <terminal_move_cursor.isra.4>:
#endif


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
    1638:	b530      	push	{r4, r5, lr}
    163a:	b085      	sub	sp, #20
{
    char str[16] = {0,};
    163c:	2210      	movs	r2, #16
#endif


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
    163e:	0005      	movs	r5, r0
    1640:	000c      	movs	r4, r1
{
    char str[16] = {0,};
    1642:	4668      	mov	r0, sp
    1644:	2100      	movs	r1, #0
    1646:	f001 fb4b 	bl	2ce0 <memset>
    } else if (offset < 0) {
        snprintf (str, 16, "\033[%dD", -(offset));
    }
#else 
    char *endstr;
    strcpy (str, "\033[");
    164a:	4669      	mov	r1, sp
    164c:	4b0f      	ldr	r3, [pc, #60]	; (168c <terminal_move_cursor.isra.4+0x54>)
    164e:	881a      	ldrh	r2, [r3, #0]
    1650:	800a      	strh	r2, [r1, #0]
    1652:	789b      	ldrb	r3, [r3, #2]
    1654:	708b      	strb	r3, [r1, #2]
    if (offset > 0) {
    1656:	2c00      	cmp	r4, #0
    1658:	dd0c      	ble.n	1674 <terminal_move_cursor.isra.4+0x3c>
        endstr = u16bit_to_str (offset, str+2);
    165a:	3102      	adds	r1, #2
    165c:	0020      	movs	r0, r4
    165e:	f7ff ffa3 	bl	15a8 <u16bit_to_str>
        strcpy (endstr, "C");
    1662:	2202      	movs	r2, #2
    1664:	490a      	ldr	r1, [pc, #40]	; (1690 <terminal_move_cursor.isra.4+0x58>)
    1666:	f001 fab1 	bl	2bcc <memcpy>
        endstr = u16bit_to_str (-(offset), str+2);
        strcpy (endstr, "D");
    } else
        return;
#endif  
    pThis->print (str);
    166a:	682b      	ldr	r3, [r5, #0]
    166c:	4668      	mov	r0, sp
    166e:	4798      	blx	r3
}
    1670:	b005      	add	sp, #20
    1672:	bd30      	pop	{r4, r5, pc}
    char *endstr;
    strcpy (str, "\033[");
    if (offset > 0) {
        endstr = u16bit_to_str (offset, str+2);
        strcpy (endstr, "C");
    } else if (offset < 0) {
    1674:	2c00      	cmp	r4, #0
    1676:	d0fb      	beq.n	1670 <terminal_move_cursor.isra.4+0x38>
        endstr = u16bit_to_str (-(offset), str+2);
    1678:	4260      	negs	r0, r4
    167a:	3102      	adds	r1, #2
    167c:	f7ff ff94 	bl	15a8 <u16bit_to_str>
        strcpy (endstr, "D");
    1680:	2202      	movs	r2, #2
    1682:	4904      	ldr	r1, [pc, #16]	; (1694 <terminal_move_cursor.isra.4+0x5c>)
    1684:	f001 faa2 	bl	2bcc <memcpy>
    1688:	e7ef      	b.n	166a <terminal_move_cursor.isra.4+0x32>
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	00003a50 	.word	0x00003a50
    1690:	00003718 	.word	0x00003718
    1694:	00003a54 	.word	0x00003a54

00001698 <terminal_print_line>:
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    1698:	b5f0      	push	{r4, r5, r6, r7, lr}
    169a:	465f      	mov	r7, fp
    169c:	4656      	mov	r6, sl
    169e:	464d      	mov	r5, r9
    16a0:	4644      	mov	r4, r8
    pThis->print ("\033[K");    // delete all from cursor to end
    16a2:	2394      	movs	r3, #148	; 0x94
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    16a4:	b4f0      	push	{r4, r5, r6, r7}
    16a6:	000c      	movs	r4, r1
    16a8:	0006      	movs	r6, r0
    pThis->print ("\033[K");    // delete all from cursor to end
    16aa:	58c3      	ldr	r3, [r0, r3]
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    16ac:	b083      	sub	sp, #12
    pThis->print ("\033[K");    // delete all from cursor to end
    16ae:	4819      	ldr	r0, [pc, #100]	; (1714 <terminal_print_line+0x7c>)
}

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    16b0:	4693      	mov	fp, r2
    pThis->print ("\033[K");    // delete all from cursor to end
    16b2:	4798      	blx	r3
    char nch [] = {0,0};
    16b4:	2300      	movs	r3, #0
    16b6:	0025      	movs	r5, r4
    16b8:	af01      	add	r7, sp, #4
    16ba:	703b      	strb	r3, [r7, #0]
    16bc:	707b      	strb	r3, [r7, #1]
    int i;
    for (i = pos; i < pThis->cmdlen; i++) {
    16be:	3384      	adds	r3, #132	; 0x84
    16c0:	58f3      	ldr	r3, [r6, r3]
    16c2:	3550      	adds	r5, #80	; 0x50
    16c4:	1975      	adds	r5, r6, r5
    16c6:	429c      	cmp	r4, r3
    16c8:	da14      	bge.n	16f4 <terminal_print_line+0x5c>
        nch [0] = pThis->cmdline [i];
        if (nch[0] == '\0')
            nch[0] = ' ';
    16ca:	2320      	movs	r3, #32
    16cc:	469a      	mov	sl, r3
        pThis->print (nch);
    16ce:	3374      	adds	r3, #116	; 0x74
    16d0:	4699      	mov	r9, r3
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    pThis->print ("\033[K");    // delete all from cursor to end
    char nch [] = {0,0};
    int i;
    for (i = pos; i < pThis->cmdlen; i++) {
    16d2:	3b10      	subs	r3, #16
    16d4:	4698      	mov	r8, r3
        nch [0] = pThis->cmdline [i];
    16d6:	782b      	ldrb	r3, [r5, #0]
        if (nch[0] == '\0')
    16d8:	2b00      	cmp	r3, #0
    16da:	d100      	bne.n	16de <terminal_print_line+0x46>
            nch[0] = ' ';
    16dc:	4653      	mov	r3, sl
    16de:	703b      	strb	r3, [r7, #0]
        pThis->print (nch);
    16e0:	464b      	mov	r3, r9
    16e2:	0038      	movs	r0, r7
    16e4:	58f3      	ldr	r3, [r6, r3]
    16e6:	4798      	blx	r3
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
    pThis->print ("\033[K");    // delete all from cursor to end
    char nch [] = {0,0};
    int i;
    for (i = pos; i < pThis->cmdlen; i++) {
    16e8:	4643      	mov	r3, r8
    16ea:	58f3      	ldr	r3, [r6, r3]
    16ec:	3401      	adds	r4, #1
    16ee:	3501      	adds	r5, #1
    16f0:	42a3      	cmp	r3, r4
    16f2:	dcf0      	bgt.n	16d6 <terminal_print_line+0x3e>
    16f4:	3694      	adds	r6, #148	; 0x94
        if (nch[0] == '\0')
            nch[0] = ' ';
        pThis->print (nch);
    }
    
    terminal_reset_cursor (pThis);
    16f6:	0030      	movs	r0, r6
    16f8:	f7ff ff84 	bl	1604 <terminal_reset_cursor.isra.3>
    terminal_move_cursor (pThis, cursor);
    16fc:	4659      	mov	r1, fp
    16fe:	0030      	movs	r0, r6
    1700:	f7ff ff9a 	bl	1638 <terminal_move_cursor.isra.4>
}
    1704:	b003      	add	sp, #12
    1706:	bc3c      	pop	{r2, r3, r4, r5}
    1708:	4690      	mov	r8, r2
    170a:	4699      	mov	r9, r3
    170c:	46a2      	mov	sl, r4
    170e:	46ab      	mov	fp, r5
    1710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	00003a58 	.word	0x00003a58

00001718 <hist_search>:


#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    1718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    171a:	4646      	mov	r6, r8
    171c:	464f      	mov	r7, r9
    171e:	4680      	mov	r8, r0
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    1720:	2350      	movs	r3, #80	; 0x50


#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    1722:	b4c0      	push	{r6, r7}
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    1724:	6c04      	ldr	r4, [r0, #64]	; 0x40

#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    1726:	4443      	add	r3, r8
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    1728:	5d06      	ldrb	r6, [r0, r4]

#ifdef _USE_HISTORY

static void hist_search (microrl_t * pThis, int dir)
{
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    172a:	4699      	mov	r9, r3
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    172c:	2e00      	cmp	r6, #0
    172e:	d100      	bne.n	1732 <hist_search+0x1a>
    1730:	e08d      	b.n	184e <hist_search+0x136>
    1732:	0025      	movs	r5, r4
    1734:	0033      	movs	r3, r6
    1736:	2700      	movs	r7, #0
        header += pThis->ring_buf [header] + 1;
    1738:	3301      	adds	r3, #1
    173a:	18ed      	adds	r5, r5, r3
        if (header >= _RING_HISTORY_LEN)
    173c:	2d3f      	cmp	r5, #63	; 0x3f
    173e:	dd00      	ble.n	1742 <hist_search+0x2a>
            header -= _RING_HISTORY_LEN; 
    1740:	3d40      	subs	r5, #64	; 0x40
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    1742:	4643      	mov	r3, r8
    1744:	5d5b      	ldrb	r3, [r3, r5]
        header += pThis->ring_buf [header] + 1;
        if (header >= _RING_HISTORY_LEN)
            header -= _RING_HISTORY_LEN; 
        cnt++;
    1746:	3701      	adds	r7, #1
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    // count history record 
    int header = pThis->begin;
    while (pThis->ring_buf [header] != 0) {
    1748:	2b00      	cmp	r3, #0
    174a:	d1f5      	bne.n	1738 <hist_search+0x20>
            header -= _RING_HISTORY_LEN; 
        cnt++;
    }

    if (dir == _HIST_UP) {
        if (cnt >= pThis->cur) {
    174c:	4643      	mov	r3, r8
        if (header >= _RING_HISTORY_LEN)
            header -= _RING_HISTORY_LEN; 
        cnt++;
    }

    if (dir == _HIST_UP) {
    174e:	2900      	cmp	r1, #0
    1750:	d11a      	bne.n	1788 <hist_search+0x70>
        if (cnt >= pThis->cur) {
    1752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1754:	42ba      	cmp	r2, r7
    1756:	dc13      	bgt.n	1780 <hist_search+0x68>
            int header = pThis->begin;
            int j = 0;
            // found record for 'pThis->cur' index
            while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
    1758:	2e00      	cmp	r6, #0
    175a:	d011      	beq.n	1780 <hist_search+0x68>
    175c:	1e7b      	subs	r3, r7, #1
    175e:	429a      	cmp	r2, r3
    1760:	d104      	bne.n	176c <hist_search+0x54>
    1762:	e028      	b.n	17b6 <hist_search+0x9e>
    1764:	43cb      	mvns	r3, r1
    1766:	19db      	adds	r3, r3, r7
    1768:	429a      	cmp	r2, r3
    176a:	d024      	beq.n	17b6 <hist_search+0x9e>
                header += pThis->ring_buf [header] + 1;
    176c:	3601      	adds	r6, #1
    176e:	19a4      	adds	r4, r4, r6
                if (header >= _RING_HISTORY_LEN)
    1770:	2c3f      	cmp	r4, #63	; 0x3f
    1772:	dd00      	ble.n	1776 <hist_search+0x5e>
                    header -= _RING_HISTORY_LEN;
    1774:	3c40      	subs	r4, #64	; 0x40
    if (dir == _HIST_UP) {
        if (cnt >= pThis->cur) {
            int header = pThis->begin;
            int j = 0;
            // found record for 'pThis->cur' index
            while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
    1776:	4643      	mov	r3, r8
    1778:	5d1e      	ldrb	r6, [r3, r4]
                header += pThis->ring_buf [header] + 1;
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
    177a:	3101      	adds	r1, #1
    if (dir == _HIST_UP) {
        if (cnt >= pThis->cur) {
            int header = pThis->begin;
            int j = 0;
            // found record for 'pThis->cur' index
            while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
    177c:	2e00      	cmp	r6, #0
    177e:	d1f1      	bne.n	1764 <hist_search+0x4c>
    if (len >= 0) {
        pThis->cursor = pThis->cmdlen = len;
        terminal_reset_cursor (pThis);
        terminal_print_line (pThis, 0, pThis->cursor);
    }
}
    1780:	bc0c      	pop	{r2, r3}
    1782:	4690      	mov	r8, r2
    1784:	4699      	mov	r9, r3
    1786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                }
                return pThis->ring_buf[header];
            }
        }
    } else {
        if (pThis->cur > 0) {
    1788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    178a:	2b00      	cmp	r3, #0
    178c:	dd5d      	ble.n	184a <hist_search+0x132>
                pThis->cur--;
    178e:	4642      	mov	r2, r8
    1790:	3b01      	subs	r3, #1
    1792:	6493      	str	r3, [r2, #72]	; 0x48
            int header = pThis->begin;
            int j = 0;

            while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
    1794:	2e00      	cmp	r6, #0
    1796:	d10a      	bne.n	17ae <hist_search+0x96>
    1798:	e044      	b.n	1824 <hist_search+0x10c>
                header += pThis->ring_buf [header] + 1;
    179a:	3601      	adds	r6, #1
    179c:	19a4      	adds	r4, r4, r6
                if (header >= _RING_HISTORY_LEN)
    179e:	2c3f      	cmp	r4, #63	; 0x3f
    17a0:	dd00      	ble.n	17a4 <hist_search+0x8c>
                    header -= _RING_HISTORY_LEN;
    17a2:	3c40      	subs	r4, #64	; 0x40
        if (pThis->cur > 0) {
                pThis->cur--;
            int header = pThis->begin;
            int j = 0;

            while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
    17a4:	4642      	mov	r2, r8
    17a6:	5d16      	ldrb	r6, [r2, r4]
    17a8:	2e00      	cmp	r6, #0
    17aa:	d03b      	beq.n	1824 <hist_search+0x10c>
    17ac:	3f01      	subs	r7, #1
    17ae:	42bb      	cmp	r3, r7
    17b0:	d1f3      	bne.n	179a <hist_search+0x82>
    17b2:	0035      	movs	r5, r6
    17b4:	e037      	b.n	1826 <hist_search+0x10e>
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
            }
            if (pThis->ring_buf[header]) {
                    pThis->cur++;
    17b6:	4643      	mov	r3, r8
    17b8:	3201      	adds	r2, #1
    17ba:	649a      	str	r2, [r3, #72]	; 0x48
                // obtain saved line
                if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
    17bc:	1933      	adds	r3, r6, r4
    17be:	2b3f      	cmp	r3, #63	; 0x3f
    17c0:	dc1c      	bgt.n	17fc <hist_search+0xe4>
                    memset (line, 0, _COMMAND_LINE_LEN);
    17c2:	2233      	movs	r2, #51	; 0x33
    17c4:	2100      	movs	r1, #0
    17c6:	4648      	mov	r0, r9
    17c8:	f001 fa8a 	bl	2ce0 <memset>
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
            }
            if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
    17cc:	1c61      	adds	r1, r4, #1
    17ce:	4441      	add	r1, r8
    17d0:	0032      	movs	r2, r6
    17d2:	4648      	mov	r0, r9
    17d4:	f001 f9fa 	bl	2bcc <memcpy>
            } else {
                int part0 = _RING_HISTORY_LEN - header - 1;
                memcpy (line, pThis->ring_buf + header + 1, part0);
                memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
            }
            return pThis->ring_buf[header];
    17d8:	4643      	mov	r3, r8
    17da:	5d1b      	ldrb	r3, [r3, r4]

static void hist_search (microrl_t * pThis, int dir)
{
    int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
    if (len >= 0) {
        pThis->cursor = pThis->cmdlen = len;
    17dc:	4641      	mov	r1, r8
    17de:	2284      	movs	r2, #132	; 0x84
    17e0:	2488      	movs	r4, #136	; 0x88
    17e2:	4640      	mov	r0, r8
    17e4:	508b      	str	r3, [r1, r2]
    17e6:	3094      	adds	r0, #148	; 0x94
    17e8:	510b      	str	r3, [r1, r4]
        terminal_reset_cursor (pThis);
    17ea:	f7ff ff0b 	bl	1604 <terminal_reset_cursor.isra.3>
        terminal_print_line (pThis, 0, pThis->cursor);
    17ee:	4643      	mov	r3, r8
    17f0:	2100      	movs	r1, #0
    17f2:	591a      	ldr	r2, [r3, r4]
    17f4:	4640      	mov	r0, r8
    17f6:	f7ff ff4f 	bl	1698 <terminal_print_line>
    17fa:	e7c1      	b.n	1780 <hist_search+0x68>
                // obtain saved line
                if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                    memset (line, 0, _COMMAND_LINE_LEN);
                    memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
                } else {
                    int part0 = _RING_HISTORY_LEN - header - 1;
    17fc:	253f      	movs	r5, #63	; 0x3f
                    memset (line, 0, _COMMAND_LINE_LEN);
    17fe:	2233      	movs	r2, #51	; 0x33
    1800:	2100      	movs	r1, #0
    1802:	4648      	mov	r0, r9
    1804:	f001 fa6c 	bl	2ce0 <memset>
                // obtain saved line
                if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                    memset (line, 0, _COMMAND_LINE_LEN);
                    memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
                } else {
                    int part0 = _RING_HISTORY_LEN - header - 1;
    1808:	1b2d      	subs	r5, r5, r4
                    memset (line, 0, _COMMAND_LINE_LEN);
                    memcpy (line, pThis->ring_buf + header + 1, part0);
    180a:	1c61      	adds	r1, r4, #1
    180c:	4441      	add	r1, r8
    180e:	002a      	movs	r2, r5
    1810:	4648      	mov	r0, r9
    1812:	f001 f9db 	bl	2bcc <memcpy>
                    memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
    1816:	464b      	mov	r3, r9
    1818:	1b72      	subs	r2, r6, r5
    181a:	1958      	adds	r0, r3, r5
    181c:	4641      	mov	r1, r8
    181e:	f001 f9d5 	bl	2bcc <memcpy>
    1822:	e7d9      	b.n	17d8 <hist_search+0xc0>
        if (pThis->cur > 0) {
                pThis->cur--;
            int header = pThis->begin;
            int j = 0;

            while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
    1824:	2500      	movs	r5, #0
                header += pThis->ring_buf [header] + 1;
                if (header >= _RING_HISTORY_LEN)
                    header -= _RING_HISTORY_LEN;
                j++;
            }
            if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
    1826:	1963      	adds	r3, r4, r5
    1828:	2b3f      	cmp	r3, #63	; 0x3f
    182a:	ddcf      	ble.n	17cc <hist_search+0xb4>
                memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
            } else {
                int part0 = _RING_HISTORY_LEN - header - 1;
    182c:	223f      	movs	r2, #63	; 0x3f
                memcpy (line, pThis->ring_buf + header + 1, part0);
    182e:	1c61      	adds	r1, r4, #1
                j++;
            }
            if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
                memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
            } else {
                int part0 = _RING_HISTORY_LEN - header - 1;
    1830:	1b16      	subs	r6, r2, r4
                memcpy (line, pThis->ring_buf + header + 1, part0);
    1832:	4441      	add	r1, r8
    1834:	0032      	movs	r2, r6
    1836:	4648      	mov	r0, r9
    1838:	f001 f9c8 	bl	2bcc <memcpy>
                memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
    183c:	464b      	mov	r3, r9
    183e:	1baa      	subs	r2, r5, r6
    1840:	1998      	adds	r0, r3, r6
    1842:	4641      	mov	r1, r8
    1844:	f001 f9c2 	bl	2bcc <memcpy>
    1848:	e7c6      	b.n	17d8 <hist_search+0xc0>
            }
            return pThis->ring_buf[header];
        } else {
            /* empty line */
            return 0;
    184a:	2300      	movs	r3, #0
    184c:	e7c6      	b.n	17dc <hist_search+0xc4>

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
    int cnt = 0;
    184e:	2700      	movs	r7, #0
    1850:	e77c      	b.n	174c <hist_search+0x34>
    1852:	46c0      	nop			; (mov r8, r8)

00001854 <microrl_backspace.part.5>:
    return false;
}

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
    1854:	2394      	movs	r3, #148	; 0x94
    1856:	b570      	push	{r4, r5, r6, lr}
    1858:	0004      	movs	r4, r0
{
    if (pThis->cursor > 0) {
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
    185a:	2688      	movs	r6, #136	; 0x88
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
    185c:	2584      	movs	r5, #132	; 0x84
    pThis->print (pThis->prompt_str);
}

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis) {
        pThis->print ("\033[D \033[D");
    185e:	58c3      	ldr	r3, [r0, r3]
    1860:	480b      	ldr	r0, [pc, #44]	; (1890 <microrl_backspace.part.5+0x3c>)
    1862:	4798      	blx	r3
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
    if (pThis->cursor > 0) {
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
    1864:	0020      	movs	r0, r4
    1866:	59a3      	ldr	r3, [r4, r6]
    1868:	5962      	ldr	r2, [r4, r5]
    186a:	3050      	adds	r0, #80	; 0x50
    186c:	18c1      	adds	r1, r0, r3
    186e:	1ad2      	subs	r2, r2, r3
    1870:	3b01      	subs	r3, #1
    1872:	3201      	adds	r2, #1
    1874:	18c0      	adds	r0, r0, r3
    1876:	f001 f9e7 	bl	2c48 <memmove>
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
        pThis->cursor--;
        pThis->cmdline [pThis->cmdlen] = '\0';
    187a:	2100      	movs	r1, #0
    if (pThis->cursor > 0) {
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
        pThis->cursor--;
    187c:	59a3      	ldr	r3, [r4, r6]
    187e:	3b01      	subs	r3, #1
    1880:	51a3      	str	r3, [r4, r6]
        pThis->cmdline [pThis->cmdlen] = '\0';
    1882:	5963      	ldr	r3, [r4, r5]
    1884:	18e2      	adds	r2, r4, r3
    1886:	3250      	adds	r2, #80	; 0x50
        pThis->cmdlen--;
    1888:	3b01      	subs	r3, #1
        terminal_backspace (pThis);
        memmove (pThis->cmdline + pThis->cursor-1,
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen-pThis->cursor+1);
        pThis->cursor--;
        pThis->cmdline [pThis->cmdlen] = '\0';
    188a:	7011      	strb	r1, [r2, #0]
        pThis->cmdlen--;
    188c:	5163      	str	r3, [r4, r5]
    }
}
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	00003a5c 	.word	0x00003a5c

00001894 <microrl_init>:
    terminal_move_cursor (pThis, cursor);
}

//*****************************************************************************
void microrl_init (microrl_t * pThis, uint32_t (*print) (const char *)) 
{
    1894:	b570      	push	{r4, r5, r6, lr}
    1896:	0004      	movs	r4, r0
    1898:	000d      	movs	r5, r1
    (void)hist_save_line;
    memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
    189a:	2233      	movs	r2, #51	; 0x33
    189c:	2100      	movs	r1, #0
    189e:	3050      	adds	r0, #80	; 0x50
    18a0:	f001 fa1e 	bl	2ce0 <memset>
#ifdef _USE_HISTORY
    memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
    18a4:	2100      	movs	r1, #0
    18a6:	2240      	movs	r2, #64	; 0x40
    18a8:	0020      	movs	r0, r4
    18aa:	f001 fa19 	bl	2ce0 <memset>
    pThis->ring_hist.begin = 0;
    18ae:	2300      	movs	r3, #0
    pThis->ring_hist.end = 0;
    pThis->ring_hist.cur = 0;
#endif
    pThis->cmdlen =0;
    18b0:	2284      	movs	r2, #132	; 0x84
{
    (void)hist_save_line;
    memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
#ifdef _USE_HISTORY
    memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
    pThis->ring_hist.begin = 0;
    18b2:	6423      	str	r3, [r4, #64]	; 0x40
    pThis->ring_hist.end = 0;
    18b4:	6463      	str	r3, [r4, #68]	; 0x44
    pThis->ring_hist.cur = 0;
    18b6:	64a3      	str	r3, [r4, #72]	; 0x48
#endif
    pThis->cmdlen =0;
    18b8:	50a3      	str	r3, [r4, r2]
    pThis->cursor = 0;
    18ba:	3204      	adds	r2, #4
    18bc:	50a3      	str	r3, [r4, r2]
    pThis->execute = NULL;
    18be:	3204      	adds	r2, #4
    18c0:	50a3      	str	r3, [r4, r2]
    pThis->get_completion = NULL;
#ifdef _USE_CTLR_C
    pThis->sigint = NULL;
#endif
    pThis->prompt_str = " > ";
    18c2:	4804      	ldr	r0, [pc, #16]	; (18d4 <microrl_init+0x40>)
    pThis->ring_hist.cur = 0;
#endif
    pThis->cmdlen =0;
    pThis->cursor = 0;
    pThis->execute = NULL;
    pThis->get_completion = NULL;
    18c4:	3204      	adds	r2, #4
    18c6:	50a3      	str	r3, [r4, r2]
#ifdef _USE_CTLR_C
    pThis->sigint = NULL;
#endif
    pThis->prompt_str = " > ";
    pThis->print = print;
    18c8:	3394      	adds	r3, #148	; 0x94
    pThis->execute = NULL;
    pThis->get_completion = NULL;
#ifdef _USE_CTLR_C
    pThis->sigint = NULL;
#endif
    pThis->prompt_str = " > ";
    18ca:	64e0      	str	r0, [r4, #76]	; 0x4c
    pThis->print = print;
    18cc:	50e5      	str	r5, [r4, r3]
}


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis) {
    pThis->print (pThis->prompt_str);
    18ce:	47a8      	blx	r5
    pThis->prompt_str = " > ";
    pThis->print = print;
#ifdef _ENABLE_INIT_PROMPT
    print_prompt (pThis);
#endif
}
    18d0:	bd70      	pop	{r4, r5, r6, pc}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	00003a64 	.word	0x00003a64

000018d8 <microrl_set_execute_callback>:
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, void (*execute)(int32_t, const char* const*))
{
    pThis->execute = execute;
    18d8:	238c      	movs	r3, #140	; 0x8c
    18da:	50c1      	str	r1, [r0, r3]
}
    18dc:	4770      	bx	lr
    18de:	46c0      	nop			; (mov r8, r8)

000018e0 <new_line_handler>:
    } 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    18e0:	2394      	movs	r3, #148	; 0x94
    18e2:	b5f0      	push	{r4, r5, r6, r7, lr}
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
    pThis->print (ENDL);
    18e4:	4f2a      	ldr	r7, [pc, #168]	; (1990 <new_line_handler+0xb0>)
    } 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    18e6:	0005      	movs	r5, r0
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
    pThis->print (ENDL);
    18e8:	58c3      	ldr	r3, [r0, r3]
    } 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    18ea:	b08b      	sub	sp, #44	; 0x2c
}

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
    pThis->print (ENDL);
    18ec:	0038      	movs	r0, r7
    18ee:	4798      	blx	r3
//*****************************************************************************
void new_line_handler(microrl_t * pThis){
    char const * tkn_arr [_COMMAND_TOKEN_NMB];
    int32_t status;
    terminal_newline (pThis);
    status = split(pThis, pThis->cmdlen, tkn_arr);
    18f0:	2384      	movs	r3, #132	; 0x84
    18f2:	002e      	movs	r6, r5
    18f4:	58ec      	ldr	r4, [r5, r3]
    18f6:	3b34      	subs	r3, #52	; 0x34
    18f8:	5ce9      	ldrb	r1, [r5, r3]


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int32_t split (microrl_t * pThis, int limit, char const ** tkn_arr) {
    int32_t i = 0;
    18fa:	2200      	movs	r2, #0
    int ind = 0;
    18fc:	2300      	movs	r3, #0
    18fe:	3650      	adds	r6, #80	; 0x50
    while (1) {
        // go to the first whitespace (zerro for us)
        while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
    1900:	2900      	cmp	r1, #0
    1902:	d11b      	bne.n	193c <new_line_handler+0x5c>
    1904:	429c      	cmp	r4, r3
    1906:	dc35      	bgt.n	1974 <new_line_handler+0x94>
    if (status == -1){
        //        pThis->print ("ERROR: Max token amount exseed\n");
        pThis->print ("ERROR:too many tokens");
        pThis->print (ENDL);
    }
    if ((status > 0) && (pThis->execute != NULL)) {
    1908:	2a00      	cmp	r2, #0
    190a:	d006      	beq.n	191a <new_line_handler+0x3a>
    190c:	0010      	movs	r0, r2
    190e:	238c      	movs	r3, #140	; 0x8c
    1910:	58eb      	ldr	r3, [r5, r3]
    1912:	2b00      	cmp	r3, #0
    1914:	d001      	beq.n	191a <new_line_handler+0x3a>
        pThis->execute (status, tkn_arr);
    1916:	4669      	mov	r1, sp
    1918:	4798      	blx	r3
    191a:	2394      	movs	r3, #148	; 0x94
}


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis) {
    pThis->print (pThis->prompt_str);
    191c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    191e:	58eb      	ldr	r3, [r5, r3]
    1920:	4798      	blx	r3
    }
    if ((status > 0) && (pThis->execute != NULL)) {
        pThis->execute (status, tkn_arr);
    }
    print_prompt (pThis);
    pThis->cmdlen = 0;
    1922:	2400      	movs	r4, #0
    1924:	2384      	movs	r3, #132	; 0x84
    1926:	50ec      	str	r4, [r5, r3]
    pThis->cursor = 0;
    1928:	3304      	adds	r3, #4
    192a:	50ec      	str	r4, [r5, r3]
    memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
    192c:	2233      	movs	r2, #51	; 0x33
    192e:	2100      	movs	r1, #0
    1930:	0030      	movs	r0, r6
    1932:	f001 f9d5 	bl	2ce0 <memset>
#ifdef _USE_HISTORY
    pThis->ring_hist.cur = 0;
    1936:	64ac      	str	r4, [r5, #72]	; 0x48
#endif
}
    1938:	b00b      	add	sp, #44	; 0x2c
    193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (1) {
        // go to the first whitespace (zerro for us)
        while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
            ind++;
        }
        if (!(ind < limit)) return i;
    193c:	429c      	cmp	r4, r3
    193e:	dde3      	ble.n	1908 <new_line_handler+0x28>
        tkn_arr[i++] = pThis->cmdline + ind;
    1940:	a90a      	add	r1, sp, #40	; 0x28
    1942:	468c      	mov	ip, r1
    1944:	1c50      	adds	r0, r2, #1
    1946:	0092      	lsls	r2, r2, #2
    1948:	4462      	add	r2, ip
    194a:	3a28      	subs	r2, #40	; 0x28
    194c:	18f1      	adds	r1, r6, r3
    194e:	6011      	str	r1, [r2, #0]
        if (i >= _COMMAND_TOKEN_NMB) {
    1950:	2809      	cmp	r0, #9
    1952:	dc14      	bgt.n	197e <new_line_handler+0x9e>
    1954:	001a      	movs	r2, r3
    1956:	3251      	adds	r2, #81	; 0x51
    1958:	18aa      	adds	r2, r5, r2
    195a:	e002      	b.n	1962 <new_line_handler+0x82>
    195c:	3201      	adds	r2, #1
            return -1;
        }
        // go to the first NOT whitespace (not zerro for us)
        while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    195e:	429c      	cmp	r4, r3
    1960:	d0d5      	beq.n	190e <new_line_handler+0x2e>
    1962:	7811      	ldrb	r1, [r2, #0]
            ind++;
    1964:	3301      	adds	r3, #1
        tkn_arr[i++] = pThis->cmdline + ind;
        if (i >= _COMMAND_TOKEN_NMB) {
            return -1;
        }
        // go to the first NOT whitespace (not zerro for us)
        while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
    1966:	2900      	cmp	r1, #0
    1968:	d1f8      	bne.n	195c <new_line_handler+0x7c>
            ind++;
        }
        if (!(ind < limit)) return i;
    196a:	429c      	cmp	r4, r3
    196c:	ddcf      	ble.n	190e <new_line_handler+0x2e>
    196e:	0002      	movs	r2, r0
static int32_t split (microrl_t * pThis, int limit, char const ** tkn_arr) {
    int32_t i = 0;
    int ind = 0;
    while (1) {
        // go to the first whitespace (zerro for us)
        while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
    1970:	429c      	cmp	r4, r3
    1972:	ddc9      	ble.n	1908 <new_line_handler+0x28>
            ind++;
    1974:	3301      	adds	r3, #1
    1976:	18e9      	adds	r1, r5, r3
    1978:	3150      	adds	r1, #80	; 0x50
    197a:	7809      	ldrb	r1, [r1, #0]
    197c:	e7c0      	b.n	1900 <new_line_handler+0x20>
    int32_t status;
    terminal_newline (pThis);
    status = split(pThis, pThis->cmdlen, tkn_arr);
    if (status == -1){
        //        pThis->print ("ERROR: Max token amount exseed\n");
        pThis->print ("ERROR:too many tokens");
    197e:	2494      	movs	r4, #148	; 0x94
    1980:	4804      	ldr	r0, [pc, #16]	; (1994 <new_line_handler+0xb4>)
    1982:	592b      	ldr	r3, [r5, r4]
    1984:	4798      	blx	r3
        pThis->print (ENDL);
    1986:	592b      	ldr	r3, [r5, r4]
    1988:	0038      	movs	r0, r7
    198a:	4798      	blx	r3
    198c:	e7c5      	b.n	191a <new_line_handler+0x3a>
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	0000348c 	.word	0x0000348c
    1994:	00003a68 	.word	0x00003a68

00001998 <microrl_insert_char>:
}

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
    1998:	b570      	push	{r4, r5, r6, lr}
    199a:	b082      	sub	sp, #8
    199c:	0004      	movs	r4, r0
    199e:	9101      	str	r1, [sp, #4]
    if (pThis->escape) {
        if (escape_process(pThis, ch))
            pThis->escape = 0;
    } else {
#endif
        switch (ch) {
    19a0:	297f      	cmp	r1, #127	; 0x7f
    19a2:	d803      	bhi.n	19ac <microrl_insert_char+0x14>
    19a4:	4a4a      	ldr	r2, [pc, #296]	; (1ad0 <microrl_insert_char+0x138>)
    19a6:	008b      	lsls	r3, r1, #2
    19a8:	58d3      	ldr	r3, [r2, r3]
    19aa:	469f      	mov	pc, r3
                pThis->sigint();
            break;
#endif
            //-----------------------------------------------------
            default:
            if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
    19ac:	2920      	cmp	r1, #32
    19ae:	d100      	bne.n	19b2 <microrl_insert_char+0x1a>
    19b0:	e085      	b.n	1abe <microrl_insert_char+0x126>
    19b2:	291f      	cmp	r1, #31
    19b4:	dd24      	ble.n	1a00 <microrl_insert_char+0x68>
    19b6:	2384      	movs	r3, #132	; 0x84
    19b8:	58e2      	ldr	r2, [r4, r3]
//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
    int i;
    if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
    19ba:	2a31      	cmp	r2, #49	; 0x31
    19bc:	dc20      	bgt.n	1a00 <microrl_insert_char+0x68>
        memmove (pThis->cmdline + pThis->cursor + len,
    19be:	2588      	movs	r5, #136	; 0x88
    19c0:	0020      	movs	r0, r4
    19c2:	5963      	ldr	r3, [r4, r5]
    19c4:	3050      	adds	r0, #80	; 0x50
    19c6:	18c1      	adds	r1, r0, r3
    19c8:	1ad2      	subs	r2, r2, r3
    19ca:	3301      	adds	r3, #1
    19cc:	18c0      	adds	r0, r0, r3
    19ce:	f001 f93b 	bl	2c48 <memmove>
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen - pThis->cursor);
        for (i = 0; i < len; i++) {
            pThis->cmdline [pThis->cursor + i] = text [i];
    19d2:	ab01      	add	r3, sp, #4
    19d4:	5961      	ldr	r1, [r4, r5]
    19d6:	781a      	ldrb	r2, [r3, #0]
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
                pThis->cmdline [pThis->cursor + i] = 0;
    19d8:	1863      	adds	r3, r4, r1
    19da:	3350      	adds	r3, #80	; 0x50
        memmove (pThis->cmdline + pThis->cursor + len,
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen - pThis->cursor);
        for (i = 0; i < len; i++) {
            pThis->cmdline [pThis->cursor + i] = text [i];
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
    19dc:	2a20      	cmp	r2, #32
    19de:	d100      	bne.n	19e2 <microrl_insert_char+0x4a>
    19e0:	e073      	b.n	1aca <microrl_insert_char+0x132>
                pThis->cmdline [pThis->cursor + i] = 0;
    19e2:	701a      	strb	r2, [r3, #0]
            }
        }
        pThis->cursor += len;
        pThis->cmdlen += len;
    19e4:	2084      	movs	r0, #132	; 0x84
            pThis->cmdline [pThis->cursor + i] = text [i];
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
                pThis->cmdline [pThis->cursor + i] = 0;
            }
        }
        pThis->cursor += len;
    19e6:	2388      	movs	r3, #136	; 0x88
    19e8:	1c4a      	adds	r2, r1, #1
    19ea:	50e2      	str	r2, [r4, r3]
        pThis->cmdlen += len;
    19ec:	5823      	ldr	r3, [r4, r0]
    19ee:	3301      	adds	r3, #1
    19f0:	5023      	str	r3, [r4, r0]
        pThis->cmdline [pThis->cmdlen] = '\0';
    19f2:	2000      	movs	r0, #0
    19f4:	18e3      	adds	r3, r4, r3
    19f6:	3350      	adds	r3, #80	; 0x50
    19f8:	7018      	strb	r0, [r3, #0]
            //-----------------------------------------------------
            default:
            if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
                break;
            if (microrl_insert_text (pThis, (char*)&ch, 1))
                terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
    19fa:	0020      	movs	r0, r4
    19fc:	f7ff fe4c 	bl	1698 <terminal_print_line>
            break;
        }
#ifdef _USE_ESC_SEQ
    }
#endif
}
    1a00:	b002      	add	sp, #8
    1a02:	bd70      	pop	{r4, r5, r6, pc}
                pThis->escape = 1;
#endif
            break;
            //-----------------------------------------------------
            case KEY_NAK: // ^U
                    while (pThis->cursor > 0) {
    1a04:	2388      	movs	r3, #136	; 0x88
    1a06:	58c2      	ldr	r2, [r0, r3]
    1a08:	2588      	movs	r5, #136	; 0x88
    1a0a:	2a00      	cmp	r2, #0
    1a0c:	dd05      	ble.n	1a1a <microrl_insert_char+0x82>
    1a0e:	0020      	movs	r0, r4
    1a10:	f7ff ff20 	bl	1854 <microrl_backspace.part.5>
    1a14:	5962      	ldr	r2, [r4, r5]
    1a16:	2a00      	cmp	r2, #0
    1a18:	dcf9      	bgt.n	1a0e <microrl_insert_char+0x76>
                    microrl_backspace (pThis);
                }
                terminal_print_line (pThis, 0, pThis->cursor);
    1a1a:	2100      	movs	r1, #0
    1a1c:	0020      	movs	r0, r4
    1a1e:	f7ff fe3b 	bl	1698 <terminal_print_line>
            break;
    1a22:	e7ed      	b.n	1a00 <microrl_insert_char+0x68>
    1a24:	3094      	adds	r0, #148	; 0x94
                terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
                pThis->cursor = pThis->cmdlen;
            break;
            //-----------------------------------------------------
            case KEY_SOH: // ^A
                terminal_reset_cursor (pThis);
    1a26:	f7ff fded 	bl	1604 <terminal_reset_cursor.isra.3>
                pThis->cursor = 0;
    1a2a:	2200      	movs	r2, #0
    1a2c:	2388      	movs	r3, #136	; 0x88
    1a2e:	50e2      	str	r2, [r4, r3]
            break;
    1a30:	e7e6      	b.n	1a00 <microrl_insert_char+0x68>
                pThis->cursor++;
            }
            break;
            //-----------------------------------------------------
            case KEY_STX: // ^B
            if (pThis->cursor) {
    1a32:	2588      	movs	r5, #136	; 0x88
    1a34:	5943      	ldr	r3, [r0, r5]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d0e2      	beq.n	1a00 <microrl_insert_char+0x68>
                terminal_move_cursor (pThis, -1);
    1a3a:	2101      	movs	r1, #1
    1a3c:	3094      	adds	r0, #148	; 0x94
    1a3e:	4249      	negs	r1, r1
    1a40:	f7ff fdfa 	bl	1638 <terminal_move_cursor.isra.4>
                pThis->cursor--;
    1a44:	5963      	ldr	r3, [r4, r5]
    1a46:	3b01      	subs	r3, #1
    1a48:	5163      	str	r3, [r4, r5]
    1a4a:	e7d9      	b.n	1a00 <microrl_insert_char+0x68>
                pThis->print ("\033[K");
                pThis->cmdlen = pThis->cursor;
            break;
            //-----------------------------------------------------
            case KEY_ENQ: // ^E
                terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
    1a4c:	2684      	movs	r6, #132	; 0x84
    1a4e:	2588      	movs	r5, #136	; 0x88
    1a50:	5983      	ldr	r3, [r0, r6]
    1a52:	5942      	ldr	r2, [r0, r5]
    1a54:	3094      	adds	r0, #148	; 0x94
    1a56:	1a99      	subs	r1, r3, r2
    1a58:	f7ff fdee 	bl	1638 <terminal_move_cursor.isra.4>
                pThis->cursor = pThis->cmdlen;
    1a5c:	59a3      	ldr	r3, [r4, r6]
    1a5e:	5163      	str	r3, [r4, r5]
            break;
    1a60:	e7ce      	b.n	1a00 <microrl_insert_char+0x68>
                terminal_reset_cursor (pThis);
                pThis->cursor = 0;
            break;
            //-----------------------------------------------------
            case KEY_ACK: // ^F
            if (pThis->cursor < pThis->cmdlen) {
    1a62:	2588      	movs	r5, #136	; 0x88
    1a64:	2384      	movs	r3, #132	; 0x84
    1a66:	5942      	ldr	r2, [r0, r5]
    1a68:	58c3      	ldr	r3, [r0, r3]
    1a6a:	429a      	cmp	r2, r3
    1a6c:	dac8      	bge.n	1a00 <microrl_insert_char+0x68>
    1a6e:	3094      	adds	r0, #148	; 0x94
                terminal_move_cursor (pThis, 1);
    1a70:	2101      	movs	r1, #1
    1a72:	f7ff fde1 	bl	1638 <terminal_move_cursor.isra.4>
                pThis->cursor++;
    1a76:	5963      	ldr	r3, [r4, r5]
    1a78:	3301      	adds	r3, #1
    1a7a:	5163      	str	r3, [r4, r5]
    1a7c:	e7c0      	b.n	1a00 <microrl_insert_char+0x68>

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
    if (pThis->cursor > 0) {
    1a7e:	2588      	movs	r5, #136	; 0x88
    1a80:	5941      	ldr	r1, [r0, r5]
    1a82:	2900      	cmp	r1, #0
    1a84:	dd02      	ble.n	1a8c <microrl_insert_char+0xf4>
    1a86:	f7ff fee5 	bl	1854 <microrl_backspace.part.5>
    1a8a:	5961      	ldr	r1, [r4, r5]
            break;
            //-----------------------------------------------------
            case KEY_DEL: // Backspace
            case KEY_BS: // ^U
                microrl_backspace (pThis);
                terminal_print_line (pThis, pThis->cursor, pThis->cursor);
    1a8c:	000a      	movs	r2, r1
    1a8e:	0020      	movs	r0, r4
    1a90:	f7ff fe02 	bl	1698 <terminal_print_line>
            break;
    1a94:	e7b4      	b.n	1a00 <microrl_insert_char+0x68>
            break;
#else
            case KEY_CR:
            break;
            case KEY_LF:
                new_line_handler(pThis);
    1a96:	f7ff ff23 	bl	18e0 <new_line_handler>
            break;
    1a9a:	e7b1      	b.n	1a00 <microrl_insert_char+0x68>
                }
                terminal_print_line (pThis, 0, pThis->cursor);
            break;
            //-----------------------------------------------------
            case KEY_VT:  // ^K
                pThis->print ("\033[K");
    1a9c:	2394      	movs	r3, #148	; 0x94
    1a9e:	58c3      	ldr	r3, [r0, r3]
    1aa0:	480c      	ldr	r0, [pc, #48]	; (1ad4 <microrl_insert_char+0x13c>)
    1aa2:	4798      	blx	r3
                pThis->cmdlen = pThis->cursor;
    1aa4:	2388      	movs	r3, #136	; 0x88
    1aa6:	58e2      	ldr	r2, [r4, r3]
    1aa8:	3b04      	subs	r3, #4
    1aaa:	50e2      	str	r2, [r4, r3]
            break;
    1aac:	e7a8      	b.n	1a00 <microrl_insert_char+0x68>
#endif
            break;
            //-----------------------------------------------------
            case KEY_SO: //^N
#ifdef _USE_HISTORY
            hist_search (pThis, _HIST_DOWN);
    1aae:	2101      	movs	r1, #1
    1ab0:	f7ff fe32 	bl	1718 <hist_search>
#endif
            break;
    1ab4:	e7a4      	b.n	1a00 <microrl_insert_char+0x68>
            }
            break;
            //-----------------------------------------------------
            case KEY_DLE: //^P
#ifdef _USE_HISTORY
            hist_search (pThis, _HIST_UP);
    1ab6:	2100      	movs	r1, #0
    1ab8:	f7ff fe2e 	bl	1718 <hist_search>
#endif
            break;
    1abc:	e7a0      	b.n	1a00 <microrl_insert_char+0x68>
                pThis->sigint();
            break;
#endif
            //-----------------------------------------------------
            default:
            if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
    1abe:	2384      	movs	r3, #132	; 0x84
    1ac0:	58e2      	ldr	r2, [r4, r3]
    1ac2:	2a00      	cmp	r2, #0
    1ac4:	d000      	beq.n	1ac8 <microrl_insert_char+0x130>
    1ac6:	e778      	b.n	19ba <microrl_insert_char+0x22>
    1ac8:	e79a      	b.n	1a00 <microrl_insert_char+0x68>
                         pThis->cmdline + pThis->cursor,
                         pThis->cmdlen - pThis->cursor);
        for (i = 0; i < len; i++) {
            pThis->cmdline [pThis->cursor + i] = text [i];
            if (pThis->cmdline [pThis->cursor + i] == ' ') {
                pThis->cmdline [pThis->cursor + i] = 0;
    1aca:	2200      	movs	r2, #0
    1acc:	e789      	b.n	19e2 <microrl_insert_char+0x4a>
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	00003850 	.word	0x00003850
    1ad4:	00003a58 	.word	0x00003a58

00001ad8 <MY18_Pack_Config>:
#include "pack_config.h"
#include "config.h"

void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
    1ad8:	210c      	movs	r1, #12
    1ada:	6803      	ldr	r3, [r0, #0]
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
    1adc:	4a12      	ldr	r2, [pc, #72]	; (1b28 <MY18_Pack_Config+0x50>)
#include "pack_config.h"
#include "config.h"

void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
    1ade:	62d9      	str	r1, [r3, #44]	; 0x2c
  csb_state->pack_config->cell_capacity_cAh = MY18_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY18_NUM_MODULES;
  csb_state->pack_config->cell_charge_c_rating_cC = MY18_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY18_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY18_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY18_PACK_CELLS_PARALLEL;
    1ae0:	61d9      	str	r1, [r3, #28]
  csb_state->pack_config->cv_min_current_mA = MY18_CV_MIN_CURRENT_mA;
    1ae2:	3158      	adds	r1, #88	; 0x58
    1ae4:	6219      	str	r1, [r3, #32]
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
    1ae6:	4911      	ldr	r1, [pc, #68]	; (1b2c <MY18_Pack_Config+0x54>)
#include "pack_config.h"
#include "config.h"

void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
    1ae8:	601a      	str	r2, [r3, #0]
  csb_state->pack_config->cell_charge_c_rating_cC = MY18_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY18_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY18_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY18_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY18_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
    1aea:	6259      	str	r1, [r3, #36]	; 0x24
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;
    1aec:	4910      	ldr	r1, [pc, #64]	; (1b30 <MY18_Pack_Config+0x58>)
#include "config.h"

void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY18_CELL_MAX_mV;
    1aee:	4a11      	ldr	r2, [pc, #68]	; (1b34 <MY18_Pack_Config+0x5c>)
  csb_state->pack_config->bal_on_thresh_mV = MY18_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY18_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY18_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY18_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;
    1af0:	6299      	str	r1, [r3, #40]	; 0x28

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;
    1af2:	2148      	movs	r1, #72	; 0x48
#include "config.h"

void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY18_CELL_MAX_mV;
    1af4:	605a      	str	r2, [r3, #4]
  csb_state->pack_config->pack_cells_p = MY18_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY18_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;
    1af6:	6319      	str	r1, [r3, #48]	; 0x30

void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY18_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY18_CELL_CAPACITY_cAh;
    1af8:	22fa      	movs	r2, #250	; 0xfa
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
    1afa:	490f      	ldr	r1, [pc, #60]	; (1b38 <MY18_Pack_Config+0x60>)

void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY18_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY18_CELL_CAPACITY_cAh;
    1afc:	609a      	str	r2, [r3, #8]
  csb_state->pack_config->cv_min_current_ms = MY18_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
    1afe:	6359      	str	r1, [r3, #52]	; 0x34
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;
    1b00:	490e      	ldr	r1, [pc, #56]	; (1b3c <MY18_Pack_Config+0x64>)
void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY18_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY18_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY18_NUM_MODULES;
    1b02:	3af4      	subs	r2, #244	; 0xf4
  csb_state->pack_config->cc_cell_voltage_mV = MY18_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;
    1b04:	6399      	str	r1, [r3, #56]	; 0x38

  csb_state->pack_config->cv_charge_voltage_mV = csb_state->pack_config->cell_max_mV * csb_state->pack_config->total_num_cells;
  csb_state->pack_config->cv_charge_current_mA = csb_state->pack_config->cc_charge_current_mA;
    1b06:	6419      	str	r1, [r3, #64]	; 0x40

  csb_state->pack_config->bms_comm = BMS_YES_COMM;
    1b08:	2144      	movs	r1, #68	; 0x44
void MY18_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY18_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY18_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY18_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY18_NUM_MODULES;
    1b0a:	60da      	str	r2, [r3, #12]
  csb_state->pack_config->cell_charge_c_rating_cC = MY18_CELL_CHARGE_C_RATING_cC;
    1b0c:	3a01      	subs	r2, #1
    1b0e:	611a      	str	r2, [r3, #16]
  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;

  csb_state->pack_config->cv_charge_voltage_mV = csb_state->pack_config->cell_max_mV * csb_state->pack_config->total_num_cells;
    1b10:	480b      	ldr	r0, [pc, #44]	; (1b40 <MY18_Pack_Config+0x68>)
  csb_state->pack_config->cell_min_mV = MY18_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY18_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY18_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY18_NUM_MODULES;
  csb_state->pack_config->cell_charge_c_rating_cC = MY18_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY18_BALANCE_ON_THRESHOLD_mV;
    1b12:	3a01      	subs	r2, #1
    1b14:	615a      	str	r2, [r3, #20]
  csb_state->pack_config->bal_off_thresh_mV = MY18_BALANCE_OFF_THRESHOLD_mV;
    1b16:	3a03      	subs	r2, #3
    1b18:	619a      	str	r2, [r3, #24]
  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;

  csb_state->pack_config->cv_charge_voltage_mV = csb_state->pack_config->cell_max_mV * csb_state->pack_config->total_num_cells;
    1b1a:	63d8      	str	r0, [r3, #60]	; 0x3c
  csb_state->pack_config->cv_charge_current_mA = csb_state->pack_config->cc_charge_current_mA;

  csb_state->pack_config->bms_comm = BMS_YES_COMM;
    1b1c:	545a      	strb	r2, [r3, r1]
  csb_state->pack_config->pack_name = MY18_PACK;
    1b1e:	2100      	movs	r1, #0
    1b20:	3244      	adds	r2, #68	; 0x44
    1b22:	5499      	strb	r1, [r3, r2]
}
    1b24:	4770      	bx	lr
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	000009c4 	.word	0x000009c4
    1b2c:	0000ea60 	.word	0x0000ea60
    1b30:	000010cc 	.word	0x000010cc
    1b34:	0000109a 	.word	0x0000109a
    1b38:	0004b960 	.word	0x0004b960
    1b3c:	000005dc 	.word	0x000005dc
    1b40:	0004ab50 	.word	0x0004ab50

00001b44 <MY16_Pack_Config>:

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
    1b44:	210c      	movs	r1, #12
    1b46:	6803      	ldr	r3, [r0, #0]
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
    1b48:	4a12      	ldr	r2, [pc, #72]	; (1b94 <MY16_Pack_Config+0x50>)
  csb_state->pack_config->bms_comm = BMS_YES_COMM;
  csb_state->pack_config->pack_name = MY18_PACK;
}

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
    1b4a:	62d9      	str	r1, [r3, #44]	; 0x2c
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
    1b4c:	61d9      	str	r1, [r3, #28]
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
    1b4e:	3158      	adds	r1, #88	; 0x58
    1b50:	6219      	str	r1, [r3, #32]
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
    1b52:	4911      	ldr	r1, [pc, #68]	; (1b98 <MY16_Pack_Config+0x54>)
  csb_state->pack_config->pack_name = MY18_PACK;
}

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
    1b54:	601a      	str	r2, [r3, #0]
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
    1b56:	6259      	str	r1, [r3, #36]	; 0x24
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;
    1b58:	4910      	ldr	r1, [pc, #64]	; (1b9c <MY16_Pack_Config+0x58>)
}

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
    1b5a:	4a11      	ldr	r2, [pc, #68]	; (1ba0 <MY16_Pack_Config+0x5c>)
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;
    1b5c:	6299      	str	r1, [r3, #40]	; 0x28

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;
    1b5e:	2148      	movs	r1, #72	; 0x48
}

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
    1b60:	605a      	str	r2, [r3, #4]
  csb_state->pack_config->pack_cells_p = MY16_PACK_CELLS_PARALLEL;
  csb_state->pack_config->cv_min_current_mA = MY16_CV_MIN_CURRENT_mA;
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;
    1b62:	6319      	str	r1, [r3, #48]	; 0x30

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
    1b64:	22fa      	movs	r2, #250	; 0xfa
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
    1b66:	490f      	ldr	r1, [pc, #60]	; (1ba4 <MY16_Pack_Config+0x60>)
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;

  csb_state->pack_config->cv_charge_voltage_mV = csb_state->pack_config->cell_max_mV * csb_state->pack_config->total_num_cells;
    1b68:	480f      	ldr	r0, [pc, #60]	; (1ba8 <MY16_Pack_Config+0x64>)
  csb_state->pack_config->cv_min_current_ms = MY16_CV_MIN_CURRENT_ms;
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
    1b6a:	6359      	str	r1, [r3, #52]	; 0x34
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;
    1b6c:	490f      	ldr	r1, [pc, #60]	; (1bac <MY16_Pack_Config+0x68>)

  csb_state->pack_config->cv_charge_voltage_mV = csb_state->pack_config->cell_max_mV * csb_state->pack_config->total_num_cells;
    1b6e:	63d8      	str	r0, [r3, #60]	; 0x3c
  csb_state->pack_config->cc_cell_voltage_mV = MY16_CC_CELL_VOLTAGE_mV;

  csb_state->pack_config->total_num_cells = csb_state->pack_config->num_modules * csb_state->pack_config->module_cell_count;

  csb_state->pack_config->cc_charge_voltage_mV = csb_state->pack_config->cc_cell_voltage_mV * csb_state->pack_config->total_num_cells;
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;
    1b70:	6399      	str	r1, [r3, #56]	; 0x38

  csb_state->pack_config->cv_charge_voltage_mV = csb_state->pack_config->cell_max_mV * csb_state->pack_config->total_num_cells;
  csb_state->pack_config->cv_charge_current_mA = csb_state->pack_config->cc_charge_current_mA;
    1b72:	6419      	str	r1, [r3, #64]	; 0x40

  csb_state->pack_config->bms_comm = BMS_NO_COMM;
    1b74:	2000      	movs	r0, #0
    1b76:	2144      	movs	r1, #68	; 0x44

void MY16_Pack_Config(CSB_STATE_T* csb_state) {
  csb_state->pack_config->module_cell_count = MY16_MODULE_CELL_COUNT;
  csb_state->pack_config->cell_min_mV = MY16_CELL_MIN_mV;
  csb_state->pack_config->cell_max_mV = MY16_CELL_MAX_mV;
  csb_state->pack_config->cell_capacity_cAh = MY16_CELL_CAPACITY_cAh;
    1b78:	609a      	str	r2, [r3, #8]
  csb_state->pack_config->num_modules = MY16_NUM_MODULES;
    1b7a:	3af4      	subs	r2, #244	; 0xf4
    1b7c:	60da      	str	r2, [r3, #12]
  csb_state->pack_config->cell_charge_c_rating_cC = MY16_CELL_CHARGE_C_RATING_cC;
    1b7e:	3a01      	subs	r2, #1
    1b80:	611a      	str	r2, [r3, #16]
  csb_state->pack_config->bal_on_thresh_mV = MY16_BALANCE_ON_THRESHOLD_mV;
    1b82:	3a01      	subs	r2, #1
    1b84:	615a      	str	r2, [r3, #20]
  csb_state->pack_config->bal_off_thresh_mV = MY16_BALANCE_OFF_THRESHOLD_mV;
    1b86:	3a03      	subs	r2, #3
    1b88:	619a      	str	r2, [r3, #24]
  csb_state->pack_config->cc_charge_current_mA = csb_state->pack_config->cell_capacity_cAh * csb_state->pack_config->cell_charge_c_rating_cC * csb_state->pack_config->pack_cells_p / 10;

  csb_state->pack_config->cv_charge_voltage_mV = csb_state->pack_config->cell_max_mV * csb_state->pack_config->total_num_cells;
  csb_state->pack_config->cv_charge_current_mA = csb_state->pack_config->cc_charge_current_mA;

  csb_state->pack_config->bms_comm = BMS_NO_COMM;
    1b8a:	5458      	strb	r0, [r3, r1]
  csb_state->pack_config->pack_name = MY16_PACK;
    1b8c:	3101      	adds	r1, #1
    1b8e:	545a      	strb	r2, [r3, r1]
}
    1b90:	4770      	bx	lr
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	000009c4 	.word	0x000009c4
    1b98:	0000ea60 	.word	0x0000ea60
    1b9c:	000010cc 	.word	0x000010cc
    1ba0:	0000109a 	.word	0x0000109a
    1ba4:	0004b960 	.word	0x0004b960
    1ba8:	0004ab50 	.word	0x0004ab50
    1bac:	000005dc 	.word	0x000005dc

00001bb0 <Board_GPIO_Init>:
#define PIN_43_PIO_FUNC IOCON_FUNC0
#define PIN_48 3, 3
#define PIN_48_IOCON IOCON_PIO3_3
#define PIN_48_PIO_FUNC IOCON_FUNC0

void Board_GPIO_Init(void) {
    1bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bb2:	465f      	mov	r7, fp
    1bb4:	4656      	mov	r6, sl
    1bb6:	464d      	mov	r5, r9
    1bb8:	4644      	mov	r4, r8
    1bba:	b4f0      	push	{r4, r5, r6, r7}
  Chip_GPIO_Init(LPC_GPIO);
    1bbc:	25a0      	movs	r5, #160	; 0xa0
    1bbe:	05ed      	lsls	r5, r5, #23
    1bc0:	0028      	movs	r0, r5
    1bc2:	f000 fa17 	bl	1ff4 <Chip_GPIO_Init>
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1bc6:	2380      	movs	r3, #128	; 0x80
    1bc8:	2104      	movs	r1, #4
    1bca:	2001      	movs	r0, #1
    1bcc:	4c81      	ldr	r4, [pc, #516]	; (1dd4 <Board_GPIO_Init+0x224>)
    1bce:	021b      	lsls	r3, r3, #8
    1bd0:	58e2      	ldr	r2, [r4, r3]
    1bd2:	2610      	movs	r6, #16
    1bd4:	430a      	orrs	r2, r1
    1bd6:	50e2      	str	r2, [r4, r3]
    1bd8:	4a7f      	ldr	r2, [pc, #508]	; (1dd8 <Board_GPIO_Init+0x228>)
    1bda:	317c      	adds	r1, #124	; 0x7c
    1bdc:	5050      	str	r0, [r2, r1]
    1bde:	58e1      	ldr	r1, [r4, r3]
    1be0:	3001      	adds	r0, #1
    1be2:	4301      	orrs	r1, r0
    1be4:	50e1      	str	r1, [r4, r3]
    1be6:	2101      	movs	r1, #1
    1be8:	487c      	ldr	r0, [pc, #496]	; (1ddc <Board_GPIO_Init+0x22c>)
    1bea:	67d1      	str	r1, [r2, #124]	; 0x7c
    1bec:	58c1      	ldr	r1, [r0, r3]
    1bee:	2720      	movs	r7, #32
    1bf0:	4331      	orrs	r1, r6
    1bf2:	50c1      	str	r1, [r0, r3]
    1bf4:	2100      	movs	r1, #0
    1bf6:	6411      	str	r1, [r2, #64]	; 0x40
    1bf8:	58c6      	ldr	r6, [r0, r3]
    1bfa:	433e      	orrs	r6, r7
    1bfc:	50c6      	str	r6, [r0, r3]
    1bfe:	6451      	str	r1, [r2, #68]	; 0x44
    1c00:	58c6      	ldr	r6, [r0, r3]
    1c02:	3720      	adds	r7, #32
    1c04:	433e      	orrs	r6, r7
    1c06:	50c6      	str	r6, [r0, r3]
    1c08:	6011      	str	r1, [r2, #0]
    1c0a:	58c6      	ldr	r6, [r0, r3]
    1c0c:	46ba      	mov	sl, r7
    1c0e:	37c0      	adds	r7, #192	; 0xc0
    1c10:	433e      	orrs	r6, r7
    1c12:	50c6      	str	r6, [r0, r3]
    1c14:	6251      	str	r1, [r2, #36]	; 0x24
    1c16:	58c6      	ldr	r6, [r0, r3]
    1c18:	3701      	adds	r7, #1
    1c1a:	37ff      	adds	r7, #255	; 0xff
    1c1c:	46bc      	mov	ip, r7
    1c1e:	433e      	orrs	r6, r7
    1c20:	2780      	movs	r7, #128	; 0x80
    1c22:	50c6      	str	r6, [r0, r3]
    1c24:	6551      	str	r1, [r2, #84]	; 0x54
    1c26:	58c6      	ldr	r6, [r0, r3]
    1c28:	00ff      	lsls	r7, r7, #3
    1c2a:	46b9      	mov	r9, r7
    1c2c:	433e      	orrs	r6, r7
    1c2e:	2780      	movs	r7, #128	; 0x80
    1c30:	50c6      	str	r6, [r0, r3]
    1c32:	6591      	str	r1, [r2, #88]	; 0x58
    1c34:	58c6      	ldr	r6, [r0, r3]
    1c36:	013f      	lsls	r7, r7, #4
    1c38:	46b8      	mov	r8, r7
    1c3a:	433e      	orrs	r6, r7
    1c3c:	2704      	movs	r7, #4
    1c3e:	50c6      	str	r6, [r0, r3]
    1c40:	6711      	str	r1, [r2, #112]	; 0x70
    1c42:	58ee      	ldr	r6, [r5, r3]
    1c44:	433e      	orrs	r6, r7
    1c46:	50ee      	str	r6, [r5, r3]
    1c48:	61d1      	str	r1, [r2, #28]
    1c4a:	58ee      	ldr	r6, [r5, r3]
    1c4c:	0037      	movs	r7, r6
    1c4e:	2608      	movs	r6, #8
    1c50:	4337      	orrs	r7, r6
    1c52:	50ef      	str	r7, [r5, r3]
    1c54:	62d1      	str	r1, [r2, #44]	; 0x2c
    1c56:	58ef      	ldr	r7, [r5, r3]
    1c58:	3608      	adds	r6, #8
    1c5a:	4337      	orrs	r7, r6
    1c5c:	50ef      	str	r7, [r5, r3]
    1c5e:	6311      	str	r1, [r2, #48]	; 0x30
    1c60:	58ee      	ldr	r6, [r5, r3]
    1c62:	0037      	movs	r7, r6
    1c64:	2620      	movs	r6, #32
    1c66:	4337      	orrs	r7, r6
    1c68:	50ef      	str	r7, [r5, r3]
    1c6a:	4657      	mov	r7, sl
    1c6c:	6351      	str	r1, [r2, #52]	; 0x34
    1c6e:	58ee      	ldr	r6, [r5, r3]
    1c70:	4337      	orrs	r7, r6
    1c72:	50ef      	str	r7, [r5, r3]
    1c74:	64d1      	str	r1, [r2, #76]	; 0x4c
    1c76:	58ee      	ldr	r6, [r5, r3]
    1c78:	0037      	movs	r7, r6
    1c7a:	2680      	movs	r6, #128	; 0x80
    1c7c:	4337      	orrs	r7, r6
    1c7e:	50ef      	str	r7, [r5, r3]
    1c80:	6511      	str	r1, [r2, #80]	; 0x50
    1c82:	58ee      	ldr	r6, [r5, r3]
    1c84:	0037      	movs	r7, r6
    1c86:	2680      	movs	r6, #128	; 0x80
    1c88:	0076      	lsls	r6, r6, #1
    1c8a:	4337      	orrs	r7, r6
    1c8c:	50ef      	str	r7, [r5, r3]
    1c8e:	6611      	str	r1, [r2, #96]	; 0x60
    1c90:	58ee      	ldr	r6, [r5, r3]
    1c92:	0037      	movs	r7, r6
    1c94:	4666      	mov	r6, ip
    1c96:	4337      	orrs	r7, r6
    1c98:	50ef      	str	r7, [r5, r3]
    1c9a:	6651      	str	r1, [r2, #100]	; 0x64
    1c9c:	58ee      	ldr	r6, [r5, r3]
    1c9e:	0037      	movs	r7, r6
    1ca0:	464e      	mov	r6, r9
    1ca2:	4337      	orrs	r7, r6
    1ca4:	2601      	movs	r6, #1
    1ca6:	50ef      	str	r7, [r5, r3]
    1ca8:	6696      	str	r6, [r2, #104]	; 0x68
    1caa:	58ee      	ldr	r6, [r5, r3]
    1cac:	0037      	movs	r7, r6
    1cae:	4646      	mov	r6, r8
    1cb0:	4337      	orrs	r7, r6
    1cb2:	50ef      	str	r7, [r5, r3]
    1cb4:	2501      	movs	r5, #1
    1cb6:	2601      	movs	r6, #1
    1cb8:	6755      	str	r5, [r2, #116]	; 0x74
    1cba:	58e5      	ldr	r5, [r4, r3]
    1cbc:	2701      	movs	r7, #1
    1cbe:	4335      	orrs	r5, r6
    1cc0:	50e5      	str	r5, [r4, r3]
    1cc2:	2509      	movs	r5, #9
    1cc4:	46aa      	mov	sl, r5
    1cc6:	6795      	str	r5, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1cc8:	6061      	str	r1, [r4, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1cca:	58e5      	ldr	r5, [r4, r3]
    1ccc:	3607      	adds	r6, #7
    1cce:	4335      	orrs	r5, r6
    1cd0:	50e5      	str	r5, [r4, r3]
    1cd2:	4656      	mov	r6, sl
    1cd4:	2590      	movs	r5, #144	; 0x90
    1cd6:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1cd8:	6221      	str	r1, [r4, #32]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1cda:	58e5      	ldr	r5, [r4, r3]
    1cdc:	3607      	adds	r6, #7
    1cde:	4335      	orrs	r5, r6
    1ce0:	50e5      	str	r5, [r4, r3]
    1ce2:	2594      	movs	r5, #148	; 0x94
    1ce4:	3e08      	subs	r6, #8
    1ce6:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1ce8:	6421      	str	r1, [r4, #64]	; 0x40
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1cea:	58e5      	ldr	r5, [r4, r3]
    1cec:	3618      	adds	r6, #24
    1cee:	4335      	orrs	r5, r6
    1cf0:	50e5      	str	r5, [r4, r3]
    1cf2:	25a0      	movs	r5, #160	; 0xa0
    1cf4:	3e18      	subs	r6, #24
    1cf6:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1cf8:	3d20      	subs	r5, #32
    1cfa:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1cfc:	58e5      	ldr	r5, [r4, r3]
    1cfe:	36f8      	adds	r6, #248	; 0xf8
    1d00:	4335      	orrs	r5, r6
    1d02:	50e5      	str	r5, [r4, r3]
    1d04:	2508      	movs	r5, #8
    1d06:	6155      	str	r5, [r2, #20]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d08:	464d      	mov	r5, r9
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d0a:	4666      	mov	r6, ip
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d0c:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d0e:	58e5      	ldr	r5, [r4, r3]
    1d10:	4335      	orrs	r5, r6
    1d12:	50e5      	str	r5, [r4, r3]
    1d14:	2508      	movs	r5, #8
    1d16:	6395      	str	r5, [r2, #56]	; 0x38
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d18:	4645      	mov	r5, r8
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d1a:	464e      	mov	r6, r9
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d1c:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d1e:	58e5      	ldr	r5, [r4, r3]
    1d20:	4335      	orrs	r5, r6
    1d22:	50e5      	str	r5, [r4, r3]
    1d24:	2508      	movs	r5, #8
    1d26:	66d5      	str	r5, [r2, #108]	; 0x6c
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d28:	2580      	movs	r5, #128	; 0x80
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d2a:	4646      	mov	r6, r8
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d2c:	016d      	lsls	r5, r5, #5
    1d2e:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d30:	58e5      	ldr	r5, [r4, r3]
    1d32:	4335      	orrs	r5, r6
    1d34:	50e5      	str	r5, [r4, r3]
    1d36:	2608      	movs	r6, #8
    1d38:	2598      	movs	r5, #152	; 0x98
    1d3a:	5156      	str	r6, [r2, r5]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d3c:	2580      	movs	r5, #128	; 0x80
    1d3e:	01ad      	lsls	r5, r5, #6
    1d40:	5161      	str	r1, [r4, r5]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d42:	2501      	movs	r5, #1
    1d44:	58c4      	ldr	r4, [r0, r3]
    1d46:	432c      	orrs	r4, r5
    1d48:	50c4      	str	r4, [r0, r3]
    1d4a:	2408      	movs	r4, #8
    1d4c:	6094      	str	r4, [r2, #8]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d4e:	6041      	str	r1, [r0, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d50:	58c4      	ldr	r4, [r0, r3]
    1d52:	3501      	adds	r5, #1
    1d54:	432c      	orrs	r4, r5
    1d56:	50c4      	str	r4, [r0, r3]
    1d58:	2408      	movs	r4, #8
    1d5a:	6294      	str	r4, [r2, #40]	; 0x28
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d5c:	6081      	str	r1, [r0, #8]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d5e:	58c4      	ldr	r4, [r0, r3]
    1d60:	3502      	adds	r5, #2
    1d62:	432c      	orrs	r4, r5
    1d64:	50c4      	str	r4, [r0, r3]
    1d66:	2408      	movs	r4, #8
    1d68:	65d4      	str	r4, [r2, #92]	; 0x5c
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d6a:	6101      	str	r1, [r0, #16]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d6c:	58c4      	ldr	r4, [r0, r3]
    1d6e:	3504      	adds	r5, #4
    1d70:	432c      	orrs	r4, r5
    1d72:	50c4      	str	r4, [r0, r3]
    1d74:	248c      	movs	r4, #140	; 0x8c
    1d76:	5115      	str	r5, [r2, r4]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d78:	6201      	str	r1, [r0, #32]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d7a:	58c4      	ldr	r4, [r0, r3]
    1d7c:	3578      	adds	r5, #120	; 0x78
    1d7e:	432c      	orrs	r4, r5
    1d80:	50c4      	str	r4, [r0, r3]
    1d82:	2408      	movs	r4, #8
    1d84:	6214      	str	r4, [r2, #32]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d86:	4664      	mov	r4, ip
    1d88:	5101      	str	r1, [r0, r4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d8a:	4815      	ldr	r0, [pc, #84]	; (1de0 <Board_GPIO_Init+0x230>)
    1d8c:	3d78      	subs	r5, #120	; 0x78
    1d8e:	58c4      	ldr	r4, [r0, r3]
    1d90:	4327      	orrs	r7, r4
    1d92:	2484      	movs	r4, #132	; 0x84
    1d94:	50c7      	str	r7, [r0, r3]
    1d96:	5115      	str	r5, [r2, r4]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1d98:	6041      	str	r1, [r0, #4]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1d9a:	58c4      	ldr	r4, [r0, r3]
    1d9c:	3d06      	subs	r5, #6
    1d9e:	432c      	orrs	r4, r5
    1da0:	50c4      	str	r4, [r0, r3]
    1da2:	2408      	movs	r4, #8
    1da4:	6794      	str	r4, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1da6:	6081      	str	r1, [r0, #8]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1da8:	58c4      	ldr	r4, [r0, r3]
    1daa:	3502      	adds	r5, #2
    1dac:	432c      	orrs	r4, r5
    1dae:	50c4      	str	r4, [r0, r3]
    1db0:	2408      	movs	r4, #8
    1db2:	6794      	str	r4, [r2, #120]	; 0x78
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1db4:	6101      	str	r1, [r0, #16]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO[port].DIR |= (1UL << pin);
    1db6:	58c4      	ldr	r4, [r0, r3]
    1db8:	3504      	adds	r5, #4
    1dba:	432c      	orrs	r4, r5
    1dbc:	50c4      	str	r4, [r0, r3]
    1dbe:	23ac      	movs	r3, #172	; 0xac
    1dc0:	2408      	movs	r4, #8
    1dc2:	50d4      	str	r4, [r2, r3]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1dc4:	6201      	str	r1, [r0, #32]

  Chip_GPIO_SetPinDIROutput(LPC_GPIO, PIN_48);
  Chip_IOCON_PinMuxSet(LPC_IOCON, PIN_48_IOCON,
      (PIN_48_PIO_FUNC | IOCON_MODE_PULLDOWN) );
  Chip_GPIO_SetPinState(LPC_GPIO, PIN_48, false);
}
    1dc6:	bc3c      	pop	{r2, r3, r4, r5}
    1dc8:	4690      	mov	r8, r2
    1dca:	4699      	mov	r9, r3
    1dcc:	46a2      	mov	sl, r4
    1dce:	46ab      	mov	fp, r5
    1dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	50010000 	.word	0x50010000
    1dd8:	40044000 	.word	0x40044000
    1ddc:	50020000 	.word	0x50020000
    1de0:	50030000 	.word	0x50030000

00001de4 <Low_Side_Contactor_Pin_Get>:
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (pGPIO[port].DATA[1 << pin]) != 0;
    1de4:	4b02      	ldr	r3, [pc, #8]	; (1df0 <Low_Side_Contactor_Pin_Get+0xc>)
    1de6:	6918      	ldr	r0, [r3, #16]

bool Low_Side_Contactor_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, CTR_LOW_SWTCH);
    1de8:	1e43      	subs	r3, r0, #1
    1dea:	4198      	sbcs	r0, r3
    1dec:	b2c0      	uxtb	r0, r0
}
    1dee:	4770      	bx	lr
    1df0:	50010000 	.word	0x50010000

00001df4 <High_Side_Contactor_Pin_Set>:
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
    1df4:	4b01      	ldr	r3, [pc, #4]	; (1dfc <High_Side_Contactor_Pin_Set+0x8>)
    1df6:	0040      	lsls	r0, r0, #1
    1df8:	6098      	str	r0, [r3, #8]
  return Chip_GPIO_GetPinState(LPC_GPIO, CTR_HIGH_SWTCH);
}

void High_Side_Contactor_Pin_Set(bool state) {
  Chip_GPIO_SetPinState(LPC_GPIO, CTR_HIGH_SWTCH, state);
}
    1dfa:	4770      	bx	lr
    1dfc:	50010000 	.word	0x50010000

00001e00 <IMD_Pin_Get>:
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (pGPIO[port].DATA[1 << pin]) != 0;
    1e00:	4b02      	ldr	r3, [pc, #8]	; (1e0c <IMD_Pin_Get+0xc>)
    1e02:	6c18      	ldr	r0, [r3, #64]	; 0x40

bool IMD_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, IMD_IN);
    1e04:	1e43      	subs	r3, r0, #1
    1e06:	4198      	sbcs	r0, r3
    1e08:	b2c0      	uxtb	r0, r0
}
    1e0a:	4770      	bx	lr
    1e0c:	50020000 	.word	0x50020000

00001e10 <BMS_Pin_Get>:
    1e10:	2380      	movs	r3, #128	; 0x80
    1e12:	4a03      	ldr	r2, [pc, #12]	; (1e20 <BMS_Pin_Get+0x10>)
    1e14:	58d0      	ldr	r0, [r2, r3]

bool BMS_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, BMS_IN);
    1e16:	1e43      	subs	r3, r0, #1
    1e18:	4198      	sbcs	r0, r3
    1e1a:	b2c0      	uxtb	r0, r0
}
    1e1c:	4770      	bx	lr
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	50020000 	.word	0x50020000

00001e24 <Interlock_Pin_Get>:
    1e24:	2380      	movs	r3, #128	; 0x80
    1e26:	4a03      	ldr	r2, [pc, #12]	; (1e34 <Interlock_Pin_Get+0x10>)
    1e28:	005b      	lsls	r3, r3, #1
    1e2a:	58d0      	ldr	r0, [r2, r3]

bool Interlock_Pin_Get(void) {
  return Chip_GPIO_GetPinState(LPC_GPIO, INT_IN);
    1e2c:	1e43      	subs	r3, r0, #1
    1e2e:	4198      	sbcs	r0, r3
    1e30:	b2c0      	uxtb	r0, r0
}
    1e32:	4770      	bx	lr
    1e34:	50020000 	.word	0x50020000

00001e38 <SSM_Init>:

volatile uint32_t msTicks;

void SSM_Init(CSB_STATE_T *state) {
  // Initialize BMS state variables
  state->curr_mode = CSB_SSM_MODE_INIT;
    1e38:	2300      	movs	r3, #0
#include "charge.h"
#include "board.h"

volatile uint32_t msTicks;

void SSM_Init(CSB_STATE_T *state) {
    1e3a:	b510      	push	{r4, lr}
  // Initialize BMS state variables
  state->curr_mode = CSB_SSM_MODE_INIT;
    1e3c:	7103      	strb	r3, [r0, #4]
  state->init_state = CSB_INIT_OFF;
    1e3e:	7143      	strb	r3, [r0, #5]
  state->charge_state = CSB_CHARGE_OFF;
    1e40:	7183      	strb	r3, [r0, #6]
  state->idle_state = CSB_IDLE_OFF;
    1e42:	71c3      	strb	r3, [r0, #7]

  Charge_Init(state);
    1e44:	f7fe fbb4 	bl	5b0 <Charge_Init>
}
    1e48:	bd10      	pop	{r4, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)

00001e4c <Is_Valid_Jump>:
}

bool Is_Valid_Jump(CSB_SSM_MODE_T mode1, CSB_SSM_MODE_T mode2) {

    // idle switch
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
    1e4c:	2801      	cmp	r0, #1
    1e4e:	d010      	beq.n	1e72 <Is_Valid_Jump+0x26>
        return true;
    } else if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
    1e50:	2802      	cmp	r0, #2
    1e52:	d008      	beq.n	1e66 <Is_Valid_Jump+0x1a>
        return true;
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_IDLE) {
    1e54:	2803      	cmp	r0, #3
    1e56:	d113      	bne.n	1e80 <Is_Valid_Jump+0x34>
    1e58:	2901      	cmp	r1, #1
    1e5a:	d013      	beq.n	1e84 <Is_Valid_Jump+0x38>
        return true;

    // charge and balance switch
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_CHARGE) {
    1e5c:	3902      	subs	r1, #2
    1e5e:	4248      	negs	r0, r1
    1e60:	4148      	adcs	r0, r1
    1e62:	b2c0      	uxtb	r0, r0
    1e64:	e004      	b.n	1e70 <Is_Valid_Jump+0x24>
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
    1e66:	4381      	bics	r1, r0
    1e68:	3901      	subs	r1, #1
    1e6a:	4248      	negs	r0, r1
    1e6c:	4148      	adcs	r0, r1
    1e6e:	b2c0      	uxtb	r0, r0
        return true;
    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;
    }
    return false;
}
    1e70:	4770      	bx	lr
}

bool Is_Valid_Jump(CSB_SSM_MODE_T mode1, CSB_SSM_MODE_T mode2) {

    // idle switch
    if(mode1 == CSB_SSM_MODE_IDLE && mode2 == CSB_SSM_MODE_CHARGE) {
    1e72:	2300      	movs	r3, #0
    1e74:	3902      	subs	r1, #2
    1e76:	b2c9      	uxtb	r1, r1
    1e78:	4288      	cmp	r0, r1
    1e7a:	415b      	adcs	r3, r3
    1e7c:	b2d8      	uxtb	r0, r3
    1e7e:	e7f7      	b.n	1e70 <Is_Valid_Jump+0x24>
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_CHARGE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_BALANCE) {
        return true;
    }
    return false;
    1e80:	2000      	movs	r0, #0
    1e82:	e7f5      	b.n	1e70 <Is_Valid_Jump+0x24>
        return true;

    } else if(mode1 == CSB_SSM_MODE_CHARGE && mode2 == CSB_SSM_MODE_IDLE) {
        return true;
    } else if(mode1 == CSB_SSM_MODE_BALANCE && mode2 == CSB_SSM_MODE_IDLE) {
        return true;
    1e84:	2001      	movs	r0, #1
    1e86:	e7f3      	b.n	1e70 <Is_Valid_Jump+0x24>

00001e88 <SSM_Step>:
            return true;
    }
    return false;
}

void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
    1e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8a:	4647      	mov	r7, r8
    1e8c:	b480      	push	{r7}
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1e8e:	790c      	ldrb	r4, [r1, #4]
    1e90:	7a07      	ldrb	r7, [r0, #8]
            return true;
    }
    return false;
}

void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
    1e92:	0006      	movs	r6, r0
    1e94:	000d      	movs	r5, r1
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1e96:	0020      	movs	r0, r4
    1e98:	0039      	movs	r1, r7
            return true;
    }
    return false;
}

void SSM_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
    1e9a:	4690      	mov	r8, r2
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1e9c:	f7ff ffd6 	bl	1e4c <Is_Valid_Jump>
    1ea0:	2800      	cmp	r0, #0
    1ea2:	d005      	beq.n	1eb0 <SSM_Step+0x28>
    }
    return false;
}

bool Is_State_Done(CSB_STATE_T *state) {
    switch(state->curr_mode) {
    1ea4:	2c01      	cmp	r4, #1
    1ea6:	d01b      	beq.n	1ee0 <SSM_Step+0x58>
    1ea8:	2c00      	cmp	r4, #0
    1eaa:	d01c      	beq.n	1ee6 <SSM_Step+0x5e>
    1eac:	2c03      	cmp	r4, #3
    1eae:	d914      	bls.n	1eda <SSM_Step+0x52>

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
        state->curr_mode = input->mode_request;
    }

    switch(state->curr_mode) {
    1eb0:	2c02      	cmp	r4, #2
    1eb2:	d00a      	beq.n	1eca <SSM_Step+0x42>
    1eb4:	2c03      	cmp	r4, #3
    1eb6:	d008      	beq.n	1eca <SSM_Step+0x42>
    1eb8:	2c00      	cmp	r4, #0
    1eba:	d10b      	bne.n	1ed4 <SSM_Step+0x4c>
    1ebc:	796b      	ldrb	r3, [r5, #5]

  Charge_Init(state);
}

void Init_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
  switch(state->init_state) {
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d015      	beq.n	1eee <SSM_Step+0x66>
    1ec2:	2b01      	cmp	r3, #1
    1ec4:	d106      	bne.n	1ed4 <SSM_Step+0x4c>
      case CSB_INIT_OFF:
          state->init_state = CSB_INIT_DONE;
          break;
      case CSB_INIT_DONE:
          state->curr_mode = CSB_SSM_MODE_IDLE;
    1ec6:	712b      	strb	r3, [r5, #4]
    1ec8:	e004      	b.n	1ed4 <SSM_Step+0x4c>
            break;
        case CSB_SSM_MODE_CHARGE:
            Charge_Step(input, state, output);
            break;
        case CSB_SSM_MODE_BALANCE:
            Charge_Step(input, state, output);
    1eca:	4642      	mov	r2, r8
    1ecc:	0029      	movs	r1, r5
    1ece:	0030      	movs	r0, r6
    1ed0:	f7fe fb76 	bl	5c0 <Charge_Step>
            break;
    }
}
    1ed4:	bc04      	pop	{r2}
    1ed6:	4690      	mov	r8, r2
    1ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1eda:	79ab      	ldrb	r3, [r5, #6]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d1e7      	bne.n	1eb0 <SSM_Step+0x28>
        state->curr_mode = input->mode_request;
    1ee0:	712f      	strb	r7, [r5, #4]
    1ee2:	003c      	movs	r4, r7
    1ee4:	e7e4      	b.n	1eb0 <SSM_Step+0x28>
    switch(state->curr_mode) {
        case CSB_SSM_MODE_CHARGE:
        case CSB_SSM_MODE_BALANCE:
            return state->charge_state == CSB_CHARGE_OFF;
        case CSB_SSM_MODE_INIT:
            return state->init_state == CSB_INIT_DONE;
    1ee6:	796b      	ldrb	r3, [r5, #5]
    // Check if in idle:
    //   if in idle:
    //        if mode request change valid, switch over
    //   else dispatch step to appropriate SM step

    if(Is_Valid_Jump(state->curr_mode, input->mode_request) && Is_State_Done(state)) {
    1ee8:	2b01      	cmp	r3, #1
    1eea:	d1e8      	bne.n	1ebe <SSM_Step+0x36>
    1eec:	e7f8      	b.n	1ee0 <SSM_Step+0x58>
}

void Init_Step(CSB_INPUT_T *input, CSB_STATE_T *state, CSB_OUTPUT_T *output) {
  switch(state->init_state) {
      case CSB_INIT_OFF:
          state->init_state = CSB_INIT_DONE;
    1eee:	2301      	movs	r3, #1
    1ef0:	716b      	strb	r3, [r5, #5]
    1ef2:	e7ef      	b.n	1ed4 <SSM_Step+0x4c>

00001ef4 <SystemInit>:
 * @brief  Setup the microcontroller system.
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
    1ef4:	4a18      	ldr	r2, [pc, #96]	; (1f58 <SystemInit+0x64>)
    1ef6:	4b19      	ldr	r3, [pc, #100]	; (1f5c <SystemInit+0x68>)
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
    1ef8:	2001      	movs	r0, #1
 * @brief  Setup the microcontroller system.
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
    1efa:	601a      	str	r2, [r3, #0]
  TicksPerMS = __SYSTEM_CLOCK/1000;
    1efc:	4a18      	ldr	r2, [pc, #96]	; (1f60 <SystemInit+0x6c>)
    1efe:	4b19      	ldr	r3, [pc, #100]	; (1f64 <SystemInit+0x70>)

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
    1f00:	4919      	ldr	r1, [pc, #100]	; (1f68 <SystemInit+0x74>)
 *       Initialize the System.
 */
void SystemInit (void) {
#if (CLOCK_SETUP)                                /* Clock Setup           */
  SystemCoreClock = __SYSTEM_CLOCK;
  TicksPerMS = __SYSTEM_CLOCK/1000;
    1f02:	601a      	str	r2, [r3, #0]

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
    1f04:	2200      	movs	r2, #0
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
    1f06:	2301      	movs	r3, #1

  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 5);        /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
#endif
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input        */
    1f08:	640a      	str	r2, [r1, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
    1f0a:	644b      	str	r3, [r1, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
    1f0c:	644a      	str	r2, [r1, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
    1f0e:	644b      	str	r3, [r1, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
    1f10:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1f12:	4b15      	ldr	r3, [pc, #84]	; (1f68 <SystemInit+0x74>)
    1f14:	4210      	tst	r0, r2
    1f16:	d0fb      	beq.n	1f10 <SystemInit+0x1c>
#if (SYSPLL_SETUP)                              /* System PLL Setup      */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
    1f18:	2223      	movs	r2, #35	; 0x23
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 7);        /* Power-up SYSPLL          */
    1f1a:	218e      	movs	r1, #142	; 0x8e
    1f1c:	2080      	movs	r0, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;              /* Update Clock Source    */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));      /* Wait Until Updated    */
#if (SYSPLL_SETUP)                              /* System PLL Setup      */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
    1f1e:	609a      	str	r2, [r3, #8]
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 7);        /* Power-up SYSPLL          */
    1f20:	0089      	lsls	r1, r1, #2
    1f22:	585a      	ldr	r2, [r3, r1]
    1f24:	4382      	bics	r2, r0
    1f26:	505a      	str	r2, [r3, r1]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));      /* Wait Until PLL Locked    */
    1f28:	001a      	movs	r2, r3
    1f2a:	387f      	subs	r0, #127	; 0x7f
    1f2c:	68d1      	ldr	r1, [r2, #12]
    1f2e:	4b0e      	ldr	r3, [pc, #56]	; (1f68 <SystemInit+0x74>)
    1f30:	4208      	tst	r0, r1
    1f32:	d0fb      	beq.n	1f2c <SystemInit+0x38>
#endif
#if (WDTOSC_SETUP)                              /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 6);        /* Power-up WDT Clock    */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;    /* Select PLL Clock Output  */
    1f34:	2203      	movs	r2, #3
    1f36:	671a      	str	r2, [r3, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
    1f38:	2200      	movs	r2, #0
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
    1f3a:	2001      	movs	r0, #1
#if (WDTOSC_SETUP)                              /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG   &= ~(1 << 6);        /* Power-up WDT Clock    */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;    /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
    1f3c:	675a      	str	r2, [r3, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
    1f3e:	3201      	adds	r2, #1
    1f40:	675a      	str	r2, [r3, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
    1f42:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    1f44:	4908      	ldr	r1, [pc, #32]	; (1f68 <SystemInit+0x74>)
    1f46:	4210      	tst	r0, r2
    1f48:	d0fb      	beq.n	1f42 <SystemInit+0x4e>
#endif

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
    1f4a:	2301      	movs	r3, #1
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
    1f4c:	4a07      	ldr	r2, [pc, #28]	; (1f6c <SystemInit+0x78>)
  LPC_SYSCTL->MAINCLKUEN    = 0x0;              /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));      /* Wait Until Updated      */
#endif

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
    1f4e:	678b      	str	r3, [r1, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
    1f50:	337f      	adds	r3, #127	; 0x7f
    1f52:	50ca      	str	r2, [r1, r3]
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)                 /* Memory Mapping Setup              */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
    1f54:	4770      	bx	lr
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	02dc6c00 	.word	0x02dc6c00
    1f5c:	1000073c 	.word	0x1000073c
    1f60:	0000bb80 	.word	0x0000bb80
    1f64:	10000740 	.word	0x10000740
    1f68:	40048000 	.word	0x40048000
    1f6c:	0001005f 	.word	0x0001005f

00001f70 <Chip_Clock_GetMainClockRate>:
/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
    1f70:	2103      	movs	r1, #3

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
    1f72:	b500      	push	{lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
    1f74:	4a1b      	ldr	r2, [pc, #108]	; (1fe4 <Chip_Clock_GetMainClockRate+0x74>)

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
    1f76:	b083      	sub	sp, #12
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
    1f78:	6f13      	ldr	r3, [r2, #112]	; 0x70
    1f7a:	400b      	ands	r3, r1
    1f7c:	2b02      	cmp	r3, #2
    1f7e:	d01c      	beq.n	1fba <Chip_Clock_GetMainClockRate+0x4a>
    1f80:	2b03      	cmp	r3, #3
    1f82:	d00c      	beq.n	1f9e <Chip_Clock_GetMainClockRate+0x2e>
    1f84:	2b01      	cmp	r3, #1
    1f86:	d002      	beq.n	1f8e <Chip_Clock_GetMainClockRate+0x1e>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
    1f88:	4817      	ldr	r0, [pc, #92]	; (1fe8 <Chip_Clock_GetMainClockRate+0x78>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
    1f8a:	b003      	add	sp, #12
    1f8c:	bd00      	pop	{pc}
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
    1f8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1f90:	4019      	ands	r1, r3
    1f92:	d0f9      	beq.n	1f88 <Chip_Clock_GetMainClockRate+0x18>
    1f94:	2901      	cmp	r1, #1
    1f96:	d123      	bne.n	1fe0 <Chip_Clock_GetMainClockRate+0x70>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
    1f98:	4b14      	ldr	r3, [pc, #80]	; (1fec <Chip_Clock_GetMainClockRate+0x7c>)
    1f9a:	6818      	ldr	r0, [r3, #0]
    1f9c:	e7f5      	b.n	1f8a <Chip_Clock_GetMainClockRate+0x1a>
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
    1f9e:	6891      	ldr	r1, [r2, #8]
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
    1fa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
    1fa2:	4013      	ands	r3, r2
    1fa4:	d016      	beq.n	1fd4 <Chip_Clock_GetMainClockRate+0x64>
    1fa6:	2b01      	cmp	r3, #1
    1fa8:	d11a      	bne.n	1fe0 <Chip_Clock_GetMainClockRate+0x70>
    1faa:	201f      	movs	r0, #31
    1fac:	4b0f      	ldr	r3, [pc, #60]	; (1fec <Chip_Clock_GetMainClockRate+0x7c>)
    1fae:	4008      	ands	r0, r1
    1fb0:	681b      	ldr	r3, [r3, #0]
    1fb2:	3001      	adds	r0, #1
    1fb4:	9301      	str	r3, [sp, #4]
    1fb6:	4358      	muls	r0, r3
    1fb8:	e7e7      	b.n	1f8a <Chip_Clock_GetMainClockRate+0x1a>
	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
    1fba:	211f      	movs	r1, #31
#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
    1fbc:	6a53      	ldr	r3, [r2, #36]	; 0x24
	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
    1fbe:	05da      	lsls	r2, r3, #23
    1fc0:	4019      	ands	r1, r3
    1fc2:	0f12      	lsrs	r2, r2, #28
    1fc4:	4b0a      	ldr	r3, [pc, #40]	; (1ff0 <Chip_Clock_GetMainClockRate+0x80>)
    1fc6:	0092      	lsls	r2, r2, #2
    1fc8:	3101      	adds	r1, #1
    1fca:	0049      	lsls	r1, r1, #1
    1fcc:	58d0      	ldr	r0, [r2, r3]
    1fce:	f000 fd71 	bl	2ab4 <__aeabi_uidiv>
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
		break;
    1fd2:	e7da      	b.n	1f8a <Chip_Clock_GetMainClockRate+0x1a>
    1fd4:	201f      	movs	r0, #31
    1fd6:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <Chip_Clock_GetMainClockRate+0x78>)
    1fd8:	4008      	ands	r0, r1
    1fda:	3001      	adds	r0, #1
    1fdc:	4358      	muls	r0, r3
    1fde:	e7d4      	b.n	1f8a <Chip_Clock_GetMainClockRate+0x1a>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
    1fe0:	2000      	movs	r0, #0
    1fe2:	e7d2      	b.n	1f8a <Chip_Clock_GetMainClockRate+0x1a>
    1fe4:	40048000 	.word	0x40048000
    1fe8:	00b71b00 	.word	0x00b71b00
    1fec:	00002f30 	.word	0x00002f30
    1ff0:	00003a84 	.word	0x00003a84

00001ff4 <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
    1ff4:	2280      	movs	r2, #128	; 0x80
    1ff6:	2340      	movs	r3, #64	; 0x40
    1ff8:	4902      	ldr	r1, [pc, #8]	; (2004 <Chip_GPIO_Init+0x10>)
    1ffa:	5888      	ldr	r0, [r1, r2]
    1ffc:	4303      	orrs	r3, r0
    1ffe:	508b      	str	r3, [r1, r2]
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
    2000:	4770      	bx	lr
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	40048000 	.word	0x40048000

00002008 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
    2008:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
    200a:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
    200c:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
    200e:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
    2010:	6103      	str	r3, [r0, #16]
    2012:	60c3      	str	r3, [r0, #12]

	return 1;
}
    2014:	2001      	movs	r0, #1
    2016:	4770      	bx	lr

00002018 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
    2018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    201a:	68c2      	ldr	r2, [r0, #12]
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    201c:	6903      	ldr	r3, [r0, #16]
	return 1;
}

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
    201e:	000d      	movs	r5, r1
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
    2020:	6841      	ldr	r1, [r0, #4]
    2022:	0004      	movs	r4, r0
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    2024:	1ad3      	subs	r3, r2, r3
		return 0;
    2026:	2000      	movs	r0, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    2028:	428b      	cmp	r3, r1
    202a:	d20e      	bcs.n	204a <RingBuffer_Insert+0x32>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
    202c:	0010      	movs	r0, r2
    202e:	f000 fdc7 	bl	2bc0 <__aeabi_uidivmod>

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
    2032:	68a6      	ldr	r6, [r4, #8]
}

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;
    2034:	6827      	ldr	r7, [r4, #0]
	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
    2036:	4371      	muls	r1, r6
    2038:	0032      	movs	r2, r6
    203a:	1878      	adds	r0, r7, r1
    203c:	0029      	movs	r1, r5
    203e:	f000 fdc5 	bl	2bcc <memcpy>
	RingBuff->head++;

	return 1;
    2042:	2001      	movs	r0, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
    2044:	68e3      	ldr	r3, [r4, #12]
    2046:	3301      	adds	r3, #1
    2048:	60e3      	str	r3, [r4, #12]

	return 1;
}
    204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000204c <RingBuffer_InsertMult>:

/* Insert multiple items into Ring Buffer */
uint32_t RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{
    204c:	b5f0      	push	{r4, r5, r6, r7, lr}
    204e:	4647      	mov	r7, r8
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
    2050:	6903      	ldr	r3, [r0, #16]
    2052:	b480      	push	{r7}
    2054:	000e      	movs	r6, r1
    2056:	0017      	movs	r7, r2
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
    2058:	6841      	ldr	r1, [r0, #4]
    205a:	68c2      	ldr	r2, [r0, #12]
    205c:	0005      	movs	r5, r0
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
    205e:	1ad3      	subs	r3, r2, r3
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
    2060:	4688      	mov	r8, r1
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
    2062:	2000      	movs	r0, #0

	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
    2064:	428b      	cmp	r3, r1
    2066:	d230      	bcs.n	20ca <RingBuffer_InsertMult+0x7e>
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
    2068:	0010      	movs	r0, r2
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of free items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetFree(RINGBUFF_T *RingBuff)
{
	return RingBuff->count - RingBuffer_GetCount(RingBuff);
    206a:	1acc      	subs	r4, r1, r3
    206c:	f000 fda8 	bl	2bc0 <__aeabi_uidivmod>
    2070:	190b      	adds	r3, r1, r4
    2072:	2200      	movs	r2, #0
    2074:	4543      	cmp	r3, r8
    2076:	d303      	bcc.n	2080 <RingBuffer_InsertMult+0x34>
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
    2078:	4643      	mov	r3, r8
    207a:	1a5b      	subs	r3, r3, r1
    207c:	1ae2      	subs	r2, r4, r3
    207e:	001c      	movs	r4, r3

/* Insert multiple items into Ring Buffer */
uint32_t RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{

	uint8_t *ptr = RingBuff->data;
    2080:	6828      	ldr	r0, [r5, #0]
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    2082:	42bc      	cmp	r4, r7
    2084:	dc26      	bgt.n	20d4 <RingBuffer_InsertMult+0x88>
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    2086:	1b3f      	subs	r7, r7, r4
    2088:	4297      	cmp	r7, r2
    208a:	dc21      	bgt.n	20d0 <RingBuffer_InsertMult+0x84>
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
    208c:	68aa      	ldr	r2, [r5, #8]
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
    208e:	4351      	muls	r1, r2
    2090:	4362      	muls	r2, r4
    2092:	1840      	adds	r0, r0, r1
    2094:	0031      	movs	r1, r6
    2096:	f000 fd99 	bl	2bcc <memcpy>
	RingBuff->head += cnt1;
    209a:	68eb      	ldr	r3, [r5, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
    209c:	6869      	ldr	r1, [r5, #4]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
	RingBuff->head += cnt1;
    209e:	18e0      	adds	r0, r4, r3

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
    20a0:	68ab      	ldr	r3, [r5, #8]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
	RingBuff->head += cnt1;
    20a2:	60e8      	str	r0, [r5, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
    20a4:	4698      	mov	r8, r3
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
    20a6:	f000 fd8b 	bl	2bc0 <__aeabi_uidivmod>
    20aa:	4640      	mov	r0, r8
    20ac:	4348      	muls	r0, r1
    20ae:	4641      	mov	r1, r8
    20b0:	682b      	ldr	r3, [r5, #0]
    20b2:	4642      	mov	r2, r8
    20b4:	469c      	mov	ip, r3
    20b6:	4361      	muls	r1, r4
    20b8:	4460      	add	r0, ip
    20ba:	437a      	muls	r2, r7
    20bc:	1871      	adds	r1, r6, r1
    20be:	f000 fd85 	bl	2bcc <memcpy>
	RingBuff->head += cnt2;
    20c2:	68eb      	ldr	r3, [r5, #12]

	return cnt1 + cnt2;
    20c4:	19e0      	adds	r0, r4, r7

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
	RingBuff->head += cnt2;
    20c6:	19db      	adds	r3, r3, r7
    20c8:	60eb      	str	r3, [r5, #12]

	return cnt1 + cnt2;
}
    20ca:	bc04      	pop	{r2}
    20cc:	4690      	mov	r8, r2
    20ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    20d0:	0017      	movs	r7, r2
    20d2:	e7db      	b.n	208c <RingBuffer_InsertMult+0x40>
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    20d4:	003c      	movs	r4, r7
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    20d6:	1b3f      	subs	r7, r7, r4
    20d8:	4297      	cmp	r7, r2
    20da:	ddd7      	ble.n	208c <RingBuffer_InsertMult+0x40>
    20dc:	e7f8      	b.n	20d0 <RingBuffer_InsertMult+0x84>
    20de:	46c0      	nop			; (mov r8, r8)

000020e0 <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
    20e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20e2:	0004      	movs	r4, r0
    20e4:	6903      	ldr	r3, [r0, #16]
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
    20e6:	68e2      	ldr	r2, [r4, #12]
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
    20e8:	000e      	movs	r6, r1
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
    20ea:	2000      	movs	r0, #0
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
    20ec:	429a      	cmp	r2, r3
    20ee:	d00f      	beq.n	2110 <RingBuffer_Pop+0x30>
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
    20f0:	0018      	movs	r0, r3
    20f2:	6861      	ldr	r1, [r4, #4]
    20f4:	f000 fd64 	bl	2bc0 <__aeabi_uidivmod>

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
    20f8:	68a5      	ldr	r5, [r4, #8]
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;
    20fa:	6827      	ldr	r7, [r4, #0]
	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
    20fc:	4369      	muls	r1, r5
    20fe:	002a      	movs	r2, r5
    2100:	1879      	adds	r1, r7, r1
    2102:	0030      	movs	r0, r6
    2104:	f000 fd62 	bl	2bcc <memcpy>
	RingBuff->tail++;
 
	return 1;
    2108:	2001      	movs	r0, #1
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;
    210a:	6923      	ldr	r3, [r4, #16]
    210c:	3301      	adds	r3, #1
    210e:	6123      	str	r3, [r4, #16]
 
	return 1;
}
    2110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2112:	46c0      	nop			; (mov r8, r8)

00002114 <RingBuffer_PopMult>:

/* Pop multiple items from Ring buffer */
uint32_t RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
    2114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2116:	464f      	mov	r7, r9
    2118:	4646      	mov	r6, r8
    211a:	68c4      	ldr	r4, [r0, #12]
    211c:	b4c0      	push	{r6, r7}
    211e:	0007      	movs	r7, r0
    2120:	6900      	ldr	r0, [r0, #16]
    2122:	4688      	mov	r8, r1
    2124:	0015      	movs	r5, r2
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
    2126:	4284      	cmp	r4, r0
    2128:	d03d      	beq.n	21a6 <RingBuffer_PopMult+0x92>
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
    212a:	687e      	ldr	r6, [r7, #4]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
    212c:	1a24      	subs	r4, r4, r0
    212e:	0031      	movs	r1, r6
    2130:	f000 fd46 	bl	2bc0 <__aeabi_uidivmod>
    2134:	190b      	adds	r3, r1, r4
    2136:	2200      	movs	r2, #0
    2138:	429e      	cmp	r6, r3
    213a:	d802      	bhi.n	2142 <RingBuffer_PopMult+0x2e>
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
    213c:	1a76      	subs	r6, r6, r1
    213e:	1ba2      	subs	r2, r4, r6
    2140:	0034      	movs	r4, r6
}

/* Pop multiple items from Ring buffer */
uint32_t RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
	uint8_t *ptr = RingBuff->data;
    2142:	6838      	ldr	r0, [r7, #0]
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    2144:	42ac      	cmp	r4, r5
    2146:	dc29      	bgt.n	219c <RingBuffer_PopMult+0x88>
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    2148:	1b2d      	subs	r5, r5, r4
    214a:	4295      	cmp	r5, r2
    214c:	dc24      	bgt.n	2198 <RingBuffer_PopMult+0x84>
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
    214e:	0022      	movs	r2, r4

	cnt2 = MIN(cnt2, num);
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
    2150:	68bb      	ldr	r3, [r7, #8]
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
    2152:	435a      	muls	r2, r3
    2154:	434b      	muls	r3, r1
    2156:	18c1      	adds	r1, r0, r3
    2158:	4640      	mov	r0, r8
    215a:	f000 fd37 	bl	2bcc <memcpy>
	RingBuff->tail += cnt1;
    215e:	693b      	ldr	r3, [r7, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
    2160:	68be      	ldr	r6, [r7, #8]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
	RingBuff->tail += cnt1;
    2162:	18e0      	adds	r0, r4, r3

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
    2164:	0033      	movs	r3, r6
    2166:	4363      	muls	r3, r4
    2168:	4498      	add	r8, r3
    216a:	002b      	movs	r3, r5
    216c:	4373      	muls	r3, r6
    216e:	6879      	ldr	r1, [r7, #4]
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
	RingBuff->tail += cnt1;
    2170:	6138      	str	r0, [r7, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
    2172:	4699      	mov	r9, r3
    2174:	f000 fd24 	bl	2bc0 <__aeabi_uidivmod>
    2178:	683b      	ldr	r3, [r7, #0]
    217a:	4371      	muls	r1, r6
    217c:	469c      	mov	ip, r3
    217e:	464a      	mov	r2, r9
    2180:	4461      	add	r1, ip
    2182:	4640      	mov	r0, r8
    2184:	f000 fd22 	bl	2bcc <memcpy>
	RingBuff->tail += cnt2;
    2188:	693b      	ldr	r3, [r7, #16]

	return cnt1 + cnt2;
    218a:	1960      	adds	r0, r4, r5

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
	RingBuff->tail += cnt2;
    218c:	195b      	adds	r3, r3, r5
    218e:	613b      	str	r3, [r7, #16]

	return cnt1 + cnt2;
}
    2190:	bc0c      	pop	{r2, r3}
    2192:	4690      	mov	r8, r2
    2194:	4699      	mov	r9, r3
    2196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    2198:	0015      	movs	r5, r2
    219a:	e7d8      	b.n	214e <RingBuffer_PopMult+0x3a>
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
	cnt2 -= cnt1;

	cnt1 = MIN(cnt1, num);
    219c:	002c      	movs	r4, r5
	num -= cnt1;

	cnt2 = MIN(cnt2, num);
    219e:	1b2d      	subs	r5, r5, r4
    21a0:	4295      	cmp	r5, r2
    21a2:	ddd4      	ble.n	214e <RingBuffer_PopMult+0x3a>
    21a4:	e7f8      	b.n	2198 <RingBuffer_PopMult+0x84>
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
    21a6:	2000      	movs	r0, #0
    21a8:	e7f2      	b.n	2190 <RingBuffer_PopMult+0x7c>
    21aa:	46c0      	nop			; (mov r8, r8)

000021ac <Chip_UART_Init>:
    21ac:	2180      	movs	r1, #128	; 0x80
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
    21ae:	b510      	push	{r4, lr}
    21b0:	2480      	movs	r4, #128	; 0x80
    21b2:	4b07      	ldr	r3, [pc, #28]	; (21d0 <Chip_UART_Init+0x24>)
    21b4:	0164      	lsls	r4, r4, #5
    21b6:	585a      	ldr	r2, [r3, r1]
    21b8:	4322      	orrs	r2, r4
    21ba:	505a      	str	r2, [r3, r1]
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
    21bc:	2298      	movs	r2, #152	; 0x98
    21be:	397f      	subs	r1, #127	; 0x7f
    21c0:	5099      	str	r1, [r3, r2]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
    21c2:	2307      	movs	r3, #7
    21c4:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
    21c6:	3b04      	subs	r3, #4
    21c8:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
    21ca:	330d      	adds	r3, #13
    21cc:	6283      	str	r3, [r0, #40]	; 0x28
}
    21ce:	bd10      	pop	{r4, pc}
    21d0:	40048000 	.word	0x40048000

000021d4 <Chip_UART_SendBlocking>:
	return sent;
}

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
    21d4:	b570      	push	{r4, r5, r6, lr}
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
    21d6:	2600      	movs	r6, #0
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
    21d8:	2520      	movs	r5, #32
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
    21da:	2a00      	cmp	r2, #0
    21dc:	dd0d      	ble.n	21fa <Chip_UART_SendBlocking+0x26>
    21de:	2300      	movs	r3, #0
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    21e0:	6944      	ldr	r4, [r0, #20]
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
    21e2:	4225      	tst	r5, r4
    21e4:	d004      	beq.n	21f0 <Chip_UART_SendBlocking+0x1c>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
    21e6:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
    21e8:	3301      	adds	r3, #1
    21ea:	6004      	str	r4, [r0, #0]
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
    21ec:	429a      	cmp	r2, r3
    21ee:	dcf7      	bgt.n	21e0 <Chip_UART_SendBlocking+0xc>
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
		pass = Chip_UART_Send(pUART, p8, numBytes);
		numBytes -= pass;
    21f0:	1ad2      	subs	r2, r2, r3
		sent += pass;
    21f2:	18f6      	adds	r6, r6, r3
		p8 += pass;
    21f4:	18c9      	adds	r1, r1, r3
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
    21f6:	2a00      	cmp	r2, #0
    21f8:	dcf1      	bgt.n	21de <Chip_UART_SendBlocking+0xa>
		sent += pass;
		p8 += pass;
	}

	return sent;
}
    21fa:	0030      	movs	r0, r6
    21fc:	bd70      	pop	{r4, r5, r6, pc}
    21fe:	46c0      	nop			; (mov r8, r8)

00002200 <Chip_UART_TXIntHandlerRB>:
	}
}

/* UART transmit-only interrupt handler for ring buffers */
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
    2200:	b5f0      	push	{r4, r5, r6, r7, lr}
    2202:	b083      	sub	sp, #12
    2204:	466a      	mov	r2, sp
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    2206:	6943      	ldr	r3, [r0, #20]
    2208:	0004      	movs	r4, r0
    220a:	000e      	movs	r6, r1
    220c:	1dd5      	adds	r5, r2, #7
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
    220e:	2720      	movs	r7, #32
    2210:	069b      	lsls	r3, r3, #26
    2212:	d405      	bmi.n	2220 <Chip_UART_TXIntHandlerRB+0x20>
    2214:	e00a      	b.n	222c <Chip_UART_TXIntHandlerRB+0x2c>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
    2216:	782b      	ldrb	r3, [r5, #0]
    2218:	6023      	str	r3, [r4, #0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    221a:	6963      	ldr	r3, [r4, #20]
    221c:	421f      	tst	r7, r3
    221e:	d005      	beq.n	222c <Chip_UART_TXIntHandlerRB+0x2c>
		   RingBuffer_Pop(pRB, &ch)) {
    2220:	0029      	movs	r1, r5
    2222:	0030      	movs	r0, r6
    2224:	f7ff ff5c 	bl	20e0 <RingBuffer_Pop>
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
    2228:	2800      	cmp	r0, #0
    222a:	d1f4      	bne.n	2216 <Chip_UART_TXIntHandlerRB+0x16>
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
	}
}
    222c:	b003      	add	sp, #12
    222e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002230 <Chip_UART_SendRB>:

/* Populate a transmit ring buffer and start UART transmit */
uint32_t Chip_UART_SendRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, const void *data, int bytes)
{
    2230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2232:	464f      	mov	r7, r9
    2234:	4646      	mov	r6, r8
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
    2236:	2502      	movs	r5, #2
    2238:	b4c0      	push	{r6, r7}
    223a:	4689      	mov	r9, r1
    223c:	0016      	movs	r6, r2
    223e:	001f      	movs	r7, r3
    2240:	6843      	ldr	r3, [r0, #4]
    2242:	0004      	movs	r4, r0
    2244:	43ab      	bics	r3, r5

	/* Don't let UART transmit ring buffer change in the UART IRQ handler */
	Chip_UART_IntDisable(pUART, UART_IER_THREINT);

	/* Move as much data as possible into transmit ring buffer */
	ret = RingBuffer_InsertMult(pRB, p8, bytes);
    2246:	003a      	movs	r2, r7
    2248:	6043      	str	r3, [r0, #4]
    224a:	0031      	movs	r1, r6
    224c:	4648      	mov	r0, r9
    224e:	f7ff fefd 	bl	204c <RingBuffer_InsertMult>
    2252:	4680      	mov	r8, r0
	Chip_UART_TXIntHandlerRB(pUART, pRB);
    2254:	4649      	mov	r1, r9
    2256:	0020      	movs	r0, r4
    2258:	f7ff ffd2 	bl	2200 <Chip_UART_TXIntHandlerRB>

	/* Add additional data to transmit ring buffer if possible */
	ret += RingBuffer_InsertMult(pRB, (p8 + ret), (bytes - ret));
    225c:	4643      	mov	r3, r8
    225e:	0031      	movs	r1, r6
    2260:	1afa      	subs	r2, r7, r3
    2262:	4441      	add	r1, r8
    2264:	4648      	mov	r0, r9
    2266:	f7ff fef1 	bl	204c <RingBuffer_InsertMult>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
    226a:	6863      	ldr	r3, [r4, #4]

	/* Enable UART transmit interrupt */
	Chip_UART_IntEnable(pUART, UART_IER_THREINT);

	return ret;
    226c:	4440      	add	r0, r8
    226e:	431d      	orrs	r5, r3
    2270:	6065      	str	r5, [r4, #4]
}
    2272:	bc0c      	pop	{r2, r3}
    2274:	4690      	mov	r8, r2
    2276:	4699      	mov	r9, r3
    2278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    227a:	46c0      	nop			; (mov r8, r8)

0000227c <Chip_UART_ReadRB>:

/* Copy data from a receive ring buffer */
int Chip_UART_ReadRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, void *data, int bytes)
{
    227c:	b510      	push	{r4, lr}
    227e:	0008      	movs	r0, r1
    2280:	0011      	movs	r1, r2
	(void) pUART;

	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
    2282:	001a      	movs	r2, r3
    2284:	f7ff ff46 	bl	2114 <RingBuffer_PopMult>
}
    2288:	bd10      	pop	{r4, pc}
    228a:	46c0      	nop			; (mov r8, r8)

0000228c <Chip_UART_IRQRBHandler>:

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
    228c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
    228e:	2502      	movs	r5, #2
    2290:	6843      	ldr	r3, [r0, #4]
	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
}

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
    2292:	b083      	sub	sp, #12
    2294:	0004      	movs	r4, r0
    2296:	000f      	movs	r7, r1
    2298:	0016      	movs	r6, r2
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
    229a:	421d      	tst	r5, r3
    229c:	d110      	bne.n	22c0 <Chip_UART_IRQRBHandler+0x34>
    229e:	466a      	mov	r2, sp
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    22a0:	6963      	ldr	r3, [r4, #20]
    22a2:	1dd5      	adds	r5, r2, #7

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
    22a4:	2601      	movs	r6, #1
    22a6:	07db      	lsls	r3, r3, #31
    22a8:	d508      	bpl.n	22bc <Chip_UART_IRQRBHandler+0x30>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
    22aa:	6823      	ldr	r3, [r4, #0]
		uint8_t ch = Chip_UART_ReadByte(pUART);
		RingBuffer_Insert(pRB, &ch);
    22ac:	0029      	movs	r1, r5
    22ae:	0038      	movs	r0, r7
/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
		uint8_t ch = Chip_UART_ReadByte(pUART);
    22b0:	702b      	strb	r3, [r5, #0]
		RingBuffer_Insert(pRB, &ch);
    22b2:	f7ff feb1 	bl	2018 <RingBuffer_Insert>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
    22b6:	6963      	ldr	r3, [r4, #20]

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
    22b8:	421e      	tst	r6, r3
    22ba:	d1f6      	bne.n	22aa <Chip_UART_IRQRBHandler+0x1e>
		}
	}

	/* Handle receive interrupt */
	Chip_UART_RXIntHandlerRB(pUART, pRXRB);
}
    22bc:	b003      	add	sp, #12
    22be:	bdf0      	pop	{r4, r5, r6, r7, pc}
/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
		Chip_UART_TXIntHandlerRB(pUART, pTXRB);
    22c0:	0011      	movs	r1, r2
    22c2:	f7ff ff9d 	bl	2200 <Chip_UART_TXIntHandlerRB>

		/* Disable transmit interrupt if the ring buffer is empty */
		if (RingBuffer_IsEmpty(pTXRB)) {
    22c6:	68f2      	ldr	r2, [r6, #12]
    22c8:	6933      	ldr	r3, [r6, #16]
    22ca:	429a      	cmp	r2, r3
    22cc:	d1e7      	bne.n	229e <Chip_UART_IRQRBHandler+0x12>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
    22ce:	6863      	ldr	r3, [r4, #4]
    22d0:	43ab      	bics	r3, r5
    22d2:	6063      	str	r3, [r4, #4]
    22d4:	e7e3      	b.n	229e <Chip_UART_IRQRBHandler+0x12>
    22d6:	46c0      	nop			; (mov r8, r8)

000022d8 <Chip_UART_SetBaudFDR>:
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baudrate)

{
    22d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22da:	464f      	mov	r7, r9
    22dc:	4646      	mov	r6, r8
    22de:	b4c0      	push	{r6, r7}
	uint32_t uClk;
    uint32_t dval;
    uint32_t mval = 0;
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
    22e0:	010d      	lsls	r5, r1, #4
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baudrate)

{
    22e2:	0004      	movs	r4, r0
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
	uint32_t actualRate = 0;

	/* Get Clock rate */
	uClk = Chip_Clock_GetMainClockRate();
    22e4:	f7ff fe44 	bl	1f70 <Chip_Clock_GetMainClockRate>

    /* The fractional is calculated as (PCLK  % (16 * Baudrate)) / (16 * Baudrate)
     * Let's make it to be the ratio DivVal / MulVal
     */
	dval = uClk % rate16;
    22e8:	0029      	movs	r1, r5
    uint32_t dl;
    uint32_t rate16 = 16 * baudrate;
	uint32_t actualRate = 0;

	/* Get Clock rate */
	uClk = Chip_Clock_GetMainClockRate();
    22ea:	0007      	movs	r7, r0

    /* The fractional is calculated as (PCLK  % (16 * Baudrate)) / (16 * Baudrate)
     * Let's make it to be the ratio DivVal / MulVal
     */
	dval = uClk % rate16;
    22ec:	f000 fc68 	bl	2bc0 <__aeabi_uidivmod>
    * now mormalize the ratio
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
    22f0:	2900      	cmp	r1, #0
    22f2:	d036      	beq.n	2362 <Chip_UART_SetBaudFDR+0x8a>
        mval = rate16 / dval;
    22f4:	0028      	movs	r0, r5
    22f6:	f000 fbdd 	bl	2ab4 <__aeabi_uidiv>
        dval = 1;
    22fa:	220c      	movs	r2, #12
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
        mval = rate16 / dval;
    22fc:	0003      	movs	r3, r0
        dval = 1;
    22fe:	2000      	movs	r0, #0
    2300:	429a      	cmp	r2, r3
    2302:	4140      	adcs	r0, r0
    2304:	260f      	movs	r6, #15
    2306:	0002      	movs	r2, r0
    2308:	401e      	ands	r6, r3
    230a:	0133      	lsls	r3, r6, #4
    230c:	431a      	orrs	r2, r3
    230e:	4681      	mov	r9, r0
    2310:	0031      	movs	r1, r6
    2312:	4368      	muls	r0, r5
    2314:	4690      	mov	r8, r2
    2316:	f000 fbcd 	bl	2ab4 <__aeabi_uidiv>
    231a:	1941      	adds	r1, r0, r5
    231c:	0038      	movs	r0, r7
    231e:	f000 fbc9 	bl	2ab4 <__aeabi_uidiv>
    2322:	464b      	mov	r3, r9
    2324:	0005      	movs	r5, r0
    2326:	0118      	lsls	r0, r3, #4
    2328:	4368      	muls	r0, r5
    232a:	0031      	movs	r1, r6
    232c:	f000 fbc2 	bl	2ab4 <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
    2330:	2280      	movs	r2, #128	; 0x80
    2332:	21ff      	movs	r1, #255	; 0xff
    2334:	68e3      	ldr	r3, [r4, #12]
    2336:	4313      	orrs	r3, r2
    2338:	60e3      	str	r3, [r4, #12]
    233a:	000b      	movs	r3, r1
    233c:	402b      	ands	r3, r5
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
    233e:	6023      	str	r3, [r4, #0]
    2340:	0a2b      	lsrs	r3, r5, #8
    2342:	400b      	ands	r3, r1
	pUART->DLM = (uint32_t) dlm;
    2344:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
    2346:	68e3      	ldr	r3, [r4, #12]
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
    2348:	0129      	lsls	r1, r5, #4
    234a:	4393      	bics	r3, r2
    234c:	60e3      	str	r3, [r4, #12]
    Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(dl), UART_LOAD_DLM(dl));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));
    234e:	4643      	mov	r3, r8

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
    2350:	1809      	adds	r1, r1, r0
    Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(dl), UART_LOAD_DLM(dl));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(mval) | UART_FDR_DIVADDVAL(dval));
    2352:	62a3      	str	r3, [r4, #40]	; 0x28

	/* Return actual baud rate */
	actualRate = uClk / (16 * dl + 16 * dl * dval / mval);
	return actualRate;
    2354:	0038      	movs	r0, r7
    2356:	f000 fbad 	bl	2ab4 <__aeabi_uidiv>
}
    235a:	bc0c      	pop	{r2, r3}
    235c:	4690      	mov	r8, r2
    235e:	4699      	mov	r9, r3
    2360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2362:	0029      	movs	r1, r5
    2364:	0038      	movs	r0, r7
    2366:	f000 fba5 	bl	2ab4 <__aeabi_uidiv>
    * now mormalize the ratio
    * dval / mval = 1 / new_mval
    * new_mval = mval / dval
    * new_dval = 1
    */
    if (dval > 0) {
    236a:	2300      	movs	r3, #0
    236c:	0005      	movs	r5, r0
    236e:	4698      	mov	r8, r3
    2370:	2000      	movs	r0, #0
    2372:	e7dd      	b.n	2330 <Chip_UART_SetBaudFDR+0x58>

00002374 <CAN_error>:
}

/*	CAN error callback */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
    2374:	2201      	movs	r2, #1
	}
}

/*	CAN error callback */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
    2376:	4b02      	ldr	r3, [pc, #8]	; (2380 <CAN_error+0xc>)
    2378:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
    237a:	4b02      	ldr	r3, [pc, #8]	; (2384 <CAN_error+0x10>)
    237c:	701a      	strb	r2, [r3, #0]
}
    237e:	4770      	bx	lr
    2380:	10000720 	.word	0x10000720
    2384:	10000727 	.word	0x10000727

00002388 <CAN_rx>:
/*************************************************
 *                  CALLBACKS
 * ************************************************/

/*	CAN receive callback */
void CAN_rx(uint8_t msg_obj_num) {
    2388:	b510      	push	{r4, lr}
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
    238a:	4c0b      	ldr	r4, [pc, #44]	; (23b8 <CAN_rx+0x30>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
    238c:	4b0b      	ldr	r3, [pc, #44]	; (23bc <CAN_rx+0x34>)
 * ************************************************/

/*	CAN receive callback */
void CAN_rx(uint8_t msg_obj_num) {
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
    238e:	7460      	strb	r0, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
    2390:	681b      	ldr	r3, [r3, #0]
    2392:	0020      	movs	r0, r4
    2394:	689b      	ldr	r3, [r3, #8]
    2396:	68db      	ldr	r3, [r3, #12]
    2398:	4798      	blx	r3
	if (!RingBuffer_Insert(&rx_buffer, &msg_obj)) {
    239a:	0021      	movs	r1, r4
    239c:	4808      	ldr	r0, [pc, #32]	; (23c0 <CAN_rx+0x38>)
    239e:	f7ff fe3b 	bl	2018 <RingBuffer_Insert>
    23a2:	2800      	cmp	r0, #0
    23a4:	d106      	bne.n	23b4 <CAN_rx+0x2c>
		can_error_flag = true;
    23a6:	2201      	movs	r2, #1
    23a8:	4b06      	ldr	r3, [pc, #24]	; (23c4 <CAN_rx+0x3c>)
    23aa:	701a      	strb	r2, [r3, #0]
		can_error_info = 0x800;
    23ac:	2280      	movs	r2, #128	; 0x80
    23ae:	4b06      	ldr	r3, [pc, #24]	; (23c8 <CAN_rx+0x40>)
    23b0:	0112      	lsls	r2, r2, #4
    23b2:	601a      	str	r2, [r3, #0]
	}
}
    23b4:	bd10      	pop	{r4, pc}
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	10000a78 	.word	0x10000a78
    23bc:	1fff1ff8 	.word	0x1fff1ff8
    23c0:	1000070c 	.word	0x1000070c
    23c4:	10000727 	.word	0x10000727
    23c8:	10000720 	.word	0x10000720

000023cc <CAN_tx>:

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
    23cc:	b570      	push	{r4, r5, r6, lr}
    23ce:	0004      	movs	r4, r0
	if (msg_obj_num <= NUM_MSG_OBJS) {
    23d0:	2802      	cmp	r0, #2
    23d2:	d907      	bls.n	23e4 <CAN_tx+0x18>
			tmp_msg_obj_2.msgobj = msg_obj_num;
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
			msg_obj_stat[msg_obj_num] = true;
		}
	} else {
		can_error_flag = true;
    23d4:	2201      	movs	r2, #1
    23d6:	4b0d      	ldr	r3, [pc, #52]	; (240c <CAN_tx+0x40>)
    23d8:	701a      	strb	r2, [r3, #0]
		can_error_info = 0x400;
    23da:	2280      	movs	r2, #128	; 0x80
    23dc:	4b0c      	ldr	r3, [pc, #48]	; (2410 <CAN_tx+0x44>)
    23de:	00d2      	lsls	r2, r2, #3
    23e0:	601a      	str	r2, [r3, #0]
	}
}
    23e2:	bd70      	pop	{r4, r5, r6, pc}
}

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;
    23e4:	2300      	movs	r3, #0
    23e6:	4e0b      	ldr	r6, [pc, #44]	; (2414 <CAN_tx+0x48>)

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
    23e8:	4d0b      	ldr	r5, [pc, #44]	; (2418 <CAN_tx+0x4c>)
}

/*	CAN transmit callback */
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;
    23ea:	5433      	strb	r3, [r6, r0]

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
    23ec:	0029      	movs	r1, r5
    23ee:	480b      	ldr	r0, [pc, #44]	; (241c <CAN_tx+0x50>)
    23f0:	f7ff fe76 	bl	20e0 <RingBuffer_Pop>
    23f4:	2800      	cmp	r0, #0
    23f6:	d0f4      	beq.n	23e2 <CAN_tx+0x16>
			tmp_msg_obj_2.msgobj = msg_obj_num;
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
    23f8:	4b09      	ldr	r3, [pc, #36]	; (2420 <CAN_tx+0x54>)
void CAN_tx(uint8_t msg_obj_num) {
	if (msg_obj_num <= NUM_MSG_OBJS) {
		msg_obj_stat[msg_obj_num] = false;

		if (RingBuffer_Pop(&tx_buffer, &tmp_msg_obj_2)){
			tmp_msg_obj_2.msgobj = msg_obj_num;
    23fa:	746c      	strb	r4, [r5, #17]
			LPC_CCAN_API->can_transmit(&tmp_msg_obj_2);
    23fc:	681b      	ldr	r3, [r3, #0]
    23fe:	0028      	movs	r0, r5
    2400:	689b      	ldr	r3, [r3, #8]
    2402:	691b      	ldr	r3, [r3, #16]
    2404:	4798      	blx	r3
			msg_obj_stat[msg_obj_num] = true;
    2406:	2301      	movs	r3, #1
    2408:	5533      	strb	r3, [r6, r4]
    240a:	e7ea      	b.n	23e2 <CAN_tx+0x16>
    240c:	10000727 	.word	0x10000727
    2410:	10000720 	.word	0x10000720
    2414:	10000724 	.word	0x10000724
    2418:	10000a60 	.word	0x10000a60
    241c:	100006f8 	.word	0x100006f8
    2420:	1fff1ff8 	.word	0x1fff1ff8

00002424 <Baudrate_Calculate>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
    2424:	2280      	movs	r2, #128	; 0x80
/*************************************************
 *                  HELPERS
 * ************************************************/

// TODO EXPLAIN WHAT THIS DOES AND SIMPLIFY
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
    2426:	b5f0      	push	{r4, r5, r6, r7, lr}
    2428:	0005      	movs	r5, r0
    242a:	2080      	movs	r0, #128	; 0x80
    242c:	4647      	mov	r7, r8
    242e:	000c      	movs	r4, r1
    2430:	4920      	ldr	r1, [pc, #128]	; (24b4 <Baudrate_Calculate+0x90>)
    2432:	0280      	lsls	r0, r0, #10
    2434:	588b      	ldr	r3, [r1, r2]
    2436:	b480      	push	{r7}
    2438:	4303      	orrs	r3, r0
    243a:	508b      	str	r3, [r1, r2]
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
    243c:	f7ff fd98 	bl	1f70 <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baud_rate;
    2440:	0029      	movs	r1, r5
    2442:	f000 fb37 	bl	2ab4 <__aeabi_uidiv>

	for (div = 0; div <= 15; div++) {
    2446:	2300      	movs	r3, #0
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;
    2448:	2703      	movs	r7, #3

	for (div = 0; div <= 15; div++) {
    244a:	4698      	mov	r8, r3
    244c:	2301      	movs	r3, #1
    244e:	4443      	add	r3, r8
    2450:	469c      	mov	ip, r3
/*************************************************
 *                  HELPERS
 * ************************************************/

// TODO EXPLAIN WHAT THIS DOES AND SIMPLIFY
void Baudrate_Calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg) {
    2452:	003e      	movs	r6, r7
    2454:	0019      	movs	r1, r3
    2456:	2501      	movs	r5, #1
    2458:	0032      	movs	r2, r6
    245a:	2303      	movs	r3, #3
	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
    245c:	4290      	cmp	r0, r2
    245e:	d00e      	beq.n	247e <Baudrate_Calculate+0x5a>

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
    2460:	3301      	adds	r3, #1
    2462:	1852      	adds	r2, r2, r1
    2464:	2b12      	cmp	r3, #18
    2466:	d1f9      	bne.n	245c <Baudrate_Calculate+0x38>
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
    2468:	3501      	adds	r5, #1
    246a:	4461      	add	r1, ip
    246c:	19f6      	adds	r6, r6, r7
    246e:	2d21      	cmp	r5, #33	; 0x21
    2470:	d1f2      	bne.n	2458 <Baudrate_Calculate+0x34>
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
    2472:	4663      	mov	r3, ip
    2474:	3703      	adds	r7, #3
    2476:	2b10      	cmp	r3, #16
    2478:	d017      	beq.n	24aa <Baudrate_Calculate+0x86>
    247a:	46e0      	mov	r8, ip
    247c:	e7e6      	b.n	244c <Baudrate_Calculate+0x28>
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
    247e:	4642      	mov	r2, r8

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
    2480:	3b03      	subs	r3, #3
					seg1 = segs / 2;
    2482:	0858      	lsrs	r0, r3, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
    2484:	6022      	str	r2, [r4, #0]
					can_api_timing_cfg[1] =
    2486:	0002      	movs	r2, r0
    2488:	2803      	cmp	r0, #3
    248a:	d811      	bhi.n	24b0 <Baudrate_Calculate+0x8c>
    248c:	21f0      	movs	r1, #240	; 0xf0
    248e:	0196      	lsls	r6, r2, #6
    2490:	0109      	lsls	r1, r1, #4
    2492:	0202      	lsls	r2, r0, #8
    2494:	400a      	ands	r2, r1
    2496:	4332      	orrs	r2, r6
    2498:	3d01      	subs	r5, #1
    249a:	4315      	orrs	r5, r2
    249c:	22e0      	movs	r2, #224	; 0xe0
    249e:	1a1b      	subs	r3, r3, r0
    24a0:	031b      	lsls	r3, r3, #12
    24a2:	01d2      	lsls	r2, r2, #7
    24a4:	4013      	ands	r3, r2
    24a6:	431d      	orrs	r5, r3
    24a8:	6065      	str	r5, [r4, #4]
					return;
				}
			}
		}
	}
}
    24aa:	bc04      	pop	{r2}
    24ac:	4690      	mov	r8, r2
    24ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
    24b0:	2203      	movs	r2, #3
    24b2:	e7eb      	b.n	248c <Baudrate_Calculate+0x68>
    24b4:	40048000 	.word	0x40048000

000024b8 <CAN_ResetPeripheral>:
}

// TODO SAVE CURRENT IN FLIGHT MESSAGE SO THAT ON RESET ANY IN FLIGHT MESSAGES CAN BE RE-SENT

bool CAN_ResetPeripheral(void) {
	if(LPC_CCAN->CANSTAT>>7&0x01) {
    24b8:	4b07      	ldr	r3, [pc, #28]	; (24d8 <CAN_ResetPeripheral+0x20>)
    	Chip_SYSCTL_PeriphReset(RESET_CAN0);
    	return true;
    }
   return false;
    24ba:	2000      	movs	r0, #0
}

// TODO SAVE CURRENT IN FLIGHT MESSAGE SO THAT ON RESET ANY IN FLIGHT MESSAGES CAN BE RE-SENT

bool CAN_ResetPeripheral(void) {
	if(LPC_CCAN->CANSTAT>>7&0x01) {
    24bc:	685b      	ldr	r3, [r3, #4]
    24be:	061b      	lsls	r3, r3, #24
    24c0:	d508      	bpl.n	24d4 <CAN_ResetPeripheral+0x1c>
 * @note	The peripheral will stay in reset until reset is de-asserted. Call
 * Chip_SYSCTL_DeassertPeriphReset() to de-assert the reset.
 */
STATIC INLINE void Chip_SYSCTL_AssertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL &= ~(1 << (uint32_t) periph);
    24c2:	2208      	movs	r2, #8
    24c4:	4b05      	ldr	r3, [pc, #20]	; (24dc <CAN_ResetPeripheral+0x24>)
    	Chip_SYSCTL_PeriphReset(RESET_CAN0);
    	return true;
    24c6:	3001      	adds	r0, #1
    24c8:	6859      	ldr	r1, [r3, #4]
    24ca:	4391      	bics	r1, r2
    24cc:	6059      	str	r1, [r3, #4]
 * @param	periph	: Peripheral to de-assert reset for
 * @return	Nothing
 */
STATIC INLINE void Chip_SYSCTL_DeassertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL |= (1 << (uint32_t) periph);
    24ce:	6859      	ldr	r1, [r3, #4]
    24d0:	430a      	orrs	r2, r1
    24d2:	605a      	str	r2, [r3, #4]
    }
   return false;
}
    24d4:	4770      	bx	lr
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	40050000 	.word	0x40050000
    24dc:	40048000 	.word	0x40048000

000024e0 <Convert_To_CAN_Error>:

CAN_ERROR_T Convert_To_CAN_Error(uint32_t can_error) {
    24e0:	0002      	movs	r2, r0
	if (!can_error) return NO_CAN_ERROR;
    24e2:	2000      	movs	r0, #0
    24e4:	2a00      	cmp	r2, #0
    24e6:	d00f      	beq.n	2508 <Convert_To_CAN_Error+0x28>
    switch(can_error & 0x6) {
    24e8:	2306      	movs	r3, #6
    24ea:	490f      	ldr	r1, [pc, #60]	; (2528 <Convert_To_CAN_Error+0x48>)
    24ec:	4013      	ands	r3, r2
    24ee:	009b      	lsls	r3, r3, #2
    24f0:	58cb      	ldr	r3, [r1, r3]
    24f2:	469f      	mov	pc, r3
       case 0x4: return BIT1_CAN_ERROR;
       case 0x5: return BIT0_CAN_ERROR;
       case 0x6: return CRC_CAN_ERROR;
       case 0x7: return UNUSED_CAN_ERROR;
    }
    if (can_error == 0x400) return UNRECOGNIZED_MSGOBJ_CAN_ERROR;
    24f4:	2380      	movs	r3, #128	; 0x80
    24f6:	200c      	movs	r0, #12
    24f8:	00db      	lsls	r3, r3, #3
    24fa:	429a      	cmp	r2, r3
    24fc:	d004      	beq.n	2508 <Convert_To_CAN_Error+0x28>
    if (can_error == 0x800) return RX_BUFFER_FULL_CAN_ERROR;
    24fe:	2380      	movs	r3, #128	; 0x80
    2500:	011b      	lsls	r3, r3, #4
    2502:	429a      	cmp	r2, r3
    2504:	d00d      	beq.n	2522 <Convert_To_CAN_Error+0x42>
    return UNRECOGNIZED_ERROR_CODE;
    2506:	3001      	adds	r0, #1
}
    2508:	4770      	bx	lr
}

CAN_ERROR_T Convert_To_CAN_Error(uint32_t can_error) {
	if (!can_error) return NO_CAN_ERROR;
    switch(can_error & 0x6) {
       case 0x1: return STUF_CAN_ERROR;
    250a:	2005      	movs	r0, #5
    250c:	e7fc      	b.n	2508 <Convert_To_CAN_Error+0x28>
       case 0x2: return FORM_CAN_ERROR;
    250e:	2006      	movs	r0, #6
    2510:	e7fa      	b.n	2508 <Convert_To_CAN_Error+0x28>
       case 0x3: return ACK_CAN_ERROR;
    2512:	2007      	movs	r0, #7
    2514:	e7f8      	b.n	2508 <Convert_To_CAN_Error+0x28>
       case 0x4: return BIT1_CAN_ERROR;
    2516:	2008      	movs	r0, #8
    2518:	e7f6      	b.n	2508 <Convert_To_CAN_Error+0x28>
       case 0x5: return BIT0_CAN_ERROR;
    251a:	2009      	movs	r0, #9
    251c:	e7f4      	b.n	2508 <Convert_To_CAN_Error+0x28>
       case 0x6: return CRC_CAN_ERROR;
    251e:	200a      	movs	r0, #10
    2520:	e7f2      	b.n	2508 <Convert_To_CAN_Error+0x28>
       case 0x7: return UNUSED_CAN_ERROR;
    }
    if (can_error == 0x400) return UNRECOGNIZED_MSGOBJ_CAN_ERROR;
    if (can_error == 0x800) return RX_BUFFER_FULL_CAN_ERROR;
    2522:	200f      	movs	r0, #15
    2524:	e7f0      	b.n	2508 <Convert_To_CAN_Error+0x28>
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	00003ac4 	.word	0x00003ac4

0000252c <CAN_IRQHandler>:
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
    252c:	4b03      	ldr	r3, [pc, #12]	; (253c <CAN_IRQHandler+0x10>)
 * @brief	CCAN Interrupt Handler
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
    252e:	b510      	push	{r4, lr}
	LPC_CCAN_API->isr();
    2530:	681b      	ldr	r3, [r3, #0]
    2532:	689b      	ldr	r3, [r3, #8]
    2534:	685b      	ldr	r3, [r3, #4]
    2536:	4798      	blx	r3
}
    2538:	bd10      	pop	{r4, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	1fff1ff8 	.word	0x1fff1ff8

00002540 <CAN_SetMask1>:
	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
    2540:	231b      	movs	r3, #27

	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
    2542:	b570      	push	{r4, r5, r6, lr}
	msg_obj.msgobj = 27;
    2544:	4c0c      	ldr	r4, [pc, #48]	; (2578 <CAN_SetMask1+0x38>)
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    2546:	4d0d      	ldr	r5, [pc, #52]	; (257c <CAN_SetMask1+0x3c>)
	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
    2548:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    254a:	682b      	ldr	r3, [r5, #0]
}

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
	msg_obj.mode_id = mode_id;
    254c:	6021      	str	r1, [r4, #0]
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    254e:	689b      	ldr	r3, [r3, #8]

// ANDs the mask with the input ID and checks if == to mode_id
void CAN_SetMask1(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 27;
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
    2550:	6060      	str	r0, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    2552:	689b      	ldr	r3, [r3, #8]
    2554:	0020      	movs	r0, r4
    2556:	4798      	blx	r3
	msg_obj.msgobj = 28;
    2558:	231c      	movs	r3, #28
    255a:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    255c:	682b      	ldr	r3, [r5, #0]
    255e:	0020      	movs	r0, r4
    2560:	689b      	ldr	r3, [r3, #8]
    2562:	689b      	ldr	r3, [r3, #8]
    2564:	4798      	blx	r3
	msg_obj.msgobj = 29;
    2566:	231d      	movs	r3, #29
    2568:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    256a:	682b      	ldr	r3, [r5, #0]
    256c:	0020      	movs	r0, r4
    256e:	689b      	ldr	r3, [r3, #8]
    2570:	689b      	ldr	r3, [r3, #8]
    2572:	4798      	blx	r3
}
    2574:	bd70      	pop	{r4, r5, r6, pc}
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	10000a78 	.word	0x10000a78
    257c:	1fff1ff8 	.word	0x1fff1ff8

00002580 <CAN_SetMask2>:

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
    2580:	231e      	movs	r3, #30
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
	msg_obj.msgobj = 29;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
    2582:	b570      	push	{r4, r5, r6, lr}
	msg_obj.msgobj = 30;
    2584:	4c08      	ldr	r4, [pc, #32]	; (25a8 <CAN_SetMask2+0x28>)
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    2586:	4d09      	ldr	r5, [pc, #36]	; (25ac <CAN_SetMask2+0x2c>)
	msg_obj.msgobj = 29;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
    2588:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    258a:	682b      	ldr	r3, [r5, #0]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
	msg_obj.mode_id = mode_id;
    258c:	6021      	str	r1, [r4, #0]
	msg_obj.mask = mask; 
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    258e:	689b      	ldr	r3, [r3, #8]
}

void CAN_SetMask2(uint32_t mask, uint32_t mode_id) {
	msg_obj.msgobj = 30;
	msg_obj.mode_id = mode_id;
	msg_obj.mask = mask; 
    2590:	6060      	str	r0, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    2592:	689b      	ldr	r3, [r3, #8]
    2594:	0020      	movs	r0, r4
    2596:	4798      	blx	r3
	msg_obj.msgobj = 31;
    2598:	231f      	movs	r3, #31
    259a:	7463      	strb	r3, [r4, #17]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
    259c:	682b      	ldr	r3, [r5, #0]
    259e:	0020      	movs	r0, r4
    25a0:	689b      	ldr	r3, [r3, #8]
    25a2:	689b      	ldr	r3, [r3, #8]
    25a4:	4798      	blx	r3
}
    25a6:	bd70      	pop	{r4, r5, r6, pc}
    25a8:	10000a78 	.word	0x10000a78
    25ac:	1fff1ff8 	.word	0x1fff1ff8

000025b0 <CAN_Init>:
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
}

void CAN_Init(uint32_t baud_rate) {
    25b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
    25b2:	2400      	movs	r4, #0

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
    25b4:	4d20      	ldr	r5, [pc, #128]	; (2638 <CAN_Init+0x88>)
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
}

void CAN_Init(uint32_t baud_rate) {
    25b6:	b08b      	sub	sp, #44	; 0x2c
    25b8:	0006      	movs	r6, r0

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
    25ba:	2310      	movs	r3, #16
    25bc:	2218      	movs	r2, #24
    25be:	491f      	ldr	r1, [pc, #124]	; (263c <CAN_Init+0x8c>)
    25c0:	0028      	movs	r0, r5
    25c2:	f7ff fd21 	bl	2008 <RingBuffer_Init>
    25c6:	612c      	str	r4, [r5, #16]
    25c8:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&rx_buffer);

	RingBuffer_Init(&tx_buffer, _tx_buffer, sizeof(CCAN_MSG_OBJ_T), CAN_BUF_SIZE);
    25ca:	4d1d      	ldr	r5, [pc, #116]	; (2640 <CAN_Init+0x90>)
    25cc:	491d      	ldr	r1, [pc, #116]	; (2644 <CAN_Init+0x94>)
    25ce:	2310      	movs	r3, #16
    25d0:	2218      	movs	r2, #24
    25d2:	0028      	movs	r0, r5
    25d4:	f7ff fd18 	bl	2008 <RingBuffer_Init>
    25d8:	612c      	str	r4, [r5, #16]
    25da:	60ec      	str	r4, [r5, #12]
	RingBuffer_Flush(&tx_buffer);

	uint32_t CanApiClkInitTable[2];
	CCAN_CALLBACKS_T callbacks = {
    25dc:	ad02      	add	r5, sp, #8
    25de:	002a      	movs	r2, r5
    25e0:	4b19      	ldr	r3, [pc, #100]	; (2648 <CAN_Init+0x98>)
    25e2:	cb83      	ldmia	r3!, {r0, r1, r7}
    25e4:	c283      	stmia	r2!, {r0, r1, r7}
    25e6:	cb83      	ldmia	r3!, {r0, r1, r7}
    25e8:	c283      	stmia	r2!, {r0, r1, r7}
    25ea:	cb03      	ldmia	r3!, {r0, r1}
    25ec:	c203      	stmia	r2!, {r0, r1}
		NULL,
		NULL,
		NULL,
		NULL,
	};
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
    25ee:	0030      	movs	r0, r6

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
    25f0:	4e16      	ldr	r6, [pc, #88]	; (264c <CAN_Init+0x9c>)
		NULL,
		NULL,
		NULL,
		NULL,
	};
	Baudrate_Calculate(baud_rate, CanApiClkInitTable);
    25f2:	4669      	mov	r1, sp
    25f4:	f7ff ff16 	bl	2424 <Baudrate_Calculate>

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
    25f8:	6833      	ldr	r3, [r6, #0]
    25fa:	2101      	movs	r1, #1
    25fc:	689b      	ldr	r3, [r3, #8]
    25fe:	4668      	mov	r0, sp
    2600:	681b      	ldr	r3, [r3, #0]
    2602:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
    2604:	6833      	ldr	r3, [r6, #0]
    2606:	0028      	movs	r0, r5
    2608:	689b      	ldr	r3, [r3, #8]
    260a:	69db      	ldr	r3, [r3, #28]
    260c:	4798      	blx	r3
    260e:	2280      	movs	r2, #128	; 0x80
    2610:	4b0f      	ldr	r3, [pc, #60]	; (2650 <CAN_Init+0xa0>)
    2612:	0192      	lsls	r2, r2, #6
    2614:	601a      	str	r2, [r3, #0]
	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);

	/* Configure message objects to accept all messages */
	CAN_SetMask1(0, 0);
    2616:	2100      	movs	r1, #0
    2618:	2000      	movs	r0, #0
    261a:	f7ff ff91 	bl	2540 <CAN_SetMask1>
	CAN_SetMask2(0, 0);
    261e:	2100      	movs	r1, #0
    2620:	2000      	movs	r0, #0
    2622:	f7ff ffad 	bl	2580 <CAN_SetMask2>

	can_error_flag = false;
    2626:	4b0b      	ldr	r3, [pc, #44]	; (2654 <CAN_Init+0xa4>)
    2628:	701c      	strb	r4, [r3, #0]
	can_error_info = 0;
    262a:	4b0b      	ldr	r3, [pc, #44]	; (2658 <CAN_Init+0xa8>)
    262c:	601c      	str	r4, [r3, #0]

	memset(msg_obj_stat, 0, sizeof(bool)*NUM_MSG_OBJS);
    262e:	4b0b      	ldr	r3, [pc, #44]	; (265c <CAN_Init+0xac>)
    2630:	801c      	strh	r4, [r3, #0]
}
    2632:	b00b      	add	sp, #44	; 0x2c
    2634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	1000070c 	.word	0x1000070c
    263c:	100008e0 	.word	0x100008e0
    2640:	100006f8 	.word	0x100006f8
    2644:	10000760 	.word	0x10000760
    2648:	00003ae0 	.word	0x00003ae0
    264c:	1fff1ff8 	.word	0x1fff1ff8
    2650:	e000e100 	.word	0xe000e100
    2654:	10000727 	.word	0x10000727
    2658:	10000720 	.word	0x10000720
    265c:	10000724 	.word	0x10000724

00002660 <CAN_Receive>:
	msg_obj.msgobj = 31;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
    2660:	4b09      	ldr	r3, [pc, #36]	; (2688 <CAN_Receive+0x28>)
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
	msg_obj.msgobj = 31;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
    2662:	b510      	push	{r4, lr}
	if (can_error_flag) {
    2664:	781a      	ldrb	r2, [r3, #0]
    2666:	2a00      	cmp	r2, #0
    2668:	d006      	beq.n	2678 <CAN_Receive+0x18>
		can_error_flag = false;
    266a:	2200      	movs	r2, #0
    266c:	701a      	strb	r2, [r3, #0]
		return Convert_To_CAN_Error(can_error_info);
    266e:	4b07      	ldr	r3, [pc, #28]	; (268c <CAN_Receive+0x2c>)
    2670:	6818      	ldr	r0, [r3, #0]
    2672:	f7ff ff35 	bl	24e0 <Convert_To_CAN_Error>
	} else if (RingBuffer_Pop(&rx_buffer, user_buffer)) {
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}
    2676:	bd10      	pop	{r4, pc}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
	} else if (RingBuffer_Pop(&rx_buffer, user_buffer)) {
    2678:	0001      	movs	r1, r0
    267a:	4805      	ldr	r0, [pc, #20]	; (2690 <CAN_Receive+0x30>)
    267c:	f7ff fd30 	bl	20e0 <RingBuffer_Pop>
}

CAN_ERROR_T CAN_Receive(CCAN_MSG_OBJ_T* user_buffer) {
	if (can_error_flag) {
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
    2680:	4243      	negs	r3, r0
    2682:	4158      	adcs	r0, r3
    2684:	b2c0      	uxtb	r0, r0
    2686:	e7f6      	b.n	2676 <CAN_Receive+0x16>
    2688:	10000727 	.word	0x10000727
    268c:	10000720 	.word	0x10000720
    2690:	1000070c 	.word	0x1000070c

00002694 <CAN_TransmitMsgObj>:
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
	if (can_error_flag) {
    2694:	4b16      	ldr	r3, [pc, #88]	; (26f0 <CAN_TransmitMsgObj+0x5c>)
		tmp_msg_obj.data[i] = data[i];
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
    2696:	b570      	push	{r4, r5, r6, lr}
	if (can_error_flag) {
    2698:	781a      	ldrb	r2, [r3, #0]
    269a:	2a00      	cmp	r2, #0
    269c:	d111      	bne.n	26c2 <CAN_TransmitMsgObj+0x2e>
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    269e:	4c15      	ldr	r4, [pc, #84]	; (26f4 <CAN_TransmitMsgObj+0x60>)
    26a0:	7863      	ldrb	r3, [r4, #1]
    26a2:	2b00      	cmp	r3, #0
    26a4:	d014      	beq.n	26d0 <CAN_TransmitMsgObj+0x3c>
    26a6:	78a3      	ldrb	r3, [r4, #2]
    26a8:	2b00      	cmp	r3, #0
    26aa:	d01d      	beq.n	26e8 <CAN_TransmitMsgObj+0x54>
				break;
			}
		}

		if (!sent) { // Everything is busy, so put in ring buffer
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
    26ac:	0001      	movs	r1, r0
    26ae:	4812      	ldr	r0, [pc, #72]	; (26f8 <CAN_TransmitMsgObj+0x64>)
    26b0:	f7ff fcb2 	bl	2018 <RingBuffer_Insert>
    26b4:	0003      	movs	r3, r0
				return TX_BUFFER_FULL_CAN_ERROR;
			}
		}

	    return NO_CAN_ERROR;
    26b6:	425a      	negs	r2, r3
    26b8:	4153      	adcs	r3, r2
			}
		}

		if (!sent) { // Everything is busy, so put in ring buffer
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
				return TX_BUFFER_FULL_CAN_ERROR;
    26ba:	200e      	movs	r0, #14
			}
		}

	    return NO_CAN_ERROR;
    26bc:	425b      	negs	r3, r3
    26be:	4018      	ands	r0, r3
	}
}
    26c0:	bd70      	pop	{r4, r5, r6, pc}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
}

CAN_ERROR_T CAN_TransmitMsgObj(CCAN_MSG_OBJ_T *msg_obj) {
	if (can_error_flag) {
		can_error_flag = false;
    26c2:	2200      	movs	r2, #0
    26c4:	701a      	strb	r2, [r3, #0]
		return Convert_To_CAN_Error(can_error_info);
    26c6:	4b0d      	ldr	r3, [pc, #52]	; (26fc <CAN_TransmitMsgObj+0x68>)
    26c8:	6818      	ldr	r0, [r3, #0]
    26ca:	f7ff ff09 	bl	24e0 <Convert_To_CAN_Error>
    26ce:	e7f7      	b.n	26c0 <CAN_TransmitMsgObj+0x2c>
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    26d0:	2501      	movs	r5, #1
    26d2:	2301      	movs	r3, #1
				// Send with this message object
				msg_obj->msgobj = i;
    26d4:	7443      	strb	r3, [r0, #17]
				LPC_CCAN_API->can_transmit(msg_obj);
    26d6:	4b0a      	ldr	r3, [pc, #40]	; (2700 <CAN_TransmitMsgObj+0x6c>)
    26d8:	681b      	ldr	r3, [r3, #0]
    26da:	689b      	ldr	r3, [r3, #8]
    26dc:	691b      	ldr	r3, [r3, #16]
    26de:	4798      	blx	r3
				msg_obj_stat[i] = true;
    26e0:	2301      	movs	r3, #1
			if (!RingBuffer_Insert(&tx_buffer, msg_obj)) {
				return TX_BUFFER_FULL_CAN_ERROR;
			}
		}

	    return NO_CAN_ERROR;
    26e2:	2000      	movs	r0, #0
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
				// Send with this message object
				msg_obj->msgobj = i;
				LPC_CCAN_API->can_transmit(msg_obj);
				msg_obj_stat[i] = true;
    26e4:	5563      	strb	r3, [r4, r5]
    26e6:	e7eb      	b.n	26c0 <CAN_TransmitMsgObj+0x2c>
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
			if (!msg_obj_stat[i]) { // Message Object is free, begin to send
    26e8:	2502      	movs	r5, #2
		can_error_flag = false;
		return Convert_To_CAN_Error(can_error_info);
	} else {
		uint8_t i;
		bool sent = false;
		for (i = 1; i <= NUM_MSG_OBJS; i++) {
    26ea:	3302      	adds	r3, #2
    26ec:	e7f2      	b.n	26d4 <CAN_TransmitMsgObj+0x40>
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	10000727 	.word	0x10000727
    26f4:	10000724 	.word	0x10000724
    26f8:	100006f8 	.word	0x100006f8
    26fc:	10000720 	.word	0x10000720
    2700:	1fff1ff8 	.word	0x1fff1ff8

00002704 <CAN_Transmit>:
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
    2704:	0003      	movs	r3, r0
	tmp_msg_obj.mode_id = msg_id;
    2706:	4808      	ldr	r0, [pc, #32]	; (2728 <CAN_Transmit+0x24>)
	    return NO_CAN_ERROR;
	}
	return NO_RX_CAN_MESSAGE;
}

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
    2708:	b570      	push	{r4, r5, r6, lr}
	tmp_msg_obj.mode_id = msg_id;
    270a:	6003      	str	r3, [r0, #0]
	tmp_msg_obj.dlc = data_len;
    270c:	7402      	strb	r2, [r0, #16]
	uint8_t i;
	for (i = 0; i < tmp_msg_obj.dlc; i++) {	
    270e:	2300      	movs	r3, #0
    2710:	2a00      	cmp	r2, #0
    2712:	d006      	beq.n	2722 <CAN_Transmit+0x1e>
		tmp_msg_obj.data[i] = data[i];
    2714:	5ccd      	ldrb	r5, [r1, r3]
    2716:	18c4      	adds	r4, r0, r3
    2718:	3301      	adds	r3, #1
    271a:	7225      	strb	r5, [r4, #8]

CAN_ERROR_T CAN_Transmit(uint32_t msg_id, uint8_t* data, uint8_t data_len) {
	tmp_msg_obj.mode_id = msg_id;
	tmp_msg_obj.dlc = data_len;
	uint8_t i;
	for (i = 0; i < tmp_msg_obj.dlc; i++) {	
    271c:	b2dc      	uxtb	r4, r3
    271e:	42a2      	cmp	r2, r4
    2720:	d8f8      	bhi.n	2714 <CAN_Transmit+0x10>
		tmp_msg_obj.data[i] = data[i];
	}
	return CAN_TransmitMsgObj(&tmp_msg_obj);
    2722:	f7ff ffb7 	bl	2694 <CAN_TransmitMsgObj>
}
    2726:	bd70      	pop	{r4, r5, r6, pc}
    2728:	10000748 	.word	0x10000748

0000272c <Can_RawRead>:
  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err =  (Can_ErrorID_T) CAN_Transmit(can_out_id, frame->data, can_out_bytes);
  return err;
}

Can_ErrorID_T Can_RawRead(Frame *frame) {
    272c:	b510      	push	{r4, lr}
    272e:	b086      	sub	sp, #24
    2730:	0004      	movs	r4, r0
  CCAN_MSG_OBJ_T rx_msg;

  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err = (Can_ErrorID_T) CAN_Receive(&rx_msg);
    2732:	4668      	mov	r0, sp
    2734:	f7ff ff94 	bl	2660 <CAN_Receive>

  if (err == Can_Error_NONE) {
    2738:	2800      	cmp	r0, #0
    273a:	d111      	bne.n	2760 <Can_RawRead+0x34>
    frame->id = rx_msg.mode_id;
    273c:	9b00      	ldr	r3, [sp, #0]
    273e:	6023      	str	r3, [r4, #0]
    frame->len = rx_msg.dlc;
    2740:	466b      	mov	r3, sp
    2742:	7c19      	ldrb	r1, [r3, #16]
    2744:	7121      	strb	r1, [r4, #4]

    uint8_t i;
    for (i = 0; i < frame->len; i++) {
    2746:	2900      	cmp	r1, #0
    2748:	d00a      	beq.n	2760 <Can_RawRead+0x34>
    274a:	3901      	subs	r1, #1
    274c:	b2c9      	uxtb	r1, r1
    274e:	3101      	adds	r1, #1
    2750:	1d62      	adds	r2, r4, #5
    2752:	1859      	adds	r1, r3, r1
      frame->data[i] = rx_msg.data[i];
    2754:	7a1c      	ldrb	r4, [r3, #8]
    2756:	3301      	adds	r3, #1
    2758:	7014      	strb	r4, [r2, #0]
    275a:	3201      	adds	r2, #1
  if (err == Can_Error_NONE) {
    frame->id = rx_msg.mode_id;
    frame->len = rx_msg.dlc;

    uint8_t i;
    for (i = 0; i < frame->len; i++) {
    275c:	428b      	cmp	r3, r1
    275e:	d1f9      	bne.n	2754 <Can_RawRead+0x28>
      frame->data[i] = rx_msg.data[i];
    }
  }
  return err;
}
    2760:	b006      	add	sp, #24
    2762:	bd10      	pop	{r4, pc}

00002764 <Can_Unknown_Read>:
  // Define nothing so that there is a linker error!
#endif

// TODO this is a bit of a hack...unknown reads should follow same as regular reads
// and use of Can_RawRead must be banned.
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
    2764:	b530      	push	{r4, r5, lr}
  if (lastError == Can_Error_NONE) {
    2766:	4d0b      	ldr	r5, [pc, #44]	; (2794 <Can_Unknown_Read+0x30>)
  // Define nothing so that there is a linker error!
#endif

// TODO this is a bit of a hack...unknown reads should follow same as regular reads
// and use of Can_RawRead must be banned.
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
    2768:	0004      	movs	r4, r0
  if (lastError == Can_Error_NONE) {
    276a:	7828      	ldrb	r0, [r5, #0]
    276c:	2800      	cmp	r0, #0
    276e:	d10f      	bne.n	2790 <Can_Unknown_Read+0x2c>
    frame->id = lastMessage.id;
    2770:	4a09      	ldr	r2, [pc, #36]	; (2798 <Can_Unknown_Read+0x34>)
    2772:	6813      	ldr	r3, [r2, #0]
    2774:	6023      	str	r3, [r4, #0]
    frame->len = lastMessage.len;
    2776:	7913      	ldrb	r3, [r2, #4]
    2778:	3205      	adds	r2, #5
    277a:	7123      	strb	r3, [r4, #4]
    277c:	1d63      	adds	r3, r4, #5
    277e:	340d      	adds	r4, #13
    uint8_t i;
    for (i = 0; i < 8; i++) {
      frame->data[i] = lastMessage.data[i];
    2780:	7811      	ldrb	r1, [r2, #0]
    2782:	3201      	adds	r2, #1
    2784:	7019      	strb	r1, [r3, #0]
    2786:	3301      	adds	r3, #1
Can_ErrorID_T Can_Unknown_Read(Frame *frame) {
  if (lastError == Can_Error_NONE) {
    frame->id = lastMessage.id;
    frame->len = lastMessage.len;
    uint8_t i;
    for (i = 0; i < 8; i++) {
    2788:	42a3      	cmp	r3, r4
    278a:	d1f9      	bne.n	2780 <Can_Unknown_Read+0x1c>
      frame->data[i] = lastMessage.data[i];
    }
    lastError = Can_Error_NO_RX;
    278c:	2301      	movs	r3, #1
    278e:	702b      	strb	r3, [r5, #0]
    return Can_Error_NONE;
  } else {
    return lastError;
  }
}
    2790:	bd30      	pop	{r4, r5, pc}
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	10000100 	.word	0x10000100
    2798:	10000728 	.word	0x10000728

0000279c <Can_Error_Read>:

Can_ErrorID_T Can_Error_Read(void) {
  Can_ErrorID_T cachedError = lastError;
  lastError = Can_Error_NO_RX;
    279c:	2201      	movs	r2, #1
    return lastError;
  }
}

Can_ErrorID_T Can_Error_Read(void) {
  Can_ErrorID_T cachedError = lastError;
    279e:	4b02      	ldr	r3, [pc, #8]	; (27a8 <Can_Error_Read+0xc>)
    27a0:	7818      	ldrb	r0, [r3, #0]
  lastError = Can_Error_NO_RX;
    27a2:	701a      	strb	r2, [r3, #0]
  return cachedError;
}
    27a4:	4770      	bx	lr
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	10000100 	.word	0x10000100

000027ac <Can0_Csb_Init>:
void Can0_Dash_Init(uint32_t baudrate) {
  Can_Init(baudrate);
  Can_SetFilter(0b11100000000, 0);
}

void Can0_Csb_Init(uint32_t baudrate) {
    27ac:	b510      	push	{r4, lr}
void Can_Init(uint32_t baudrate) {
  CAN_Init(baudrate);
}

void Can_SetFilter(uint32_t mask, uint32_t match_id) {
  CAN_SetMask1(mask, match_id);
    27ae:	4c06      	ldr	r4, [pc, #24]	; (27c8 <Can0_Csb_Init+0x1c>)
#include "chip.h"
#include "can.h"
#include "ccand_11xx.h"

void Can_Init(uint32_t baudrate) {
  CAN_Init(baudrate);
    27b0:	f7ff fefe 	bl	25b0 <CAN_Init>
}

void Can_SetFilter(uint32_t mask, uint32_t match_id) {
  CAN_SetMask1(mask, match_id);
    27b4:	0020      	movs	r0, r4
    27b6:	2100      	movs	r1, #0
    27b8:	f7ff fec2 	bl	2540 <CAN_SetMask1>
  CAN_SetMask2(mask, match_id);
    27bc:	2100      	movs	r1, #0
    27be:	0020      	movs	r0, r4
    27c0:	f7ff fede 	bl	2580 <CAN_SetMask2>
  Can_Init(baudrate);
  Can_SetFilter(0b11111111111111111100000000000, 0);
}
    27c4:	bd10      	pop	{r4, pc}
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	1ffff800 	.word	0x1ffff800

000027cc <Can_MsgType>:
void Can0_Bms_Init(uint32_t baudrate) {
  Can_Init(baudrate);
  Can_SetFilter(0b0, 0);
}

Can_MsgID_T Can_MsgType(void) {
    27cc:	b510      	push	{r4, lr}
  lastError = Can_RawRead(&lastMessage);
    27ce:	4c31      	ldr	r4, [pc, #196]	; (2894 <Can_MsgType+0xc8>)
    27d0:	0020      	movs	r0, r4
    27d2:	f7ff ffab 	bl	272c <Can_RawRead>
    27d6:	4a30      	ldr	r2, [pc, #192]	; (2898 <Can_MsgType+0xcc>)
    27d8:	0003      	movs	r3, r0
    27da:	7010      	strb	r0, [r2, #0]
  if (lastError == Can_Error_NO_RX) {
    27dc:	2801      	cmp	r0, #1
    27de:	d025      	beq.n	282c <Can_MsgType+0x60>
    return Can_No_Msg;
  } else if (lastError != Can_Error_NONE) {
    return Can_Error_Msg;
    27e0:	2002      	movs	r0, #2

Can_MsgID_T Can_MsgType(void) {
  lastError = Can_RawRead(&lastMessage);
  if (lastError == Can_Error_NO_RX) {
    return Can_No_Msg;
  } else if (lastError != Can_Error_NONE) {
    27e2:	2b00      	cmp	r3, #0
    27e4:	d000      	beq.n	27e8 <Can_MsgType+0x1c>
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    default:
      return Can_Unknown_Msg;
   }
}
    27e6:	bd10      	pop	{r4, pc}
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    27e8:	6823      	ldr	r3, [r4, #0]
    27ea:	2bf2      	cmp	r3, #242	; 0xf2
    27ec:	d050      	beq.n	2890 <Can_MsgType+0xc4>
    27ee:	d910      	bls.n	2812 <Can_MsgType+0x46>
    27f0:	4a2a      	ldr	r2, [pc, #168]	; (289c <Can_MsgType+0xd0>)
    27f2:	4293      	cmp	r3, r2
    27f4:	d044      	beq.n	2880 <Can_MsgType+0xb4>
    27f6:	d825      	bhi.n	2844 <Can_MsgType+0x78>
    27f8:	2bf4      	cmp	r3, #244	; 0xf4
    27fa:	d032      	beq.n	2862 <Can_MsgType+0x96>
    27fc:	d344      	bcc.n	2888 <Can_MsgType+0xbc>
    27fe:	4a28      	ldr	r2, [pc, #160]	; (28a0 <Can_MsgType+0xd4>)
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    2800:	200d      	movs	r0, #13
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2802:	4293      	cmp	r3, r2
    2804:	d0ef      	beq.n	27e6 <Can_MsgType+0x1a>
    2806:	4a27      	ldr	r2, [pc, #156]	; (28a4 <Can_MsgType+0xd8>)
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    2808:	3808      	subs	r0, #8
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    280a:	4293      	cmp	r3, r2
    280c:	d0eb      	beq.n	27e6 <Can_MsgType+0x1a>
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    default:
      return Can_Unknown_Msg;
    280e:	2001      	movs	r0, #1
    2810:	e7e9      	b.n	27e6 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2812:	2bd3      	cmp	r3, #211	; 0xd3
    2814:	d03a      	beq.n	288c <Can_MsgType+0xc0>
    2816:	d80b      	bhi.n	2830 <Can_MsgType+0x64>
    2818:	2bd0      	cmp	r3, #208	; 0xd0
    281a:	d026      	beq.n	286a <Can_MsgType+0x9e>
    281c:	d92c      	bls.n	2878 <Can_MsgType+0xac>
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    281e:	2009      	movs	r0, #9
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2820:	2bd1      	cmp	r3, #209	; 0xd1
    2822:	d0e0      	beq.n	27e6 <Can_MsgType+0x1a>
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    2824:	3001      	adds	r0, #1
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2826:	2bd2      	cmp	r3, #210	; 0xd2
    2828:	d0dd      	beq.n	27e6 <Can_MsgType+0x1a>
    282a:	e7f0      	b.n	280e <Can_MsgType+0x42>
}

Can_MsgID_T Can_MsgType(void) {
  lastError = Can_RawRead(&lastMessage);
  if (lastError == Can_Error_NO_RX) {
    return Can_No_Msg;
    282c:	2000      	movs	r0, #0
    282e:	e7da      	b.n	27e6 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2830:	2bd5      	cmp	r3, #213	; 0xd5
    2832:	d018      	beq.n	2866 <Can_MsgType+0x9a>
    2834:	d326      	bcc.n	2884 <Can_MsgType+0xb8>
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    2836:	2004      	movs	r0, #4
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2838:	2bf0      	cmp	r3, #240	; 0xf0
    283a:	d0d4      	beq.n	27e6 <Can_MsgType+0x1a>
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    283c:	300b      	adds	r0, #11
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    283e:	2bf1      	cmp	r3, #241	; 0xf1
    2840:	d0d1      	beq.n	27e6 <Can_MsgType+0x1a>
    2842:	e7e4      	b.n	280e <Can_MsgType+0x42>
    2844:	4a18      	ldr	r2, [pc, #96]	; (28a8 <Can_MsgType+0xdc>)
    2846:	4293      	cmp	r3, r2
    2848:	d009      	beq.n	285e <Can_MsgType+0x92>
    284a:	d910      	bls.n	286e <Can_MsgType+0xa2>
    284c:	4a17      	ldr	r2, [pc, #92]	; (28ac <Can_MsgType+0xe0>)
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    284e:	2014      	movs	r0, #20
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2850:	4293      	cmp	r3, r2
    2852:	d0c8      	beq.n	27e6 <Can_MsgType+0x1a>
    2854:	4a16      	ldr	r2, [pc, #88]	; (28b0 <Can_MsgType+0xe4>)
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    2856:	380d      	subs	r0, #13
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2858:	4293      	cmp	r3, r2
    285a:	d0c4      	beq.n	27e6 <Can_MsgType+0x1a>
    285c:	e7d7      	b.n	280e <Can_MsgType+0x42>
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    case ELCONCOMMAND__id:
      return Can_ElconCommand_Msg;
    case BMS_MODE__id:
      return Can_BMS_Mode_Msg;
    285e:	2015      	movs	r0, #21
    2860:	e7c1      	b.n	27e6 <Can_MsgType+0x1a>
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    case BMS_VCU_SWITCH__id:
      return Can_BMS_VCU_Switch_Msg;
    2862:	2012      	movs	r0, #18
    2864:	e7bf      	b.n	27e6 <Can_MsgType+0x1a>
    case BMS_SOC__id:
      return Can_BMS_SOC_Msg;
    2866:	2013      	movs	r0, #19
    2868:	e7bd      	b.n	27e6 <Can_MsgType+0x1a>
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    case CURRENTSENSOR_CURRENT__id:
      return Can_CurrentSensor_Current_Msg;
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    286a:	200e      	movs	r0, #14
    286c:	e7bb      	b.n	27e6 <Can_MsgType+0x1a>
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    286e:	3a01      	subs	r2, #1
    case BMS_CSB_SWITCH__id:
      return Can_BMS_CSB_Switch_Msg;
    2870:	2003      	movs	r0, #3
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    2872:	4293      	cmp	r3, r2
    2874:	d0b7      	beq.n	27e6 <Can_MsgType+0x1a>
    2876:	e7ca      	b.n	280e <Can_MsgType+0x42>
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    case MC_COMMAND__id:
      return Can_MC_Command_Msg;
    2878:	300a      	adds	r0, #10
    return Can_Error_Msg;
  }

  uint32_t id = lastMessage.id;

  switch(id) {
    287a:	2bc0      	cmp	r3, #192	; 0xc0
    287c:	d0b3      	beq.n	27e6 <Can_MsgType+0x1a>
    287e:	e7c6      	b.n	280e <Can_MsgType+0x42>
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    case ELCONHEARTBEAT__id:
      return Can_ElconHeartbeat_Msg;
    case CURRENTSENSOR_POWER__id:
      return Can_CurrentSensor_Power_Msg;
    2880:	2008      	movs	r0, #8
    2882:	e7b0      	b.n	27e6 <Can_MsgType+0x1a>
    case REARCANNODEWHEELSPEED__id:
      return Can_RearCanNodeWheelSpeed_Msg;
    case DASH_REQUEST__id:
      return Can_Dash_Request_Msg;
    case BMSERRORS__id:
      return Can_BMSErrors_Msg;
    2884:	200b      	movs	r0, #11
    2886:	e7ae      	b.n	27e6 <Can_MsgType+0x1a>
    case FRONTCANNODEWHEELSPEED__id:
      return Can_FrontCanNodeWheelSpeed_Msg;
    case CURRENTSENSOR_VOLTAGE__id:
      return Can_CurrentSensor_Voltage_Msg;
    case VCUTODASH__id:
      return Can_VcuToDash_Msg;
    2888:	2006      	movs	r0, #6
    288a:	e7ac      	b.n	27e6 <Can_MsgType+0x1a>
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    case BMSSTATE__id:
      return Can_BMSState_Msg;
    288c:	2011      	movs	r0, #17
    288e:	e7aa      	b.n	27e6 <Can_MsgType+0x1a>
    case FRONTCANNODEOUTPUT__id:
      return Can_FrontCanNodeOutput_Msg;
    case BMSCELLTEMPS__id:
      return Can_BMSCellTemps_Msg;
    case BMSPACKSTATUS__id:
      return Can_BmsPackStatus_Msg;
    2890:	2010      	movs	r0, #16
    2892:	e7a8      	b.n	27e6 <Can_MsgType+0x1a>
    2894:	10000728 	.word	0x10000728
    2898:	10000100 	.word	0x10000100
    289c:	00000526 	.word	0x00000526
    28a0:	00000521 	.word	0x00000521
    28a4:	00000522 	.word	0x00000522
    28a8:	00000601 	.word	0x00000601
    28ac:	1806e5f4 	.word	0x1806e5f4
    28b0:	18ff50e5 	.word	0x18ff50e5

000028b4 <Can_ElconHeartbeat_FromCan>:
  can_out->id = ELCONHEARTBEAT__id;
  can_out->len = 5;
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
    28b4:	2200      	movs	r2, #0
    28b6:	2300      	movs	r3, #0
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONHEARTBEAT__id;
  can_out->len = 5;
}

FROM_CAN(Can_ElconHeartbeat) {
    28b8:	b530      	push	{r4, r5, lr}
    28ba:	b083      	sub	sp, #12
  uint64_t bitstring = 0;
    28bc:	9200      	str	r2, [sp, #0]
    28be:	9301      	str	r3, [sp, #4]
    28c0:	466a      	mov	r2, sp
    28c2:	1d43      	adds	r3, r0, #5
    28c4:	3207      	adds	r2, #7
    28c6:	300d      	adds	r0, #13
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    28c8:	781c      	ldrb	r4, [r3, #0]
    28ca:	3301      	adds	r3, #1
    28cc:	7014      	strb	r4, [r2, #0]
    28ce:	3a01      	subs	r2, #1
  uint64_t bitstring;
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    28d0:	4283      	cmp	r3, r0
    28d2:	d1f9      	bne.n	28c8 <Can_ElconHeartbeat_FromCan+0x14>
}

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->has_hardware_failure = EXTRACT(bitstring, 32, 1);
    28d4:	2401      	movs	r4, #1
    28d6:	9b00      	ldr	r3, [sp, #0]
    28d8:	9a01      	ldr	r2, [sp, #4]
    28da:	0fd8      	lsrs	r0, r3, #31
    28dc:	7008      	strb	r0, [r1, #0]
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
    28de:	0c10      	lsrs	r0, r2, #16
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    28e0:	00d5      	lsls	r5, r2, #3

FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->has_hardware_failure = EXTRACT(bitstring, 32, 1);
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
    28e2:	8048      	strh	r0, [r1, #2]
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    28e4:	0f58      	lsrs	r0, r3, #29
    28e6:	4328      	orrs	r0, r5
    28e8:	4020      	ands	r0, r4
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
    28ea:	0155      	lsls	r5, r2, #5
FROM_CAN(Can_ElconHeartbeat) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->has_hardware_failure = EXTRACT(bitstring, 32, 1);
  type_out->output_voltage = EXTRACT(bitstring, 0, 16);
  type_out->is_input_voltage_wrong = EXTRACT(bitstring, 34, 1);
    28ec:	7108      	strb	r0, [r1, #4]
  type_out->elcon_is_comms_bad = EXTRACT(bitstring, 36, 1);
    28ee:	0ed8      	lsrs	r0, r3, #27
    28f0:	4328      	orrs	r0, r5
    28f2:	4020      	ands	r0, r4
    28f4:	7148      	strb	r0, [r1, #5]
  type_out->battery_voltage_not_detected = EXTRACT(bitstring, 35, 1);
    28f6:	0115      	lsls	r5, r2, #4
    28f8:	0f18      	lsrs	r0, r3, #28
    28fa:	4328      	orrs	r0, r5
    28fc:	4020      	ands	r0, r4
    28fe:	7188      	strb	r0, [r1, #6]
  type_out->over_temp_protection_on = EXTRACT(bitstring, 33, 1);
    2900:	0f9b      	lsrs	r3, r3, #30
    2902:	0090      	lsls	r0, r2, #2
    2904:	4303      	orrs	r3, r0
    2906:	4023      	ands	r3, r4
    2908:	71cb      	strb	r3, [r1, #7]
  type_out->output_current = EXTRACT(bitstring, 16, 16);
    290a:	810a      	strh	r2, [r1, #8]
}
    290c:	b003      	add	sp, #12
    290e:	bd30      	pop	{r4, r5, pc}

00002910 <Can_BmsPackStatus_FromCan>:
  can_out->id = BMSPACKSTATUS__id;
  can_out->len = 7;
}

FROM_CAN(Can_BmsPackStatus) {
  uint64_t bitstring = 0;
    2910:	2200      	movs	r2, #0
    2912:	2300      	movs	r3, #0
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMSPACKSTATUS__id;
  can_out->len = 7;
}

FROM_CAN(Can_BmsPackStatus) {
    2914:	b510      	push	{r4, lr}
    2916:	b082      	sub	sp, #8
  uint64_t bitstring = 0;
    2918:	9200      	str	r2, [sp, #0]
    291a:	9301      	str	r3, [sp, #4]
    291c:	466a      	mov	r2, sp
    291e:	1d43      	adds	r3, r0, #5
    2920:	3207      	adds	r2, #7
    2922:	300d      	adds	r0, #13
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2924:	781c      	ldrb	r4, [r3, #0]
    2926:	3301      	adds	r3, #1
    2928:	7014      	strb	r4, [r2, #0]
    292a:	3a01      	subs	r2, #1
  uint64_t bitstring;
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    292c:	4283      	cmp	r3, r0
    292e:	d1f9      	bne.n	2924 <Can_BmsPackStatus_FromCan+0x14>
}

FROM_CAN(Can_BmsPackStatus) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
    2930:	9b01      	ldr	r3, [sp, #4]
    2932:	9800      	ldr	r0, [sp, #0]
    2934:	051a      	lsls	r2, r3, #20
    2936:	0fd2      	lsrs	r2, r2, #31
    2938:	700a      	strb	r2, [r1, #0]
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
    293a:	03c2      	lsls	r2, r0, #15
    293c:	0d92      	lsrs	r2, r2, #22
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    293e:	021c      	lsls	r4, r3, #8

FROM_CAN(Can_BmsPackStatus) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
    2940:	804a      	strh	r2, [r1, #2]
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
    2942:	0e02      	lsrs	r2, r0, #24
    2944:	4322      	orrs	r2, r4
    2946:	0592      	lsls	r2, r2, #22
    2948:	0d92      	lsrs	r2, r2, #22
    294a:	808a      	strh	r2, [r1, #4]
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
    294c:	0dda      	lsrs	r2, r3, #23
    294e:	80ca      	strh	r2, [r1, #6]
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
    2950:	227f      	movs	r2, #127	; 0x7f
  to_bitstring(can_in->data, &bitstring);
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
    2952:	025b      	lsls	r3, r3, #9
    2954:	155b      	asrs	r3, r3, #21
    2956:	810b      	strh	r3, [r1, #8]
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
    2958:	0c43      	lsrs	r3, r0, #17
    295a:	4013      	ands	r3, r2
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
    295c:	4010      	ands	r0, r2
  type_out->balancing_needed = EXTRACT(bitstring, 20, 1);
  type_out->max_cell_voltage = EXTRACT(bitstring, 47, 10);
  type_out->min_cell_voltage = EXTRACT(bitstring, 30, 10);
  type_out->pack_voltage = EXTRACT(bitstring, 0, 9);
  type_out->pack_current = SIGN(EXTRACT(bitstring, 9, 11), 11);
  type_out->min_cell_voltage_id = EXTRACT(bitstring, 40, 7);
    295e:	728b      	strb	r3, [r1, #10]
  type_out->max_cell_voltage_id = EXTRACT(bitstring, 57, 7);
    2960:	72c8      	strb	r0, [r1, #11]
}
    2962:	b002      	add	sp, #8
    2964:	bd10      	pop	{r4, pc}
    2966:	46c0      	nop			; (mov r8, r8)

00002968 <Can_BMS_CSB_Switch_Write>:
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->requested_mode = (Can_BMS_ModeID_T)EXTRACT(bitstring, 0, 1);
}

DEFINE(Can_BMS_CSB_Switch)
    2968:	b500      	push	{lr}
    296a:	b085      	sub	sp, #20
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    296c:	2200      	movs	r2, #0
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    296e:	4669      	mov	r1, sp
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    2970:	7803      	ldrb	r3, [r0, #0]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2972:	4668      	mov	r0, sp
    2974:	730a      	strb	r2, [r1, #12]
    2976:	72ca      	strb	r2, [r1, #11]
    2978:	728a      	strb	r2, [r1, #10]
    297a:	2100      	movs	r1, #0
   }
}

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
    297c:	07db      	lsls	r3, r3, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    297e:	7203      	strb	r3, [r0, #8]
    2980:	0e1b      	lsrs	r3, r3, #24
    2982:	7241      	strb	r1, [r0, #9]
    2984:	71c2      	strb	r2, [r0, #7]
    2986:	4669      	mov	r1, sp
    2988:	7182      	strb	r2, [r0, #6]
    298a:	7143      	strb	r3, [r0, #5]
TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
  can_out->len = 1;
    298c:	2301      	movs	r3, #1

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
    298e:	20c0      	movs	r0, #192	; 0xc0
  can_out->len = 1;
    2990:	710b      	strb	r3, [r1, #4]

TO_CAN(Can_BMS_CSB_Switch) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->always_true, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_CSB_SWITCH__id;
    2992:	00c0      	lsls	r0, r0, #3
Can_ErrorID_T Can_RawWrite(Frame *frame) {
  const uint32_t can_out_id = (uint32_t) (frame->id);
  const uint8_t can_out_bytes = frame->len;

  // TODO actually convert this later, for now just hackily cast it
  Can_ErrorID_T err =  (Can_ErrorID_T) CAN_Transmit(can_out_id, frame->data, can_out_bytes);
    2994:	2201      	movs	r2, #1
    2996:	3105      	adds	r1, #5
    2998:	9000      	str	r0, [sp, #0]
    299a:	f7ff feb3 	bl	2704 <CAN_Transmit>
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->requested_mode = (Can_BMS_ModeID_T)EXTRACT(bitstring, 0, 1);
}

DEFINE(Can_BMS_CSB_Switch)
    299e:	b005      	add	sp, #20
    29a0:	bd00      	pop	{pc}
    29a2:	46c0      	nop			; (mov r8, r8)

000029a4 <Can_ElconHeartbeat_Read>:
DEFINE(Can_FrontCanNodeWheelSpeed)
DEFINE(Can_CurrentSensor_Voltage)
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconHeartbeat)
    29a4:	b570      	push	{r4, r5, r6, lr}
    29a6:	4d06      	ldr	r5, [pc, #24]	; (29c0 <Can_ElconHeartbeat_Read+0x1c>)
    29a8:	782c      	ldrb	r4, [r5, #0]
    29aa:	2c00      	cmp	r4, #0
    29ac:	d105      	bne.n	29ba <Can_ElconHeartbeat_Read+0x16>
    29ae:	0001      	movs	r1, r0
    29b0:	4804      	ldr	r0, [pc, #16]	; (29c4 <Can_ElconHeartbeat_Read+0x20>)
    29b2:	f7ff ff7f 	bl	28b4 <Can_ElconHeartbeat_FromCan>
    29b6:	2301      	movs	r3, #1
    29b8:	702b      	strb	r3, [r5, #0]
    29ba:	0020      	movs	r0, r4
    29bc:	bd70      	pop	{r4, r5, r6, pc}
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	10000100 	.word	0x10000100
    29c4:	10000728 	.word	0x10000728

000029c8 <Can_BMSErrors_Read>:
DEFINE(Can_CurrentSensor_Power)
DEFINE(Can_RearCanNodeWheelSpeed)
DEFINE(Can_Dash_Request)
DEFINE(Can_BMSErrors)
    29c8:	b570      	push	{r4, r5, r6, lr}
    29ca:	4d0e      	ldr	r5, [pc, #56]	; (2a04 <Can_BMSErrors_Read+0x3c>)
    29cc:	0006      	movs	r6, r0
    29ce:	7828      	ldrb	r0, [r5, #0]
    29d0:	b082      	sub	sp, #8
    29d2:	2800      	cmp	r0, #0
    29d4:	d113      	bne.n	29fe <Can_BMSErrors_Read+0x36>
  can_out->id = BMSERRORS__id;
  can_out->len = 1;
}

FROM_CAN(Can_BMSErrors) {
  uint64_t bitstring = 0;
    29d6:	2200      	movs	r2, #0
    29d8:	2300      	movs	r3, #0
    29da:	2408      	movs	r4, #8
    29dc:	9200      	str	r2, [sp, #0]
    29de:	9301      	str	r3, [sp, #4]
    29e0:	466b      	mov	r3, sp
    29e2:	4264      	negs	r4, r4
    29e4:	4a08      	ldr	r2, [pc, #32]	; (2a08 <Can_BMSErrors_Read+0x40>)
    29e6:	446c      	add	r4, sp
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    29e8:	7951      	ldrb	r1, [r2, #5]
    29ea:	3b01      	subs	r3, #1
    29ec:	7219      	strb	r1, [r3, #8]
    29ee:	3201      	adds	r2, #1
  uint64_t bitstring;
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    29f0:	42a3      	cmp	r3, r4
    29f2:	d1f9      	bne.n	29e8 <Can_BMSErrors_Read+0x20>
}

FROM_CAN(Can_BMSErrors) {
  uint64_t bitstring = 0;
  to_bitstring(can_in->data, &bitstring);
  type_out->type = (Can_BMSErrorsID_T)EXTRACT(bitstring, 0, 4);
    29f4:	9b01      	ldr	r3, [sp, #4]
    29f6:	0f1b      	lsrs	r3, r3, #28
    29f8:	7033      	strb	r3, [r6, #0]
DEFINE(Can_VcuToDash)
DEFINE(Can_ElconHeartbeat)
DEFINE(Can_CurrentSensor_Power)
DEFINE(Can_RearCanNodeWheelSpeed)
DEFINE(Can_Dash_Request)
DEFINE(Can_BMSErrors)
    29fa:	2301      	movs	r3, #1
    29fc:	702b      	strb	r3, [r5, #0]
    29fe:	b002      	add	sp, #8
    2a00:	bd70      	pop	{r4, r5, r6, pc}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	10000100 	.word	0x10000100
    2a08:	10000728 	.word	0x10000728

00002a0c <Can_BmsPackStatus_Read>:
DEFINE(Can_MC_Command)
DEFINE(Can_CurrentSensor_Current)
DEFINE(Can_FrontCanNodeOutput)
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
    2a0c:	b570      	push	{r4, r5, r6, lr}
    2a0e:	4d06      	ldr	r5, [pc, #24]	; (2a28 <Can_BmsPackStatus_Read+0x1c>)
    2a10:	782c      	ldrb	r4, [r5, #0]
    2a12:	2c00      	cmp	r4, #0
    2a14:	d105      	bne.n	2a22 <Can_BmsPackStatus_Read+0x16>
    2a16:	0001      	movs	r1, r0
    2a18:	4804      	ldr	r0, [pc, #16]	; (2a2c <Can_BmsPackStatus_Read+0x20>)
    2a1a:	f7ff ff79 	bl	2910 <Can_BmsPackStatus_FromCan>
    2a1e:	2301      	movs	r3, #1
    2a20:	702b      	strb	r3, [r5, #0]
    2a22:	0020      	movs	r0, r4
    2a24:	bd70      	pop	{r4, r5, r6, pc}
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	10000100 	.word	0x10000100
    2a2c:	10000728 	.word	0x10000728

00002a30 <Can_ElconCommand_Write>:
DEFINE(Can_BMSState)
DEFINE(Can_BMS_VCU_Switch)
DEFINE(Can_BMS_SOC)
DEFINE(Can_ElconCommand)
    2a30:	b500      	push	{lr}

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    2a32:	8883      	ldrh	r3, [r0, #4]
    2a34:	8802      	ldrh	r2, [r0, #0]
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
DEFINE(Can_BMSState)
DEFINE(Can_BMS_VCU_Switch)
DEFINE(Can_BMS_SOC)
DEFINE(Can_ElconCommand)
    2a36:	b085      	sub	sp, #20

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    2a38:	041b      	lsls	r3, r3, #16
    2a3a:	4313      	orrs	r3, r2
    2a3c:	7882      	ldrb	r2, [r0, #2]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2a3e:	4668      	mov	r0, sp

TO_CAN(Can_ElconCommand) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
    2a40:	2100      	movs	r1, #0
    2a42:	07d2      	lsls	r2, r2, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2a44:	7302      	strb	r2, [r0, #12]
    2a46:	0e12      	lsrs	r2, r2, #24
    2a48:	7242      	strb	r2, [r0, #9]
    2a4a:	0a1a      	lsrs	r2, r3, #8
    2a4c:	7203      	strb	r3, [r0, #8]
    2a4e:	71c2      	strb	r2, [r0, #7]
    2a50:	0c1a      	lsrs	r2, r3, #16
    2a52:	0e1b      	lsrs	r3, r3, #24
    2a54:	72c1      	strb	r1, [r0, #11]
    2a56:	7281      	strb	r1, [r0, #10]
    2a58:	7143      	strb	r3, [r0, #5]
    2a5a:	4669      	mov	r1, sp
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
  can_out->len = 5;
    2a5c:	2305      	movs	r3, #5
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2a5e:	7182      	strb	r2, [r0, #6]
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
    2a60:	4804      	ldr	r0, [pc, #16]	; (2a74 <Can_ElconCommand_Write+0x44>)
  can_out->len = 5;
    2a62:	710b      	strb	r3, [r1, #4]
    2a64:	2205      	movs	r2, #5
    2a66:	3105      	adds	r1, #5
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->max_current, bitstring, 16, 16);
  bitstring = INSERT(type_in->control, bitstring, 32, 1);
  bitstring = INSERT(type_in->max_terminal_voltage, bitstring, 0, 16);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = ELCONCOMMAND__id;
    2a68:	9000      	str	r0, [sp, #0]
    2a6a:	f7ff fe4b 	bl	2704 <CAN_Transmit>
DEFINE(Can_BMSCellTemps)
DEFINE(Can_BmsPackStatus)
DEFINE(Can_BMSState)
DEFINE(Can_BMS_VCU_Switch)
DEFINE(Can_BMS_SOC)
DEFINE(Can_ElconCommand)
    2a6e:	b005      	add	sp, #20
    2a70:	bd00      	pop	{pc}
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	1806e5f4 	.word	0x1806e5f4

00002a78 <Can_BMS_Mode_Write>:
DEFINE(Can_BMS_Mode)
    2a78:	b500      	push	{lr}
    2a7a:	b085      	sub	sp, #20
  type_out->max_terminal_voltage = EXTRACT(bitstring, 0, 16);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    2a7c:	2200      	movs	r2, #0
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2a7e:	4669      	mov	r1, sp
  type_out->max_terminal_voltage = EXTRACT(bitstring, 0, 16);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    2a80:	7803      	ldrb	r3, [r0, #0]
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2a82:	4668      	mov	r0, sp
    2a84:	730a      	strb	r2, [r1, #12]
    2a86:	72ca      	strb	r2, [r1, #11]
    2a88:	728a      	strb	r2, [r1, #10]
    2a8a:	2100      	movs	r1, #0
  type_out->max_terminal_voltage = EXTRACT(bitstring, 0, 16);
}

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
    2a8c:	07db      	lsls	r3, r3, #31
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2a8e:	7203      	strb	r3, [r0, #8]
    2a90:	0e1b      	lsrs	r3, r3, #24
    2a92:	7241      	strb	r1, [r0, #9]
    2a94:	7143      	strb	r3, [r0, #5]
    2a96:	4669      	mov	r1, sp
TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
  can_out->len = 1;
    2a98:	2301      	movs	r3, #1
} DATA_T;

void data_transfer(DATA_T *in, DATA_T *out) {
  uint8_t i;
  for (i = 0; i < 8; i++) {
    (*out).byte[7-i] = (*in).byte[i];
    2a9a:	71c2      	strb	r2, [r0, #7]
    2a9c:	7182      	strb	r2, [r0, #6]

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
    2a9e:	4804      	ldr	r0, [pc, #16]	; (2ab0 <Can_BMS_Mode_Write+0x38>)
  can_out->len = 1;
    2aa0:	710b      	strb	r3, [r1, #4]
    2aa2:	2201      	movs	r2, #1
    2aa4:	3105      	adds	r1, #5

TO_CAN(Can_BMS_Mode) {
  uint64_t bitstring = 0;
  bitstring = INSERT(type_in->requested_mode, bitstring, 0, 1);
  from_bitstring(&bitstring, can_out->data);
  can_out->id = BMS_MODE__id;
    2aa6:	9000      	str	r0, [sp, #0]
    2aa8:	f7ff fe2c 	bl	2704 <CAN_Transmit>
DEFINE(Can_BmsPackStatus)
DEFINE(Can_BMSState)
DEFINE(Can_BMS_VCU_Switch)
DEFINE(Can_BMS_SOC)
DEFINE(Can_ElconCommand)
DEFINE(Can_BMS_Mode)
    2aac:	b005      	add	sp, #20
    2aae:	bd00      	pop	{pc}
    2ab0:	00000601 	.word	0x00000601

00002ab4 <__aeabi_uidiv>:
    2ab4:	2200      	movs	r2, #0
    2ab6:	0843      	lsrs	r3, r0, #1
    2ab8:	428b      	cmp	r3, r1
    2aba:	d374      	bcc.n	2ba6 <__aeabi_uidiv+0xf2>
    2abc:	0903      	lsrs	r3, r0, #4
    2abe:	428b      	cmp	r3, r1
    2ac0:	d35f      	bcc.n	2b82 <__aeabi_uidiv+0xce>
    2ac2:	0a03      	lsrs	r3, r0, #8
    2ac4:	428b      	cmp	r3, r1
    2ac6:	d344      	bcc.n	2b52 <__aeabi_uidiv+0x9e>
    2ac8:	0b03      	lsrs	r3, r0, #12
    2aca:	428b      	cmp	r3, r1
    2acc:	d328      	bcc.n	2b20 <__aeabi_uidiv+0x6c>
    2ace:	0c03      	lsrs	r3, r0, #16
    2ad0:	428b      	cmp	r3, r1
    2ad2:	d30d      	bcc.n	2af0 <__aeabi_uidiv+0x3c>
    2ad4:	22ff      	movs	r2, #255	; 0xff
    2ad6:	0209      	lsls	r1, r1, #8
    2ad8:	ba12      	rev	r2, r2
    2ada:	0c03      	lsrs	r3, r0, #16
    2adc:	428b      	cmp	r3, r1
    2ade:	d302      	bcc.n	2ae6 <__aeabi_uidiv+0x32>
    2ae0:	1212      	asrs	r2, r2, #8
    2ae2:	0209      	lsls	r1, r1, #8
    2ae4:	d065      	beq.n	2bb2 <__aeabi_uidiv+0xfe>
    2ae6:	0b03      	lsrs	r3, r0, #12
    2ae8:	428b      	cmp	r3, r1
    2aea:	d319      	bcc.n	2b20 <__aeabi_uidiv+0x6c>
    2aec:	e000      	b.n	2af0 <__aeabi_uidiv+0x3c>
    2aee:	0a09      	lsrs	r1, r1, #8
    2af0:	0bc3      	lsrs	r3, r0, #15
    2af2:	428b      	cmp	r3, r1
    2af4:	d301      	bcc.n	2afa <__aeabi_uidiv+0x46>
    2af6:	03cb      	lsls	r3, r1, #15
    2af8:	1ac0      	subs	r0, r0, r3
    2afa:	4152      	adcs	r2, r2
    2afc:	0b83      	lsrs	r3, r0, #14
    2afe:	428b      	cmp	r3, r1
    2b00:	d301      	bcc.n	2b06 <__aeabi_uidiv+0x52>
    2b02:	038b      	lsls	r3, r1, #14
    2b04:	1ac0      	subs	r0, r0, r3
    2b06:	4152      	adcs	r2, r2
    2b08:	0b43      	lsrs	r3, r0, #13
    2b0a:	428b      	cmp	r3, r1
    2b0c:	d301      	bcc.n	2b12 <__aeabi_uidiv+0x5e>
    2b0e:	034b      	lsls	r3, r1, #13
    2b10:	1ac0      	subs	r0, r0, r3
    2b12:	4152      	adcs	r2, r2
    2b14:	0b03      	lsrs	r3, r0, #12
    2b16:	428b      	cmp	r3, r1
    2b18:	d301      	bcc.n	2b1e <__aeabi_uidiv+0x6a>
    2b1a:	030b      	lsls	r3, r1, #12
    2b1c:	1ac0      	subs	r0, r0, r3
    2b1e:	4152      	adcs	r2, r2
    2b20:	0ac3      	lsrs	r3, r0, #11
    2b22:	428b      	cmp	r3, r1
    2b24:	d301      	bcc.n	2b2a <__aeabi_uidiv+0x76>
    2b26:	02cb      	lsls	r3, r1, #11
    2b28:	1ac0      	subs	r0, r0, r3
    2b2a:	4152      	adcs	r2, r2
    2b2c:	0a83      	lsrs	r3, r0, #10
    2b2e:	428b      	cmp	r3, r1
    2b30:	d301      	bcc.n	2b36 <__aeabi_uidiv+0x82>
    2b32:	028b      	lsls	r3, r1, #10
    2b34:	1ac0      	subs	r0, r0, r3
    2b36:	4152      	adcs	r2, r2
    2b38:	0a43      	lsrs	r3, r0, #9
    2b3a:	428b      	cmp	r3, r1
    2b3c:	d301      	bcc.n	2b42 <__aeabi_uidiv+0x8e>
    2b3e:	024b      	lsls	r3, r1, #9
    2b40:	1ac0      	subs	r0, r0, r3
    2b42:	4152      	adcs	r2, r2
    2b44:	0a03      	lsrs	r3, r0, #8
    2b46:	428b      	cmp	r3, r1
    2b48:	d301      	bcc.n	2b4e <__aeabi_uidiv+0x9a>
    2b4a:	020b      	lsls	r3, r1, #8
    2b4c:	1ac0      	subs	r0, r0, r3
    2b4e:	4152      	adcs	r2, r2
    2b50:	d2cd      	bcs.n	2aee <__aeabi_uidiv+0x3a>
    2b52:	09c3      	lsrs	r3, r0, #7
    2b54:	428b      	cmp	r3, r1
    2b56:	d301      	bcc.n	2b5c <__aeabi_uidiv+0xa8>
    2b58:	01cb      	lsls	r3, r1, #7
    2b5a:	1ac0      	subs	r0, r0, r3
    2b5c:	4152      	adcs	r2, r2
    2b5e:	0983      	lsrs	r3, r0, #6
    2b60:	428b      	cmp	r3, r1
    2b62:	d301      	bcc.n	2b68 <__aeabi_uidiv+0xb4>
    2b64:	018b      	lsls	r3, r1, #6
    2b66:	1ac0      	subs	r0, r0, r3
    2b68:	4152      	adcs	r2, r2
    2b6a:	0943      	lsrs	r3, r0, #5
    2b6c:	428b      	cmp	r3, r1
    2b6e:	d301      	bcc.n	2b74 <__aeabi_uidiv+0xc0>
    2b70:	014b      	lsls	r3, r1, #5
    2b72:	1ac0      	subs	r0, r0, r3
    2b74:	4152      	adcs	r2, r2
    2b76:	0903      	lsrs	r3, r0, #4
    2b78:	428b      	cmp	r3, r1
    2b7a:	d301      	bcc.n	2b80 <__aeabi_uidiv+0xcc>
    2b7c:	010b      	lsls	r3, r1, #4
    2b7e:	1ac0      	subs	r0, r0, r3
    2b80:	4152      	adcs	r2, r2
    2b82:	08c3      	lsrs	r3, r0, #3
    2b84:	428b      	cmp	r3, r1
    2b86:	d301      	bcc.n	2b8c <__aeabi_uidiv+0xd8>
    2b88:	00cb      	lsls	r3, r1, #3
    2b8a:	1ac0      	subs	r0, r0, r3
    2b8c:	4152      	adcs	r2, r2
    2b8e:	0883      	lsrs	r3, r0, #2
    2b90:	428b      	cmp	r3, r1
    2b92:	d301      	bcc.n	2b98 <__aeabi_uidiv+0xe4>
    2b94:	008b      	lsls	r3, r1, #2
    2b96:	1ac0      	subs	r0, r0, r3
    2b98:	4152      	adcs	r2, r2
    2b9a:	0843      	lsrs	r3, r0, #1
    2b9c:	428b      	cmp	r3, r1
    2b9e:	d301      	bcc.n	2ba4 <__aeabi_uidiv+0xf0>
    2ba0:	004b      	lsls	r3, r1, #1
    2ba2:	1ac0      	subs	r0, r0, r3
    2ba4:	4152      	adcs	r2, r2
    2ba6:	1a41      	subs	r1, r0, r1
    2ba8:	d200      	bcs.n	2bac <__aeabi_uidiv+0xf8>
    2baa:	4601      	mov	r1, r0
    2bac:	4152      	adcs	r2, r2
    2bae:	4610      	mov	r0, r2
    2bb0:	4770      	bx	lr
    2bb2:	e7ff      	b.n	2bb4 <__aeabi_uidiv+0x100>
    2bb4:	b501      	push	{r0, lr}
    2bb6:	2000      	movs	r0, #0
    2bb8:	f000 f806 	bl	2bc8 <__aeabi_idiv0>
    2bbc:	bd02      	pop	{r1, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)

00002bc0 <__aeabi_uidivmod>:
    2bc0:	2900      	cmp	r1, #0
    2bc2:	d0f7      	beq.n	2bb4 <__aeabi_uidiv+0x100>
    2bc4:	e776      	b.n	2ab4 <__aeabi_uidiv>
    2bc6:	4770      	bx	lr

00002bc8 <__aeabi_idiv0>:
    2bc8:	4770      	bx	lr
    2bca:	46c0      	nop			; (mov r8, r8)

00002bcc <memcpy>:
    2bcc:	b570      	push	{r4, r5, r6, lr}
    2bce:	2a0f      	cmp	r2, #15
    2bd0:	d932      	bls.n	2c38 <memcpy+0x6c>
    2bd2:	000c      	movs	r4, r1
    2bd4:	4304      	orrs	r4, r0
    2bd6:	000b      	movs	r3, r1
    2bd8:	07a4      	lsls	r4, r4, #30
    2bda:	d131      	bne.n	2c40 <memcpy+0x74>
    2bdc:	0015      	movs	r5, r2
    2bde:	0004      	movs	r4, r0
    2be0:	3d10      	subs	r5, #16
    2be2:	092d      	lsrs	r5, r5, #4
    2be4:	3501      	adds	r5, #1
    2be6:	012d      	lsls	r5, r5, #4
    2be8:	1949      	adds	r1, r1, r5
    2bea:	681e      	ldr	r6, [r3, #0]
    2bec:	6026      	str	r6, [r4, #0]
    2bee:	685e      	ldr	r6, [r3, #4]
    2bf0:	6066      	str	r6, [r4, #4]
    2bf2:	689e      	ldr	r6, [r3, #8]
    2bf4:	60a6      	str	r6, [r4, #8]
    2bf6:	68de      	ldr	r6, [r3, #12]
    2bf8:	3310      	adds	r3, #16
    2bfa:	60e6      	str	r6, [r4, #12]
    2bfc:	3410      	adds	r4, #16
    2bfe:	4299      	cmp	r1, r3
    2c00:	d1f3      	bne.n	2bea <memcpy+0x1e>
    2c02:	230f      	movs	r3, #15
    2c04:	1945      	adds	r5, r0, r5
    2c06:	4013      	ands	r3, r2
    2c08:	2b03      	cmp	r3, #3
    2c0a:	d91b      	bls.n	2c44 <memcpy+0x78>
    2c0c:	1f1c      	subs	r4, r3, #4
    2c0e:	2300      	movs	r3, #0
    2c10:	08a4      	lsrs	r4, r4, #2
    2c12:	3401      	adds	r4, #1
    2c14:	00a4      	lsls	r4, r4, #2
    2c16:	58ce      	ldr	r6, [r1, r3]
    2c18:	50ee      	str	r6, [r5, r3]
    2c1a:	3304      	adds	r3, #4
    2c1c:	429c      	cmp	r4, r3
    2c1e:	d1fa      	bne.n	2c16 <memcpy+0x4a>
    2c20:	2303      	movs	r3, #3
    2c22:	192d      	adds	r5, r5, r4
    2c24:	1909      	adds	r1, r1, r4
    2c26:	401a      	ands	r2, r3
    2c28:	d005      	beq.n	2c36 <memcpy+0x6a>
    2c2a:	2300      	movs	r3, #0
    2c2c:	5ccc      	ldrb	r4, [r1, r3]
    2c2e:	54ec      	strb	r4, [r5, r3]
    2c30:	3301      	adds	r3, #1
    2c32:	429a      	cmp	r2, r3
    2c34:	d1fa      	bne.n	2c2c <memcpy+0x60>
    2c36:	bd70      	pop	{r4, r5, r6, pc}
    2c38:	0005      	movs	r5, r0
    2c3a:	2a00      	cmp	r2, #0
    2c3c:	d1f5      	bne.n	2c2a <memcpy+0x5e>
    2c3e:	e7fa      	b.n	2c36 <memcpy+0x6a>
    2c40:	0005      	movs	r5, r0
    2c42:	e7f2      	b.n	2c2a <memcpy+0x5e>
    2c44:	001a      	movs	r2, r3
    2c46:	e7f8      	b.n	2c3a <memcpy+0x6e>

00002c48 <memmove>:
    2c48:	b570      	push	{r4, r5, r6, lr}
    2c4a:	4288      	cmp	r0, r1
    2c4c:	d90b      	bls.n	2c66 <memmove+0x1e>
    2c4e:	188b      	adds	r3, r1, r2
    2c50:	4298      	cmp	r0, r3
    2c52:	d208      	bcs.n	2c66 <memmove+0x1e>
    2c54:	1a99      	subs	r1, r3, r2
    2c56:	1e53      	subs	r3, r2, #1
    2c58:	2a00      	cmp	r2, #0
    2c5a:	d003      	beq.n	2c64 <memmove+0x1c>
    2c5c:	5cca      	ldrb	r2, [r1, r3]
    2c5e:	54c2      	strb	r2, [r0, r3]
    2c60:	3b01      	subs	r3, #1
    2c62:	d2fb      	bcs.n	2c5c <memmove+0x14>
    2c64:	bd70      	pop	{r4, r5, r6, pc}
    2c66:	2a0f      	cmp	r2, #15
    2c68:	d809      	bhi.n	2c7e <memmove+0x36>
    2c6a:	0005      	movs	r5, r0
    2c6c:	2a00      	cmp	r2, #0
    2c6e:	d0f9      	beq.n	2c64 <memmove+0x1c>
    2c70:	2300      	movs	r3, #0
    2c72:	5ccc      	ldrb	r4, [r1, r3]
    2c74:	54ec      	strb	r4, [r5, r3]
    2c76:	3301      	adds	r3, #1
    2c78:	429a      	cmp	r2, r3
    2c7a:	d1fa      	bne.n	2c72 <memmove+0x2a>
    2c7c:	e7f2      	b.n	2c64 <memmove+0x1c>
    2c7e:	000c      	movs	r4, r1
    2c80:	4304      	orrs	r4, r0
    2c82:	000b      	movs	r3, r1
    2c84:	07a4      	lsls	r4, r4, #30
    2c86:	d126      	bne.n	2cd6 <memmove+0x8e>
    2c88:	0015      	movs	r5, r2
    2c8a:	0004      	movs	r4, r0
    2c8c:	3d10      	subs	r5, #16
    2c8e:	092d      	lsrs	r5, r5, #4
    2c90:	3501      	adds	r5, #1
    2c92:	012d      	lsls	r5, r5, #4
    2c94:	1949      	adds	r1, r1, r5
    2c96:	681e      	ldr	r6, [r3, #0]
    2c98:	6026      	str	r6, [r4, #0]
    2c9a:	685e      	ldr	r6, [r3, #4]
    2c9c:	6066      	str	r6, [r4, #4]
    2c9e:	689e      	ldr	r6, [r3, #8]
    2ca0:	60a6      	str	r6, [r4, #8]
    2ca2:	68de      	ldr	r6, [r3, #12]
    2ca4:	3310      	adds	r3, #16
    2ca6:	60e6      	str	r6, [r4, #12]
    2ca8:	3410      	adds	r4, #16
    2caa:	4299      	cmp	r1, r3
    2cac:	d1f3      	bne.n	2c96 <memmove+0x4e>
    2cae:	240f      	movs	r4, #15
    2cb0:	1945      	adds	r5, r0, r5
    2cb2:	4014      	ands	r4, r2
    2cb4:	2c03      	cmp	r4, #3
    2cb6:	d910      	bls.n	2cda <memmove+0x92>
    2cb8:	2300      	movs	r3, #0
    2cba:	3c04      	subs	r4, #4
    2cbc:	08a4      	lsrs	r4, r4, #2
    2cbe:	3401      	adds	r4, #1
    2cc0:	00a4      	lsls	r4, r4, #2
    2cc2:	58ce      	ldr	r6, [r1, r3]
    2cc4:	50ee      	str	r6, [r5, r3]
    2cc6:	3304      	adds	r3, #4
    2cc8:	429c      	cmp	r4, r3
    2cca:	d1fa      	bne.n	2cc2 <memmove+0x7a>
    2ccc:	2303      	movs	r3, #3
    2cce:	192d      	adds	r5, r5, r4
    2cd0:	1909      	adds	r1, r1, r4
    2cd2:	401a      	ands	r2, r3
    2cd4:	e7ca      	b.n	2c6c <memmove+0x24>
    2cd6:	0005      	movs	r5, r0
    2cd8:	e7ca      	b.n	2c70 <memmove+0x28>
    2cda:	0022      	movs	r2, r4
    2cdc:	e7c6      	b.n	2c6c <memmove+0x24>
    2cde:	46c0      	nop			; (mov r8, r8)

00002ce0 <memset>:
    2ce0:	b570      	push	{r4, r5, r6, lr}
    2ce2:	0783      	lsls	r3, r0, #30
    2ce4:	d03f      	beq.n	2d66 <memset+0x86>
    2ce6:	1e54      	subs	r4, r2, #1
    2ce8:	2a00      	cmp	r2, #0
    2cea:	d03b      	beq.n	2d64 <memset+0x84>
    2cec:	b2ce      	uxtb	r6, r1
    2cee:	0003      	movs	r3, r0
    2cf0:	2503      	movs	r5, #3
    2cf2:	e003      	b.n	2cfc <memset+0x1c>
    2cf4:	1e62      	subs	r2, r4, #1
    2cf6:	2c00      	cmp	r4, #0
    2cf8:	d034      	beq.n	2d64 <memset+0x84>
    2cfa:	0014      	movs	r4, r2
    2cfc:	3301      	adds	r3, #1
    2cfe:	1e5a      	subs	r2, r3, #1
    2d00:	7016      	strb	r6, [r2, #0]
    2d02:	422b      	tst	r3, r5
    2d04:	d1f6      	bne.n	2cf4 <memset+0x14>
    2d06:	2c03      	cmp	r4, #3
    2d08:	d924      	bls.n	2d54 <memset+0x74>
    2d0a:	25ff      	movs	r5, #255	; 0xff
    2d0c:	400d      	ands	r5, r1
    2d0e:	022a      	lsls	r2, r5, #8
    2d10:	4315      	orrs	r5, r2
    2d12:	042a      	lsls	r2, r5, #16
    2d14:	4315      	orrs	r5, r2
    2d16:	2c0f      	cmp	r4, #15
    2d18:	d911      	bls.n	2d3e <memset+0x5e>
    2d1a:	0026      	movs	r6, r4
    2d1c:	3e10      	subs	r6, #16
    2d1e:	0936      	lsrs	r6, r6, #4
    2d20:	3601      	adds	r6, #1
    2d22:	0136      	lsls	r6, r6, #4
    2d24:	001a      	movs	r2, r3
    2d26:	199b      	adds	r3, r3, r6
    2d28:	6015      	str	r5, [r2, #0]
    2d2a:	6055      	str	r5, [r2, #4]
    2d2c:	6095      	str	r5, [r2, #8]
    2d2e:	60d5      	str	r5, [r2, #12]
    2d30:	3210      	adds	r2, #16
    2d32:	4293      	cmp	r3, r2
    2d34:	d1f8      	bne.n	2d28 <memset+0x48>
    2d36:	220f      	movs	r2, #15
    2d38:	4014      	ands	r4, r2
    2d3a:	2c03      	cmp	r4, #3
    2d3c:	d90a      	bls.n	2d54 <memset+0x74>
    2d3e:	1f26      	subs	r6, r4, #4
    2d40:	08b6      	lsrs	r6, r6, #2
    2d42:	3601      	adds	r6, #1
    2d44:	00b6      	lsls	r6, r6, #2
    2d46:	001a      	movs	r2, r3
    2d48:	199b      	adds	r3, r3, r6
    2d4a:	c220      	stmia	r2!, {r5}
    2d4c:	4293      	cmp	r3, r2
    2d4e:	d1fc      	bne.n	2d4a <memset+0x6a>
    2d50:	2203      	movs	r2, #3
    2d52:	4014      	ands	r4, r2
    2d54:	2c00      	cmp	r4, #0
    2d56:	d005      	beq.n	2d64 <memset+0x84>
    2d58:	b2c9      	uxtb	r1, r1
    2d5a:	191c      	adds	r4, r3, r4
    2d5c:	7019      	strb	r1, [r3, #0]
    2d5e:	3301      	adds	r3, #1
    2d60:	429c      	cmp	r4, r3
    2d62:	d1fb      	bne.n	2d5c <memset+0x7c>
    2d64:	bd70      	pop	{r4, r5, r6, pc}
    2d66:	0014      	movs	r4, r2
    2d68:	0003      	movs	r3, r0
    2d6a:	e7cc      	b.n	2d06 <memset+0x26>

00002d6c <strcmp>:
    2d6c:	4602      	mov	r2, r0
    2d6e:	b570      	push	{r4, r5, r6, lr}
    2d70:	430a      	orrs	r2, r1
    2d72:	0792      	lsls	r2, r2, #30
    2d74:	d12a      	bne.n	2dcc <strcmp+0x60>
    2d76:	4d1e      	ldr	r5, [pc, #120]	; (2df0 <strcmp+0x84>)
    2d78:	01ee      	lsls	r6, r5, #7
    2d7a:	c804      	ldmia	r0!, {r2}
    2d7c:	c908      	ldmia	r1!, {r3}
    2d7e:	1b54      	subs	r4, r2, r5
    2d80:	4394      	bics	r4, r2
    2d82:	4034      	ands	r4, r6
    2d84:	d017      	beq.n	2db6 <strcmp+0x4a>
    2d86:	b2d0      	uxtb	r0, r2
    2d88:	b2d9      	uxtb	r1, r3
    2d8a:	1a40      	subs	r0, r0, r1
    2d8c:	0621      	lsls	r1, r4, #24
    2d8e:	4301      	orrs	r1, r0
    2d90:	d110      	bne.n	2db4 <strcmp+0x48>
    2d92:	b290      	uxth	r0, r2
    2d94:	b299      	uxth	r1, r3
    2d96:	1a40      	subs	r0, r0, r1
    2d98:	0421      	lsls	r1, r4, #16
    2d9a:	4301      	orrs	r1, r0
    2d9c:	d10a      	bne.n	2db4 <strcmp+0x48>
    2d9e:	0210      	lsls	r0, r2, #8
    2da0:	0219      	lsls	r1, r3, #8
    2da2:	0a00      	lsrs	r0, r0, #8
    2da4:	0a09      	lsrs	r1, r1, #8
    2da6:	1a40      	subs	r0, r0, r1
    2da8:	0221      	lsls	r1, r4, #8
    2daa:	4301      	orrs	r1, r0
    2dac:	d102      	bne.n	2db4 <strcmp+0x48>
    2dae:	0e10      	lsrs	r0, r2, #24
    2db0:	0e19      	lsrs	r1, r3, #24
    2db2:	1a40      	subs	r0, r0, r1
    2db4:	bd70      	pop	{r4, r5, r6, pc}
    2db6:	429a      	cmp	r2, r3
    2db8:	d0df      	beq.n	2d7a <strcmp+0xe>
    2dba:	ba10      	rev	r0, r2
    2dbc:	ba19      	rev	r1, r3
    2dbe:	4288      	cmp	r0, r1
    2dc0:	d901      	bls.n	2dc6 <strcmp+0x5a>
    2dc2:	2001      	movs	r0, #1
    2dc4:	bd70      	pop	{r4, r5, r6, pc}
    2dc6:	2000      	movs	r0, #0
    2dc8:	43c0      	mvns	r0, r0
    2dca:	bd70      	pop	{r4, r5, r6, pc}
    2dcc:	7802      	ldrb	r2, [r0, #0]
    2dce:	780b      	ldrb	r3, [r1, #0]
    2dd0:	3001      	adds	r0, #1
    2dd2:	3101      	adds	r1, #1
    2dd4:	2a00      	cmp	r2, #0
    2dd6:	d009      	beq.n	2dec <strcmp+0x80>
    2dd8:	429a      	cmp	r2, r3
    2dda:	d107      	bne.n	2dec <strcmp+0x80>
    2ddc:	7802      	ldrb	r2, [r0, #0]
    2dde:	780b      	ldrb	r3, [r1, #0]
    2de0:	3001      	adds	r0, #1
    2de2:	3101      	adds	r1, #1
    2de4:	2a00      	cmp	r2, #0
    2de6:	d001      	beq.n	2dec <strcmp+0x80>
    2de8:	429a      	cmp	r2, r3
    2dea:	d0ef      	beq.n	2dcc <strcmp+0x60>
    2dec:	1ad0      	subs	r0, r2, r3
    2dee:	bd70      	pop	{r4, r5, r6, pc}
    2df0:	01010101 	.word	0x01010101

00002df4 <strlen>:
    2df4:	b510      	push	{r4, lr}
    2df6:	0783      	lsls	r3, r0, #30
    2df8:	d027      	beq.n	2e4a <strlen+0x56>
    2dfa:	7803      	ldrb	r3, [r0, #0]
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d026      	beq.n	2e4e <strlen+0x5a>
    2e00:	0003      	movs	r3, r0
    2e02:	2103      	movs	r1, #3
    2e04:	e002      	b.n	2e0c <strlen+0x18>
    2e06:	781a      	ldrb	r2, [r3, #0]
    2e08:	2a00      	cmp	r2, #0
    2e0a:	d01c      	beq.n	2e46 <strlen+0x52>
    2e0c:	3301      	adds	r3, #1
    2e0e:	420b      	tst	r3, r1
    2e10:	d1f9      	bne.n	2e06 <strlen+0x12>
    2e12:	6819      	ldr	r1, [r3, #0]
    2e14:	4a0f      	ldr	r2, [pc, #60]	; (2e54 <strlen+0x60>)
    2e16:	4c10      	ldr	r4, [pc, #64]	; (2e58 <strlen+0x64>)
    2e18:	188a      	adds	r2, r1, r2
    2e1a:	438a      	bics	r2, r1
    2e1c:	4222      	tst	r2, r4
    2e1e:	d10f      	bne.n	2e40 <strlen+0x4c>
    2e20:	3304      	adds	r3, #4
    2e22:	6819      	ldr	r1, [r3, #0]
    2e24:	4a0b      	ldr	r2, [pc, #44]	; (2e54 <strlen+0x60>)
    2e26:	188a      	adds	r2, r1, r2
    2e28:	438a      	bics	r2, r1
    2e2a:	4222      	tst	r2, r4
    2e2c:	d108      	bne.n	2e40 <strlen+0x4c>
    2e2e:	3304      	adds	r3, #4
    2e30:	6819      	ldr	r1, [r3, #0]
    2e32:	4a08      	ldr	r2, [pc, #32]	; (2e54 <strlen+0x60>)
    2e34:	188a      	adds	r2, r1, r2
    2e36:	438a      	bics	r2, r1
    2e38:	4222      	tst	r2, r4
    2e3a:	d0f1      	beq.n	2e20 <strlen+0x2c>
    2e3c:	e000      	b.n	2e40 <strlen+0x4c>
    2e3e:	3301      	adds	r3, #1
    2e40:	781a      	ldrb	r2, [r3, #0]
    2e42:	2a00      	cmp	r2, #0
    2e44:	d1fb      	bne.n	2e3e <strlen+0x4a>
    2e46:	1a18      	subs	r0, r3, r0
    2e48:	bd10      	pop	{r4, pc}
    2e4a:	0003      	movs	r3, r0
    2e4c:	e7e1      	b.n	2e12 <strlen+0x1e>
    2e4e:	2000      	movs	r0, #0
    2e50:	e7fa      	b.n	2e48 <strlen+0x54>
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	fefefeff 	.word	0xfefefeff
    2e58:	80808080 	.word	0x80808080

00002e5c <__utoa>:
    2e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e5e:	4657      	mov	r7, sl
    2e60:	4645      	mov	r5, r8
    2e62:	464e      	mov	r6, r9
    2e64:	b4e0      	push	{r5, r6, r7}
    2e66:	b08a      	sub	sp, #40	; 0x28
    2e68:	4690      	mov	r8, r2
    2e6a:	466a      	mov	r2, sp
    2e6c:	4b1d      	ldr	r3, [pc, #116]	; (2ee4 <__utoa+0x88>)
    2e6e:	000d      	movs	r5, r1
    2e70:	0006      	movs	r6, r0
    2e72:	cb13      	ldmia	r3!, {r0, r1, r4}
    2e74:	c213      	stmia	r2!, {r0, r1, r4}
    2e76:	cb13      	ldmia	r3!, {r0, r1, r4}
    2e78:	c213      	stmia	r2!, {r0, r1, r4}
    2e7a:	cb13      	ldmia	r3!, {r0, r1, r4}
    2e7c:	c213      	stmia	r2!, {r0, r1, r4}
    2e7e:	781b      	ldrb	r3, [r3, #0]
    2e80:	46ea      	mov	sl, sp
    2e82:	7013      	strb	r3, [r2, #0]
    2e84:	4643      	mov	r3, r8
    2e86:	3b02      	subs	r3, #2
    2e88:	002f      	movs	r7, r5
    2e8a:	2400      	movs	r4, #0
    2e8c:	2b22      	cmp	r3, #34	; 0x22
    2e8e:	d901      	bls.n	2e94 <__utoa+0x38>
    2e90:	e024      	b.n	2edc <__utoa+0x80>
    2e92:	464c      	mov	r4, r9
    2e94:	1c63      	adds	r3, r4, #1
    2e96:	0030      	movs	r0, r6
    2e98:	4641      	mov	r1, r8
    2e9a:	4699      	mov	r9, r3
    2e9c:	f7ff fe90 	bl	2bc0 <__aeabi_uidivmod>
    2ea0:	4653      	mov	r3, sl
    2ea2:	5c5b      	ldrb	r3, [r3, r1]
    2ea4:	0030      	movs	r0, r6
    2ea6:	703b      	strb	r3, [r7, #0]
    2ea8:	4641      	mov	r1, r8
    2eaa:	f7ff fe03 	bl	2ab4 <__aeabi_uidiv>
    2eae:	3701      	adds	r7, #1
    2eb0:	1e06      	subs	r6, r0, #0
    2eb2:	d1ee      	bne.n	2e92 <__utoa+0x36>
    2eb4:	464b      	mov	r3, r9
    2eb6:	54e8      	strb	r0, [r5, r3]
    2eb8:	2300      	movs	r3, #0
    2eba:	2c00      	cmp	r4, #0
    2ebc:	d007      	beq.n	2ece <__utoa+0x72>
    2ebe:	5cea      	ldrb	r2, [r5, r3]
    2ec0:	5d29      	ldrb	r1, [r5, r4]
    2ec2:	54e9      	strb	r1, [r5, r3]
    2ec4:	552a      	strb	r2, [r5, r4]
    2ec6:	3301      	adds	r3, #1
    2ec8:	3c01      	subs	r4, #1
    2eca:	42a3      	cmp	r3, r4
    2ecc:	dbf7      	blt.n	2ebe <__utoa+0x62>
    2ece:	0028      	movs	r0, r5
    2ed0:	b00a      	add	sp, #40	; 0x28
    2ed2:	bc1c      	pop	{r2, r3, r4}
    2ed4:	4690      	mov	r8, r2
    2ed6:	4699      	mov	r9, r3
    2ed8:	46a2      	mov	sl, r4
    2eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2edc:	702c      	strb	r4, [r5, #0]
    2ede:	2000      	movs	r0, #0
    2ee0:	e7f6      	b.n	2ed0 <__utoa+0x74>
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	00003b00 	.word	0x00003b00

00002ee8 <utoa>:
    2ee8:	b510      	push	{r4, lr}
    2eea:	f7ff ffb7 	bl	2e5c <__utoa>
    2eee:	bd10      	pop	{r4, pc}
    2ef0:	000002c8 	.word	0x000002c8
    2ef4:	000002c8 	.word	0x000002c8
    2ef8:	000002e2 	.word	0x000002e2
    2efc:	000002ea 	.word	0x000002ea
    2f00:	000002f2 	.word	0x000002f2
    2f04:	000002fa 	.word	0x000002fa
    2f08:	00000302 	.word	0x00000302
    2f0c:	0000030a 	.word	0x0000030a
    2f10:	00000312 	.word	0x00000312
    2f14:	0000031a 	.word	0x0000031a
    2f18:	00000322 	.word	0x00000322
    2f1c:	0000032a 	.word	0x0000032a
    2f20:	00000332 	.word	0x00000332
    2f24:	0000033a 	.word	0x0000033a
    2f28:	000002da 	.word	0x000002da
    2f2c:	000002c2 	.word	0x000002c2

00002f30 <OscRateIn>:
    2f30:	00000000 00000a0d 5f6e6143 6f727245     ........Can_Erro
    2f40:	50455f72 00535341 5f6e6143 6f727245     r_EPASS.Can_Erro
    2f50:	52435f72 00000043 5f6e6143 6f727245     r_CRC...Can_Erro
    2f60:	41575f72 00004e52 5f6e6143 6f727245     r_WARN..Can_Erro
    2f70:	4f425f72 00004646 5f6e6143 6f727245     r_BOFF..Can_Erro
    2f80:	54535f72 00004655 5f6e6143 6f727245     r_STUF..Can_Erro
    2f90:	4f465f72 00004d52 5f6e6143 6f727245     r_FORM..Can_Erro
    2fa0:	43415f72 0000004b 5f6e6143 6f727245     r_ACK...Can_Erro
    2fb0:	49425f72 00003154 5f6e6143 6f727245     r_BIT1..Can_Erro
    2fc0:	49425f72 00003054 5f6e6143 6f727245     r_BIT0..Can_Erro
    2fd0:	4e555f72 44455355 00000000 5f6e6143     r_UNUSED....Can_
    2fe0:	6f727245 4e555f72 4f434552 5a494e47     Error_UNRECOGNIZ
    2ff0:	4d5f4445 424f4753 0000004a 5f6e6143     ED_MSGOBJ...Can_
    3000:	6f727245 4e555f72 4f434552 5a494e47     Error_UNRECOGNIZ
    3010:	455f4445 524f5252 00000000 5f6e6143     ED_ERROR....Can_
    3020:	6f727245 58545f72 4655425f 5f524546     Error_TX_BUFFER_
    3030:	4c4c5546 00000000 5f6e6143 6f727245     FULL....Can_Erro
    3040:	58525f72 4655425f 5f524546 4c4c5546     r_RX_BUFFER_FULL
    3050:	00000000 000006b4 00000656 000006de     ........V.......
    3060:	0000072a 00000712 000006f8 00000850     *...........P...
    3070:	0000077e 000007ce 00000678 000006c0     ~.......x.......
    3080:	00000878 00000a60 00000bb0 00000be0     x...`...........
    3090:	00000af0 00000b20 00000c70 00000ca0     .... ...p.......
    30a0:	00000a90 00000ac0 00000c10 00000c40     ............@...
    30b0:	00000b50 00000b80 00000cf4 00000d22     P..........."...
    30c0:	00000a30 00000d50 00000f22 00000ee2     0...P...".......
    30d0:	00000ee6 00000ef0 00000efa 00000f2c     ............,...
    30e0:	00000f36 00000f40 00000f4a 00000f54     6...@...J...T...
    30f0:	00000f5e 00000f68 00000f72 00000f04     ^...h...r.......
    3100:	00000f0e 00000f18 00000f7c 00000eb8     ........|.......
    3110:	00000ec2 00000ed8 00000e96 00000eae     ................
    3120:	00000fc0                                ....

00003124 <PACK_NAMES>:
    3124:	000037d0 000037dc 000037e8              .7...7...7..

00003130 <locstring>:
    3130:	00003244 00003498 000034a4 000034b8     D2...4...4...4..
    3140:	000034c4 000034d8 000034f0 00003504     .4...4...4...5..
    3150:	00003518 00003528 0000353c 00003550     .5..(5..<5..P5..
    3160:	00003564 0000357c 00003594 000035ac     d5..|5...5...5..
    3170:	000035c4 00003250 000035d0 000035e0     .5..P2...5...5..
    3180:	000035ec 00003600 00003610 00003620     .5...6...6.. 6..

00003190 <CSB_SSM_MODE_NAMES>:
    3190:	00003760 00003774 00003788 0000379c     `7..t7...7...7..

000031a0 <handlers>:
    31a0:	00000e31 000009b5 00001169 00001111     1.......i.......
    31b0:	00001205 00000dd9 000008d1              ............

000031bc <BMS_COMM_NAMES>:
    31bc:	000037b4 000037c0 7361654d 20657275     .7...7..Measure 
    31cc:	00216e4f 7361654d 20657275 2166664f     On!.Measure Off!
    31dc:	00000000 6e697270 6c665f74 00736761     ....print_flags.
    31ec:	6b636150 72754320 746e6572 6e4f203a     Pack Current: On
    31fc:	00000000 6b636150 72754320 746e6572     ....Pack Current
    320c:	664f203a 00000066 6b636170 72727563     : Off...packcurr
    321c:	00746e65 6b636170 746c6f76 00656761     ent.packvoltage.
    322c:	65726e55 6e676f63 64657a69 6d6f6320     Unrecognized com
    323c:	646e616d 00000021 6c6c6563 6e696d5f     mand!...cell_min
    324c:	00566d5f 74617473 00000065 20746553     _mV.state...Set 
    325c:	6c696166 28206465 20746f6e 73206e69     failed (not in s
    326c:	646e6174 6d207962 2965646f 00000021     tandby mode)!...
    327c:	656e6f44 00000021 73696874 636f6c20     Done!...this loc
    328c:	6f697461 7369206e 61657220 6e6f2064     ation is read on
    329c:	0000796c 61766e69 2064696c 61636f6c     ly..invalid loca
    32ac:	6e6f6974 00000000 00736579 00006f6e     tion....yes.no..
    32bc:	67726863 66666f20 00000000 67726863     chrg off....chrg
    32cc:	006e6f20 7473754d 20656220 73206e69      on.Must be in s
    32dc:	646e6174 00007962 20776f6c 65646973     tandby..low side
    32ec:	6e6f6320 74636174 6620726f 746c7561      contactor fault
    32fc:	00000020 20444d49 6c756166 00002074      ...IMD fault ..
    330c:	65746e69 636f6c72 6166206b 20746c75     interlock fault 
    331c:	00000000 20534d42 6c756166 00002074     ....BMS fault ..
    332c:	72652020 20726f72 00000000 6f636c65       error ....elco
    333c:	6e6f206e 00000020 6c652020 206e6f63     n on ...  elcon 
    334c:	20736168 64726168 65726177 69616620     has hardware fai
    335c:	6572756c 00000000 6c652020 206e6f63     lure....  elcon 
    336c:	7265766f 6d657420 72702070 6365746f     over temp protec
    337c:	6e6f6974 006e6f20 6c652020 206e6f63     tion on.  elcon 
    338c:	75706e69 6f762074 6761746c 73692065     input voltage is
    339c:	6f727720 0000676e 6c652020 206e6f63      wrong..  elcon 
    33ac:	74746162 20797265 746c6f76 20656761     battery voltage 
    33bc:	20746f6e 65746564 64657463 00000000     not detected....
    33cc:	6c652020 206e6f63 6d6d6f63 73692073       elcon comms is
    33dc:	64616220 00000000 61766e69 2064696c      bad....invalid 
    33ec:	20746567 61636f6c 6e6f6974 00000000     get location....
    33fc:	3831594d 00000000 3631594d 00000000     MY18....MY16....
    340c:	00746567 2d2d2d2d 2f722d2d 6e652077     get.------r/w en
    341c:	65697274 2d2d2d73 002d2d2d 2d2d2d2d     tries------.----
    342c:	2f722d2d 6e65206f 65697274 2d2d2d73     --r/o entries---
    343c:	002d2d2d 206c6162 0066666f 206c6162     ---.bal off.bal 
    344c:	00006e6f 6f636e69 63657272 756e2074     on..incorrect nu
    345c:	7265626d 20666f20 73677261 00000000     mber of args....
    346c:	65726e55 6e676f63 64657a69 6d6f6320     Unrecognized com
    347c:	646e616d 00000000 7563702c 002c7272     mand....,pcurr,.
    348c:	0000000a 6f76702c 002c746c 6c6c6563     ....,pvolt,.cell
    349c:	78616d5f 00566d5f 6c6c6563 7061635f     _max_mV.cell_cap
    34ac:	74696361 41635f79 00000068 5f6d756e     acity_cAh...num_
    34bc:	75646f6d 0073656c 75646f6d 635f656c     modules.module_c
    34cc:	5f6c6c65 6e756f63 00000074 6c6c6563     ell_count...cell
    34dc:	6168635f 5f656772 61725f63 676e6974     _charge_c_rating
    34ec:	0043635f 5f6c6162 745f6e6f 73657268     _cC.bal_on_thres
    34fc:	566d5f68 00000000 5f6c6162 5f66666f     h_mV....bal_off_
    350c:	65726874 6d5f6873 00000056 6b636170     thresh_mV...pack
    351c:	6c65635f 705f736c 00000000 6d5f7663     _cells_p....cv_m
    352c:	635f6e69 65727275 6d5f746e 00000041     in_current_mA...
    353c:	6d5f7663 635f6e69 65727275 6d5f746e     cv_min_current_m
    354c:	00000073 635f6363 5f6c6c65 746c6f76     s...cc_cell_volt
    355c:	5f656761 0000566d 635f6363 67726168     age_mV..cc_charg
    356c:	6f765f65 6761746c 566d5f65 00000000     e_voltage_mV....
    357c:	635f6363 67726168 75635f65 6e657272     cc_charge_curren
    358c:	416d5f74 00000000 635f7663 67726168     t_mA....cv_charg
    359c:	6f765f65 6761746c 566d5f65 00000000     e_voltage_mV....
    35ac:	635f7663 67726168 75635f65 6e657272     cv_charge_curren
    35bc:	416d5f74 00000000 5f736d62 6d6d6f63     t_mA....bms_comm
    35cc:	00000000 61746f74 756e5f6c 65635f6d     ....total_num_ce
    35dc:	00736c6c 6b636170 6d616e5f 00000065     lls.pack_name...
    35ec:	6b636170 6c65635f 616d5f6c 566d5f78     pack_cell_max_mV
    35fc:	00000000 6b636170 7275635f 746e6572     ....pack_current
    360c:	00416d5f 6b636170 6c6f765f 65676174     _mA.pack_voltage
    361c:	00566d5f 6c756166 00000074 00746573     _mV.fault...set.
    362c:	706c6568 00000000 666e6f63 645f6769     help....config_d
    363c:	00006665 006c6162 67726863 00000000     ef..bal.chrg....
    364c:	7361656d 00657275 5f425343 54494e49     measure.CSB_INIT
    365c:	46464f5f 00000000 5f425343 54494e49     _OFF....CSB_INIT
    366c:	4e4f445f 00000045 5f425343 52414843     _DONE...CSB_CHAR
    367c:	4f5f4547 00004646 5f425343 52414843     GE_OFF..CSB_CHAR
    368c:	535f4547 54524154 4957535f 00484354     GE_START_SWITCH.
    369c:	5f425343 52414843 535f4547 43544957     CSB_CHARGE_SWITC
    36ac:	30355f48 00000030 5f425343 52414843     H_500...CSB_CHAR
    36bc:	535f4547 5f444e45 00303035 5f425343     GE_SEND_500.CSB_
    36cc:	52414843 535f4547 43544957 35325f48     CHARGE_SWITCH_25
    36dc:	00000030 5f425343 52414843 575f4547     0...CSB_CHARGE_W
    36ec:	5f544941 00303532 5f425343 52414843     AIT_250.CSB_CHAR
    36fc:	435f4547 45534f4c 544e435f 00000052     GE_CLOSE_CNTR...
    370c:	5f425343 52414843 435f4547 00000043     CSB_CHARGE_CC...
    371c:	5f425343 52414843 435f4547 00000056     CSB_CHARGE_CV...
    372c:	5f425343 52414843 425f4547 00004c41     CSB_CHARGE_BAL..
    373c:	5f425343 52414843 465f4547 544c5541     CSB_CHARGE_FAULT
    374c:	00000000 5f425343 52414843 445f4547     ....CSB_CHARGE_D
    375c:	00454e4f 5f425343 5f4d5353 45444f4d     ONE.CSB_SSM_MODE
    376c:	494e495f 00000054 5f425343 5f4d5353     _INIT...CSB_SSM_
    377c:	45444f4d 4c44495f 00000045 5f425343     MODE_IDLE...CSB_
    378c:	5f4d5353 45444f4d 4148435f 00454752     SSM_MODE_CHARGE.
    379c:	5f425343 5f4d5353 45444f4d 4c41425f     CSB_SSM_MODE_BAL
    37ac:	45434e41 00000000 5f534d42 435f4f4e     ANCE....BMS_NO_C
    37bc:	004d4d4f 5f534d42 5f534559 4d4d4f43     OMM.BMS_YES_COMM
    37cc:	00000000 3831594d 4341505f 0000004b     ....MY18_PACK...
    37dc:	3631594d 4341505f 0000004b 54535543     MY16_PACK...CUST
    37ec:	505f4d4f 004b4341                       OM_PACK.

000037f4 <commands>:
    37f4:	0000340c 00003628 0000362c 00003634     .4..(6..,6..46..
    3804:	00003640 00003644 0000364c              @6..D6..L6..

00003810 <nargs>:
    3810:	01010201 00010001                       ........

00003818 <CSB_INIT_MODE_NAMES>:
    3818:	00003654 00003664                       T6..d6..

00003820 <CSB_CHARGE_MODE_NAMES>:
    3820:	00003674 00003684 0000369c 000036b4     t6...6...6...6..
    3830:	000036c8 000036e0 000036f4 0000370c     .6...6...6...7..
    3840:	0000371c 0000372c 0000373c 00003750     .7..,7..<7..P7..
    3850:	000019ac 00001a24 00001a32 000019ac     ....$...2.......
    3860:	000019ac 00001a4c 00001a62 000019ac     ....L...b.......
    3870:	00001a7e 000019ac 00001a96 00001a9c     ~...............
    3880:	000019ac 00001a00 00001aae 000019ac     ................
    3890:	00001ab6 000019ac 000019ac 000019ac     ................
    38a0:	000019ac 00001a04 000019ac 000019ac     ................
    38b0:	000019ac 000019ac 000019ac 00001a00     ................
    38c0:	000019ac 000019ac 000019ac 000019ac     ................
    38d0:	000019ac 000019ac 000019ac 000019ac     ................
    38e0:	000019ac 000019ac 000019ac 000019ac     ................
    38f0:	000019ac 000019ac 000019ac 000019ac     ................
    3900:	000019ac 000019ac 000019ac 000019ac     ................
    3910:	000019ac 000019ac 000019ac 000019ac     ................
    3920:	000019ac 000019ac 000019ac 000019ac     ................
    3930:	000019ac 000019ac 000019ac 000019ac     ................
    3940:	000019ac 000019ac 000019ac 000019ac     ................
    3950:	000019ac 000019ac 000019ac 000019ac     ................
    3960:	000019ac 000019ac 000019ac 000019ac     ................
    3970:	000019ac 000019ac 000019ac 000019ac     ................
    3980:	000019ac 000019ac 000019ac 000019ac     ................
    3990:	000019ac 000019ac 000019ac 000019ac     ................
    39a0:	000019ac 000019ac 000019ac 000019ac     ................
    39b0:	000019ac 000019ac 000019ac 000019ac     ................
    39c0:	000019ac 000019ac 000019ac 000019ac     ................
    39d0:	000019ac 000019ac 000019ac 000019ac     ................
    39e0:	000019ac 000019ac 000019ac 000019ac     ................
    39f0:	000019ac 000019ac 000019ac 000019ac     ................
    3a00:	000019ac 000019ac 000019ac 000019ac     ................
    3a10:	000019ac 000019ac 000019ac 000019ac     ................
    3a20:	000019ac 000019ac 000019ac 000019ac     ................
    3a30:	000019ac 000019ac 000019ac 000019ac     ................
    3a40:	000019ac 000019ac 000019ac 00001a7e     ............~...
    3a50:	00005b1b 00000044 004b5b1b 20445b1b     .[..D....[K..[D 
    3a60:	00445b1b 00203e20 4f525245 6f743a52     .[D. > .ERROR:to
    3a70:	616d206f 7420796e 6e656b6f 00000073     o many tokens...
    3a80:	0000203e                                > ..

00003a84 <wdtOSCRate>:
    3a84:	00000000 000927c0 00100590 00155cc0     .....'.......\..
    3a94:	001ab3f0 00200b20 00249f00 002932e0     .... . ...$..2).
    3aa4:	002dc6c0 00319750 003567e0 00393870     ..-.P.1..g5.p89.
    3ab4:	003d0900 00401640 00432380 004630c0     ..=.@.@..#C..0F.
    3ac4:	000024f4 0000250a 0000250e 00002512     .$...%...%...%..
    3ad4:	00002516 0000251a 0000251e 00002389     .%...%...%...#..
    3ae4:	000023cd 00002375 00000000 00000000     .#..u#..........
	...
    3b00:	33323130 37363534 62613938 66656463     0123456789abcdef
    3b10:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
    3b20:	7a797877 00000000                       wxyz....
